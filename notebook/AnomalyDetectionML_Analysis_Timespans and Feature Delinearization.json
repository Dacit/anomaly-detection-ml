{"paragraphs":[{"text":"%dep\n\nz.reset\nz.addRepo(\"Spark Packages Repo\").url(\"https://dl.bintray.com/spark-packages/maven\")\nz.addRepo(\"qaware-internal-snapshots\").url(\"https://www.qaware.de/nexus/content/repositories/qaware-internal-snapshots/\").username(\"f.huch\")\nz.load(\"de.qaware.mlwb:featureextractor:1.0-SNAPSHOT\")\nz.load(\"de.qaware.mlwb:mlwb-impl:1.2-SNAPSHOT\")\n\nz.fetch","user":"anonymous","dateUpdated":"2017-10-24T15:51:16+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: java.util.List[java.io.File] = [/opt/zeppelin/local-repo/de/qaware/mlwb/featureextractor/1.0-SNAPSHOT/featureextractor-1.0-SNAPSHOT.jar, /opt/zeppelin/local-repo/de/qaware/mlwb/mlwb-impl/1.2-SNAPSHOT/mlwb-impl-1.2-SNAPSHOT.jar, /opt/zeppelin/local-repo/de/qaware/mlwb/mlwb-api/1.2-SNAPSHOT/mlwb-api-1.2-SNAPSHOT.jar, /opt/zeppelin/local-repo/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar, /opt/zeppelin/local-repo/de/qaware/mlwb/mlwb-dt/1.2-SNAPSHOT/mlwb-dt-1.2-SNAPSHOT.jar, /opt/zeppelin/local-repo/org/apache/solr/solr-solrj/6.5.1/solr-solrj-6.5.1.jar, /opt/zeppelin/local-repo/org/apache/httpcomponents/httpclient/4.4.1/httpclient-4.4.1.jar, /opt/zeppelin/local-repo/org/apache/httpcomponents/httpcore/4.4.1/httpcore-4.4.1.jar, /opt/zeppelin/local-repo/org/apache/httpcompon..."}]},"apps":[],"jobName":"paragraph_1499178948613_519993681","id":"20170704-163548_594306265","dateCreated":"2017-07-04T16:35:48+0200","dateStarted":"2017-10-24T15:51:16+0200","dateFinished":"2017-10-24T15:51:23+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:63"},{"text":"%md\n\n# Load dataset","user":"anonymous","dateUpdated":"2017-07-12T15:18:37+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Load dataset</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1499782684332_-352602017","id":"20170711-161804_691820061","dateCreated":"2017-07-11T16:18:04+0200","dateStarted":"2017-07-12T15:18:37+0200","dateFinished":"2017-07-12T15:18:37+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64"},{"text":"%spark\nimport java.sql.Timestamp\nimport de.qaware.mlwb.api._\nimport de.qaware.mlwb.impl.sparksolr.MetricsServiceImpl\nimport collection.JavaConverters._\n\nval metricsQueryService = new MetricsServiceImpl.Factory(sqlc).getInstance(\"192.168.1.100:2181\", \"ekgdata\")\n\n// Load ALL the data\nval start = Timestamp.valueOf(\"2013-12-01 00:00:00\")\nval end =  Timestamp.valueOf(\"2016-01-01 00:00:00\")\n\nval query = new QueryMetricContext.Builder().withHost(\"lp*\").withStart(start).withEnd(end).build()\n\nval allCounterDataset = metricsQueryService.getCounters(query, Granularity.HOUR, AggregationType.AVG)\n\n// Create view and lazily cache table\nallCounterDataset.createOrReplaceTempView(\"allCountersHourly\")\nsqlc.cacheTable(\"allCountersHourly\")\n// Caching is lazy, count to trigger execution\nallCounterDataset.count","user":"anonymous","dateUpdated":"2017-10-24T15:53:56+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1499178999598_1611369780","id":"20170704-163639_1739369496","dateCreated":"2017-07-04T16:36:39+0200","dateStarted":"2017-10-24T15:51:30+0200","dateFinished":"2017-10-24T15:53:28+0200","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:65"},{"text":"%md\n\n# Timespans","user":"anonymous","dateUpdated":"2017-07-12T15:18:38+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Timespans</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1499782714396_-1662474452","id":"20170711-161834_46227657","dateCreated":"2017-07-11T16:18:34+0200","dateStarted":"2017-07-12T15:18:38+0200","dateFinished":"2017-07-12T15:18:38+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:66"},{"text":"%md\n\n### Calculate Timespans","user":"anonymous","dateUpdated":"2017-07-12T15:18:38+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Calculate Timespans</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1499782699083_-1830022469","id":"20170711-161819_1016996999","dateCreated":"2017-07-11T16:18:19+0200","dateStarted":"2017-07-12T15:18:38+0200","dateFinished":"2017-07-12T15:18:38+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:67"},{"text":"%spark\nimport java.sql.Timestamp\nimport org.apache.spark.sql.Encoders\nimport de.qaware.mlwb.api.Counter\nimport collection.JavaConverters._\n\ndef keyByDate(c: Counter): Tuple2[String, String] = {\n    return new Tuple2(c.getValuePoints.get(0).getDate.toString.substring(0, 10), c.getValuePoints.get(c.getValuePoints.size - 1).getDate.toString.substring(0, 10))\n}\n\nval timespans = sqlc.table(\"allCountersHourly\").as(Encoders.bean(classOf[Counter])).groupByKey(keyByDate(_)).count","user":"anonymous","dateUpdated":"2017-10-24T15:53:35+0200","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":484,"optionOpen":false}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","lineNumbers":true,"editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport java.sql.Timestamp\n\nimport org.apache.spark.sql.Encoders\n\nimport de.qaware.mlwb.api.Counter\n\nimport collection.JavaConverters._\n\nkeyByDate: (c: de.qaware.mlwb.api.Counter)(String, String)\n\ntimespans: org.apache.spark.sql.Dataset[((String, String), Long)] = [key: struct<_1: string, _2: string>, count(1): bigint]\n"}]},"apps":[],"jobName":"paragraph_1499179017821_-1723987787","id":"20170704-163657_568049588","dateCreated":"2017-07-04T16:36:57+0200","dateStarted":"2017-10-24T15:53:35+0200","dateFinished":"2017-10-24T15:53:38+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:68"},{"text":"%md\n\n### Display and select","user":"anonymous","dateUpdated":"2017-07-12T15:18:38+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Display and select</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1499782766307_1503316119","id":"20170711-161926_1786405495","dateCreated":"2017-07-11T16:19:26+0200","dateStarted":"2017-07-12T15:18:38+0200","dateFinished":"2017-07-12T15:18:38+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:69"},{"text":"%spark\n// Generate Latex Table Content\ntimespans.collect.foreach(x => println(x._1._1 + \" & \" + x._1._2 + \" & \" + x._2 + \" \\\\\\\\\"))","user":"anonymous","dateUpdated":"2017-10-24T15:54:19+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1499782891923_-449853188","id":"20170711-162131_180548486","dateCreated":"2017-07-11T16:21:31+0200","dateStarted":"2017-10-24T15:54:19+0200","dateFinished":"2017-10-24T15:54:22+0200","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:70"},{"text":"%spark\ntimespans.show(100, false)","user":"anonymous","dateUpdated":"2017-10-24T11:55:53+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1499782640325_-1066958131","id":"20170711-161720_868075405","dateCreated":"2017-07-11T16:17:20+0200","dateStarted":"2017-10-24T11:55:53+0200","dateFinished":"2017-10-24T11:55:56+0200","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:71"},{"text":"%md\n\n# Feature Delinearization (Grouping)","user":"anonymous","dateUpdated":"2017-10-24T10:02:14+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Feature Delinearization (Grouping)</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1499783015803_1253197041","id":"20170711-162335_1304981620","dateCreated":"2017-07-11T16:23:35+0200","dateStarted":"2017-10-24T10:02:14+0200","dateFinished":"2017-10-24T10:02:14+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:72"},{"text":"%spark\nimport java.sql.Timestamp\nimport org.apache.spark.sql.Encoders\nimport de.qaware.mlwb.featureextractor._\n\nobject Context {\n    val start = Timestamp.valueOf(\"2014-11-29 00:00:00\")\n    val end = Timestamp.valueOf(\"2015-10-03 00:00:00\")\n}\n\ndef inRange(c: Counter): Boolean = {\n    val head = c.getValuePoints.get(0).getDate\n    val tail = c.getValuePoints.get(c.getValuePoints.size - 1).getDate\n    return (head.before(Context.start) || head.equals(Context.start)) && (tail.after(Context.end) || tail.equals(Context.end))\n}\n\n// Filter in range so only metrics which are completely in range qualify\nval data = sqlc.table(\"allCountersHourly\").as(Encoders.bean(classOf[Counter])).filter(inRange(_)).map(c => c.getMetric.getName + \" [series,\" + c.getMetric.getProcs + \",\" + c.getMetric.getHost + \"]\")\n\n// Group by name and property keys\nval partly = data\n    .map(Parser.parseString(_)) (Encoders.bean(classOf[LinearizedMetric]))\n    .groupByKey(new PropertyKey(_)) (Encoders.bean(classOf[PropertyKey]))\n    .mapValues(_.getPropertyValueTuple) (Encoders.bean(classOf[Tuple]))\n    .mapGroups((k, values) => new PartlyLinearizedMetric(k, values.toArray.distinct.sorted (Ordering.by[Tuple, String](t => t.getArr.mkString(\",\"))))) (Encoders.bean(classOf[PartlyLinearizedMetric]))\n\n// Merge groups with same property keys and value set \nval full = partly\n    .groupByKey(_.getValueSet) (Encoders.bean(classOf[ValueSet]))\n    .mapValues(_.getPropertyKey.getName)\n    .mapGroups((vs, pks) => new DeLinearizedMetric(vs, pks.toArray.distinct.sorted)) (Encoders.bean(classOf[DeLinearizedMetric]))\n    \n// .take/.takeRight/.slice if too big\nfull.collect.foreach(e => {\n    println(\"#\")\n    println(\"names:           [\" + e.getProperties.mkString(\", \") + \"]\")\n    println(\"with properties: \" + e.getValueSet.getKeyTuple.getArr.mkString(\", \"))\n    println(\"values:          \" + (\"*\" * e.getValueSet.getKeyTuple.getArr.mkString(\", \").length))\n    e.getValueSet.getValues.foreach(v => println(\"                 \" + v.getArr.mkString(\",\")))\n    println(\"#\")\n})","user":"anonymous","dateUpdated":"2017-10-24T16:01:02+0200","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":244.35,"optionOpen":false}},"1":{"graph":{"mode":"table","height":86,"optionOpen":false}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1499179028203_240170672","id":"20170704-163708_2128467035","dateCreated":"2017-07-04T16:37:08+0200","dateStarted":"2017-10-24T16:00:31+0200","dateFinished":"2017-10-24T16:00:35+0200","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:73"},{"text":"%md\n\n# Cleanup","user":"anonymous","dateUpdated":"2017-07-12T15:18:38+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Cleanup</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1499329774132_2138585227","id":"20170706-102934_1140953841","dateCreated":"2017-07-06T10:29:34+0200","dateStarted":"2017-07-12T15:18:38+0200","dateFinished":"2017-07-12T15:18:38+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:74"},{"text":"%spark\nsqlc.dropTempTable(\"allCountersHourly\")","user":"anonymous","dateUpdated":"2017-10-24T10:09:42+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1499335910709_1306738894","id":"20170706-121150_1622241166","dateCreated":"2017-07-06T12:11:50+0200","dateStarted":"2017-07-12T15:43:06+0200","dateFinished":"2017-07-12T15:43:13+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:75"},{"text":"","user":"anonymous","dateUpdated":"2017-10-24T10:02:26+0200","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1499865518936_34872206","id":"20170712-151838_851350294","dateCreated":"2017-07-12T15:18:38+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:76"}],"name":"AnomalyDetectionML/Analysis/Timespans and Feature Delinearization","id":"2CKG33VDP","angularObjects":{"2CPFAFHDY:shared_process":[],"2CPQJR8B3:shared_process":[],"2CN9S7C2W:shared_process":[],"2CKKBTCHR:shared_process":[],"2CMS4HNTQ:shared_process":[],"2CK83CSDN:shared_process":[],"2CMSAH9NV:shared_process":[],"2CJXCVPD7:shared_process":[],"2CNZU7A8V:shared_process":[],"2CM46PNBF:shared_process":[],"2CMUR29ST:shared_process":[],"2CNN25Z3S:shared_process":[],"2CNVY9QSQ:shared_process":[],"2CNHV93NA:shared_process":[],"2CMP1HWKM:shared_process":[],"2CMYN23NB:shared_process":[],"2CK2XWSJB:shared_process":[],"2CPRJF774:shared_process":[],"2CMSRN5AW:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}