{"paragraphs":[{"text":"%kryo-spark.dep\n\nz.reset()\nz.addRepo(\"Spark Packages Repo\").url(\"https://dl.bintray.com/spark-packages/maven\")\n\nz.addRepo(\"qaware-internal-snapshots\").url(\"https://www.qaware.de/nexus/content/repositories/qaware-internal-snapshots/\").username(\"f.huch\").password(\"\")\nz.load(\"de.qaware.mlwb:mlwb-impl:1.2-SNAPSHOT\")\n\nz.load(\"org.vegas-viz:vegas_2.11:0.3.11\")\nz.load(\"org.vegas-viz:vegas-spark_2.11:0.3.11\")\nz.load(\"sramirez:spark-infotheoretic-feature-selection:1.4.0\")\nz.load(\"org.nd4j:nd4j-native:0.9.1\")\nz.load(\"org.deeplearning4j:dl4j-spark_2.11:0.9.1_spark_2\")\nz.load(\"org.nd4j:nd4j-kryo_2.11:0.9.1\")\nz.load(\"org.datavec:datavec-api:0.9.1\")\nz.load(\"org.apache.mahout:mahout-spark_2.10:0.13.0\")\nz.load(\"org.apache.commons:commons-math3:3.6.1\")\n\nz.fetch","user":"anonymous","dateUpdated":"2018-01-16T12:57:10+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: java.util.List[java.io.File] = [/opt/zeppelin/local-repo/de/qaware/mlwb/mlwb-impl/1.2-SNAPSHOT/mlwb-impl-1.2-SNAPSHOT.jar, /opt/zeppelin/local-repo/de/qaware/mlwb/mlwb-api/1.2-SNAPSHOT/mlwb-api-1.2-SNAPSHOT.jar, /opt/zeppelin/local-repo/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar, /opt/zeppelin/local-repo/de/qaware/mlwb/mlwb-dt/1.2-SNAPSHOT/mlwb-dt-1.2-SNAPSHOT.jar, /opt/zeppelin/local-repo/org/apache/solr/solr-solrj/6.5.1/solr-solrj-6.5.1.jar, /opt/zeppelin/local-repo/org/apache/httpcomponents/httpclient/4.4.1/httpclient-4.4.1.jar, /opt/zeppelin/local-repo/org/apache/httpcomponents/httpcore/4.4.1/httpcore-4.4.1.jar, /opt/zeppelin/local-repo/org/apache/httpcomponents/httpmime/4.4.1/httpmime-4.4.1.jar, /opt/zeppelin/local-repo/org/apache/zookeeper/zookeeper/3.4.6/zoo..."}]},"apps":[],"jobName":"paragraph_1511858887684_-2079879354","id":"20171128-094807_1129589116","dateCreated":"2017-11-28T09:48:07+0100","dateStarted":"2018-01-16T12:57:10+0100","dateFinished":"2018-01-16T12:57:24+0100","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:63"},{"text":"%kryo-spark\nimport org.apache.spark.ml.feature._\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql.Row\nimport org.apache.spark.sql.Encoders\nimport de.qaware.mlwb.api.Counter\nimport org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.ml.linalg.Vector\nimport collection.JavaConverters._\nimport java.sql.Timestamp\nimport de.qaware.mlwb.api._\nimport de.qaware.mlwb.impl.sparksolr.MetricsServiceImpl\nimport org.apache.spark.storage.StorageLevel\n\norg.bytedeco.javacpp.Pointer.maxPhysicalBytes\norg.bytedeco.javacpp.Pointer.maxBytes\n\nval trainFromFile: RDD[Row] = sc.objectFile(\"/anomaly-detection-ml/training/part-*\", 200)\nval validateFromFile: RDD[Row] = sc.objectFile(\"/anomaly-detection-ml/validate/part-*\", 200)\nval testFromFile: RDD[Row] = sc.objectFile(\"/anomaly-detection-ml/test/part-*\", 200)\n\nval train = sqlc.createDataFrame(trainFromFile, trainFromFile.first.schema)\nval validate = sqlc.createDataFrame(validateFromFile, validateFromFile.first.schema)\nval test = sqlc.createDataFrame(testFromFile, testFromFile.first.schema)","user":"anonymous","dateUpdated":"2018-01-16T12:57:10+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.feature._\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql.Row\nimport org.apache.spark.sql.Encoders\nimport de.qaware.mlwb.api.Counter\nimport org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.ml.linalg.Vector\nimport collection.JavaConverters._\nimport java.sql.Timestamp\nimport de.qaware.mlwb.api._\nimport de.qaware.mlwb.impl.sparksolr.MetricsServiceImpl\nimport org.apache.spark.storage.StorageLevel\nres1: Long = 7635730432\nres2: Long = 3817865216\ntrainFromFile: org.apache.spark.rdd.RDD[org.apache.spark.sql.Row] = MapPartitionsRDD[1] at objectFile at <console>:46\nvalidateFromFile: org.apache.spark.rdd.RDD[org.apache.spark.sql.Row] = MapPartitionsRDD[3] at objectFile at <console>:45\ntestFromFile: org.apache.spark.rdd.RDD[org.apache.spark.sql.Row] = MapPartitionsRDD[5] at objectFile at <console>:45\ntrain: org.apache.spark.sql.DataFrame = [host: string, procs: string ... 4 more fields]\nvalidate: org.apache.spark.sql.DataFrame = [host: string, procs: string ... 4 more fields]\ntest: org.apache.spark.sql.DataFrame = [host: string, procs: string ... 4 more fields]\n"}]},"apps":[],"jobName":"paragraph_1511858904877_-1450435611","id":"20171128-094824_1130213439","dateCreated":"2017-11-28T09:48:24+0100","dateStarted":"2018-01-16T12:57:12+0100","dateFinished":"2018-01-16T12:58:20+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64"},{"text":"%kryo-spark\nimport org.deeplearning4j._\nimport org.deeplearning4j.spark._\nimport org.deeplearning4j.spark.impl.paramavg.ParameterAveragingTrainingMaster\nimport org.deeplearning4j.spark.api.TrainingMaster\nimport org.deeplearning4j.spark.util._\nimport org.deeplearning4j.spark.impl.multilayer._\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration\nimport org.deeplearning4j.nn.api._\nimport org.deeplearning4j.nn.weights.WeightInit\nimport org.deeplearning4j.nn.conf.layers.GravesLSTM\nimport org.deeplearning4j.eval._\nimport org.deeplearning4j.nn.conf._\nimport org.deeplearning4j.nn.conf.layers.RnnOutputLayer\n\nimport org.nd4j.linalg.lossfunctions.LossFunctions.LossFunction\nimport org.nd4j.linalg.api.ndarray.INDArray\nimport org.nd4j.linalg.dataset.DataSet\nimport org.nd4j.linalg.indexing.NDArrayIndex\nimport org.nd4j.linalg.activations.Activation\nimport org.nd4j.linalg.factory.Nd4j\n\nimport org.apache.spark.sql.Encoders\nimport org.apache.spark.ml.linalg.Vector\nimport org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.ml.feature._\nimport org.apache.spark.sql.Dataset\nimport org.apache.spark.sql.Row\nimport org.apache.spark.mllib.regression.LabeledPoint\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.mllib.util.MLUtils\n\nimport java.sql.Timestamp\nimport collection.JavaConverters._\nimport scala.util.Random\nimport scala.collection.mutable.ListBuffer\nimport scala.reflect._","user":"anonymous","dateUpdated":"2018-01-16T12:57:12+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","tableHide":true,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.deeplearning4j._\nimport org.deeplearning4j.spark._\nimport org.deeplearning4j.spark.impl.paramavg.ParameterAveragingTrainingMaster\nimport org.deeplearning4j.spark.api.TrainingMaster\nimport org.deeplearning4j.spark.util._\nimport org.deeplearning4j.spark.impl.multilayer._\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration\nimport org.deeplearning4j.nn.api._\nimport org.deeplearning4j.nn.weights.WeightInit\nimport org.deeplearning4j.nn.conf.layers.GravesLSTM\nimport org.deeplearning4j.eval._\nimport org.deeplearning4j.nn.conf._\nimport org.deeplearning4j.nn.conf.layers.RnnOutputLayer\nimport org.nd4j.linalg.lossfunctions.LossFunctions.LossFunction\nimport org.nd4j.linalg.api.ndarray.INDArray\nimport org.nd4j.linalg.dataset.DataSet\nimport org.nd4j.linalg.indexing.NDArrayIndex\nimport org.nd4j.linalg.activations.Activation\nimport org.nd4j.linalg.factory.Nd4j\nimport org.apache.spark.sql.Encoders\nimport org.apache.spark.ml.linalg.Vector\nimport org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.ml.feature._\nimport org.apache.spark.sql.Dataset\nimport org.apache.spark.sql.Row\nimport org.apache.spark.mllib.regression.LabeledPoint\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.mllib.util.MLUtils\nimport java.sql.Timestamp\nimport collection.JavaConverters._\nimport scala.util.Random\nimport scala.collection.mutable.ListBuffer\nimport scala.reflect._\n"}]},"apps":[],"jobName":"paragraph_1503399845547_1716923280","id":"20170822-130405_1296402771","dateCreated":"2017-08-22T13:04:05+0200","dateStarted":"2018-01-16T12:57:25+0100","dateFinished":"2018-01-16T12:58:27+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:65"},{"text":"%md\n\n# Nd4j Sequence Dataset creation","user":"anonymous","dateUpdated":"2018-01-16T12:57:12+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Error while parsing action 'Root/Sequence/ZeroOrMore/Sequence/Block/FirstOf/Heading/FirstOf/AtxHeading/AtxStart/AtxStart_Action1' at input position (line 1, pos 2):\n# Nd4j Sequence Dataset creation\n ^\n\norg.parboiled.errors.GrammarException: Illegal call to getMatch(), getMatchStartIndex(), getMatchEndIndex() or getMatchRange(), only valid in Sequence rule actions that are not in first position"}]},"apps":[],"jobName":"paragraph_1508831354143_527409339","id":"20171024-094914_1410160807","dateCreated":"2017-10-24T09:49:14+0200","dateStarted":"2018-01-16T12:57:12+0100","dateFinished":"2018-01-16T12:57:14+0100","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:66"},{"text":"%kryo-spark\n// Class to work with sequences\ncase class Sequence(host: String, process: String, start: java.sql.Timestamp, end:java.sql.Timestamp, series: org.nd4j.linalg.dataset.DataSet)\n\n// Checks if two feature vectors are adjacent\ndef adjacent(first: Row, second: Row): Boolean = {\n    new Timestamp(first.getAs[Timestamp](\"ts\").getTime + 60000L) == second.getAs[Timestamp](\"ts\")\n}\n\n// Creates a Nd4j DataSet structure for a sequence of feature vectors\ndef toNd4j(sequence: List[Row]): DataSet = {\n    if (sequence.size < 1) {\n        throw new IllegalStateException(\"Can't create sequence with size < 1\")\n    }\n    \n    val fVMatrix = Nd4j.zeros(1, 231, sequence.size)\n    val labelMatrix = Nd4j.zeros(1, 2, sequence.size)\n    \n    for ((x, i) <- sequence.zipWithIndex) {\n        val vectorAsArr = Nd4j.create(x.getAs[Vector](\"scaledFeatures\").toArray)\n        \n        fVMatrix.put(Array(NDArrayIndex.point(0), NDArrayIndex.all(), NDArrayIndex.point(i)), vectorAsArr)\n        // Put a '1' to the index of the label (one-hot encoding)\n        labelMatrix.putScalar(0, x.getAs[Double](\"manualLabel\").toInt, i, 1.0)\n    }\n    \n    if (fVMatrix.shape.size != labelMatrix.shape.size || fVMatrix.shape()(0) != labelMatrix.shape()(0) || fVMatrix.shape()(2) != labelMatrix.shape()(2)) {\n        throw new IllegalArgumentException(\"size wrong!\")\n    }\n    \n    new DataSet(fVMatrix, labelMatrix)\n}\n\n// Creates sequence RDD from feature vector dataset\ndef toSequences(d: Dataset[_]): RDD[Sequence] = {\n    d.toDF.rdd //host, procs, ts, scaledFeatures, manualLabel\n        .keyBy(r => (r.getAs[String](\"host\"), r.getAs[String](\"procs\")))\n        .groupByKey\n        .flatMap(kVs => {\n            // Feature vectors for a system sorted by their timestamps\n            val sortedFVs = kVs._2.toList.sortBy(_.getAs[Timestamp](\"ts\").toString)\n           \n           // Store all sequences\n            val sequences: ListBuffer[Sequence] = ListBuffer()\n           \n            // Buffer to put in points of one sequence\n            var continuusSeq: ListBuffer[Row] = ListBuffer()\n            continuusSeq.append(sortedFVs(0))\n            var lastStart: Timestamp = sortedFVs(0).getAs[Timestamp](\"ts\")\n            \n            for (i <- 1 until sortedFVs.size) {\n                if (adjacent(continuusSeq.last, sortedFVs(i))) {\n                    continuusSeq.append(sortedFVs(i))\n                } else {\n                    // Create sequence and add to results\n                    val ds = toNd4j(continuusSeq.toList)\n                    sequences.append(Sequence(kVs._1._1, kVs._1._2, lastStart, new Timestamp(lastStart.getTime + 60000L * ds.getLabels.size(2)), ds))\n                    continuusSeq.clear\n                    continuusSeq.append(sortedFVs(i))\n                    lastStart = sortedFVs(i).getAs[Timestamp](\"ts\")\n                }\n            }\n            \n            //Add last sequence still in buffer\n            val ds = toNd4j(continuusSeq.toList)\n            sequences.append(Sequence(kVs._1._1, kVs._1._2, lastStart, new Timestamp(lastStart.getTime + 60000L * ds.getLabels.size(2)), ds))\n            \n            sequences.toList\n        })\n}\n\ncase class Fold(train: Array[Sequence], validate: org.apache.spark.rdd.RDD[Sequence], validateUnbalanced: org.apache.spark.rdd.RDD[Sequence])\n\ndef overlap(s: Sequence, t: Tuple4[String, String, java.sql.Timestamp, java.sql.Timestamp]): Boolean = {\n    (s.host == t._1\n        && s.process == t._2\n        && ((s.start.before(t._3) && s.end.after(t._3)) \n            || (t._3.before(s.start) && t._4.after(s.start))))\n}\n\ndef kFold(train: RDD[Sequence], validate: RDD[Sequence], k: Int): Array[Fold] = {\n    val localTrain = train.collect.sortBy(_.start.toString)\n    val trainSequences = localTrain.map(s => (s.host, s.process, s.start, s.end))\n    \n    val validateUnbalanced = validate.filter(seq => trainSequences.find(overlap(seq, _)).isEmpty).randomSplit(Array.fill(k)(1.0 / k), 1234L)\n    \n    localTrain.grouped((localTrain.size - 1) / k + 1).toArray.zipWithIndex.map({ case (fold, i) => {\n        val foldSequences = fold.map(f => (f.host, f.process, f.start, f.end))\n        \n        Fold(fold, validate.filter(v => !foldSequences.find(overlap(v, _)).isEmpty), validateUnbalanced(i))\n    }})\n}","user":"anonymous","dateUpdated":"2018-01-16T12:57:12+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class Sequence\nadjacent: (first: org.apache.spark.sql.Row, second: org.apache.spark.sql.Row)Boolean\ntoNd4j: (sequence: List[org.apache.spark.sql.Row])org.nd4j.linalg.dataset.DataSet\ntoSequences: (d: org.apache.spark.sql.Dataset[_])org.apache.spark.rdd.RDD[Sequence]\ndefined class Fold\noverlap: (s: Sequence, t: (String, String, java.sql.Timestamp, java.sql.Timestamp))Boolean\nkFold: (train: org.apache.spark.rdd.RDD[Sequence], validate: org.apache.spark.rdd.RDD[Sequence], k: Int)Array[Fold]\n"}]},"apps":[],"jobName":"paragraph_1511775873391_1351737608","id":"20171127-104433_496003542","dateCreated":"2017-11-27T10:44:33+0100","dateStarted":"2018-01-16T12:58:21+0100","dateFinished":"2018-01-16T12:58:31+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:67"},{"text":"%md\n\n# Evaluating and Predicting","user":"anonymous","dateUpdated":"2018-01-16T12:57:12+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Error while parsing action 'Root/NodeSequence_Action2' at input position (line 2, pos 1):\n\n^\n\njava.lang.IllegalArgumentException: Cannot pop from beyond the bottom of the stack"}]},"apps":[],"jobName":"paragraph_1508831371813_1675161280","id":"20171024-094931_1247822845","dateCreated":"2017-10-24T09:49:31+0200","dateStarted":"2018-01-16T12:57:13+0100","dateFinished":"2018-01-16T12:57:14+0100","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:68"},{"text":"%kryo-spark\ndef evalNetwork[T <: IEvaluation[T]: ClassTag](net: MultiLayerNetwork, sequences: Array[Sequence], evalFn: () => IEvaluation[T]): T = {\n    val eval = evalFn()\n    \n    sequences.foreach(seq => {\n        //println(\"Prediciton for \" + seq.series.getLabels.size(2))\n        val start = System.currentTimeMillis()\n        \n        net.rnnClearPreviousState\n        val prediction = net.rnnTimeStep(seq.series.getFeatures)\n        \n        val pred = System.currentTimeMillis()\n        \n        eval.evalTimeSeries(seq.series.getLabels, prediction)\n        \n        val end = System.currentTimeMillis()\n        //println (\"    took \" + (pred - start) + \", eval took \" + (end - pred))\n    })\n    \n    println(\"Prediction finished\")\n    eval.asInstanceOf[T]\n}\n\ndef evalNetworkRDD[T <: IEvaluation[T]: ClassTag](net: MultiLayerNetwork, sequenceRDD: RDD[Sequence], evalFn: () => IEvaluation[T]): T = {\n    net.rnnClearPreviousState\n    \n    val result = sequenceRDD.map(s => evalNetwork(net, Array(s), evalFn))\n        .reduce((a, b) => {\n            a.asInstanceOf[T].merge(b.asInstanceOf[T])\n            a.asInstanceOf[ROC].setPrCurve(null)\n            a.asInstanceOf[ROC].setAuprc(null)\n            a\n        })\n    \n    result\n}","user":"anonymous","dateUpdated":"2018-01-16T12:57:13+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"evalNetwork: [T <: org.deeplearning4j.eval.IEvaluation[T]](net: org.deeplearning4j.nn.multilayer.MultiLayerNetwork, sequences: Array[Sequence], evalFn: () => org.deeplearning4j.eval.IEvaluation[T])(implicit evidence$1: scala.reflect.ClassTag[T])T\nevalNetworkRDD: [T <: org.deeplearning4j.eval.IEvaluation[T]](net: org.deeplearning4j.nn.multilayer.MultiLayerNetwork, sequenceRDD: org.apache.spark.rdd.RDD[Sequence], evalFn: () => org.deeplearning4j.eval.IEvaluation[T])(implicit evidence$1: scala.reflect.ClassTag[T])T\n"}]},"apps":[],"jobName":"paragraph_1511788666064_1232405421","id":"20171127-141746_234191226","dateCreated":"2017-11-27T14:17:46+0100","dateStarted":"2018-01-16T12:58:28+0100","dateFinished":"2018-01-16T12:58:32+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:69"},{"text":"%kryo-spark\ndef predictDataset(nw: MultiLayerNetwork, ds: RDD[Sequence]): RDD[Counter] = {\n    val sparkLocalNet = sc.broadcast(nw)\n    \n    val result = ds.keyBy(seq => (seq.host, seq.process)).groupByKey().flatMap(keyedSeqs => {\n        // Load network\n        val net = sparkLocalNet.value\n        \n        // Sort sequences for one system\n        val seqs = keyedSeqs._2.toList.sortBy(_.start.toString)\n        \n        println(\"predict: \" + keyedSeqs._1 + \", num sequences: \" + seqs.size)\n        \n        val (labels, predictions) = seqs.flatMap(s => {\n            net.rnnClearPreviousState\n            val output = net.rnnTimeStep(s.series.getFeatures)\n            if (!output.shape.sameElements(s.series.getLabels.shape)) {\n                throw new IllegalArgumentException(\"Labels and output do not match! Predicted size: \" + output.shape.mkString(\",\") + \", label size: \" + s.series.getLabels.shape.mkString(\",\"))\n            }\n            \n            val start = s.start.getTime\n            \n            (0 until s.series.getLabels.size(2)).map(i => {\n                val ts = new Timestamp(start + 60000L * i)\n                (new ValuePoint(s.series.getLabels.getDouble(0, 1, i), ts), new ValuePoint(output.getDouble(0, 1, i), ts))\n            })\n        }).unzip\n       \n        val manualLabelsCounter = new Counter(new Metric(\"manual label\", keyedSeqs._1._1, keyedSeqs._1._2))\n        manualLabelsCounter.getValuePoints.addAll(labels.asJava)\n        \n        val predictionsCounter = new Counter(new Metric(\"prediction\", keyedSeqs._1._1, keyedSeqs._1._2))\n        predictionsCounter.getValuePoints.addAll(predictions.asJava)\n        \n        Iterator(manualLabelsCounter, predictionsCounter)\n    })\n    \n    result\n}","user":"anonymous","dateUpdated":"2018-01-16T12:57:13+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"predictDataset: (nw: org.deeplearning4j.nn.multilayer.MultiLayerNetwork, ds: org.apache.spark.rdd.RDD[Sequence])org.apache.spark.rdd.RDD[de.qaware.mlwb.api.Counter]\n"}]},"apps":[],"jobName":"paragraph_1504270017186_555458566","id":"20170901-144657_474306477","dateCreated":"2017-09-01T14:46:57+0200","dateStarted":"2018-01-16T12:58:32+0100","dateFinished":"2018-01-16T12:58:33+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:70"},{"text":"%md\n\n# Model/Hyperparameter tuning","user":"anonymous","dateUpdated":"2018-01-16T12:57:13+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Model/Hyperparameter tuning</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1508831417772_-640829529","id":"20171024-095017_1674900331","dateCreated":"2017-10-24T09:50:17+0200","dateStarted":"2018-01-16T12:57:14+0100","dateFinished":"2018-01-16T12:57:14+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:71"},{"text":"%kryo-spark\n// Suppress toString for object stored in off-heap to avoid oom when trying to build String\ncase class SuppressToString[T <: AnyRef](obj: T) {\n  override def toString: String = \"supresses string output\"\n}\n\nval validateSeqs = toSequences(validate).cache\nval trainDS = SuppressToString(kFold(toSequences(train), validateSeqs, 4))\nval testRDD = toSequences(test).repartition(100).cache","user":"anonymous","dateUpdated":"2018-01-16T12:57:13+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class SuppressToString\nvalidateSeqs: org.apache.spark.rdd.RDD[Sequence] = MapPartitionsRDD[14] at flatMap at <console>:109\ntrainDS: SuppressToString[Array[Fold]] = supresses string output\ntestRDD: org.apache.spark.rdd.RDD[Sequence] = MapPartitionsRDD[39] at repartition at <console>:113\n"}]},"apps":[],"jobName":"paragraph_1503400656936_-1182392310","id":"20170822-131736_605516812","dateCreated":"2017-08-22T13:17:36+0200","dateStarted":"2018-01-16T12:58:32+0100","dateFinished":"2018-01-16T12:59:11+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:72"},{"text":"%kryo-spark\ntrainDS.obj.zipWithIndex.map({ case (fold, i) => {\n    println(\"Fold \" + (i + 1))\n    println(\"Train: \")\n    fold.train.foreach(s => println(s.host, s.process, s.start, s.end))\n    println(\"Validate: \")\n    fold.validate.map(s => (s.host, s.process, s.start, s.end)).collect.foreach(println(_))\n    fold.validateUnbalanced.map(s => (s.host, s.process, s.start, s.end)).collect.foreach(println(_))\n}})","user":"anonymous","dateUpdated":"2018-01-16T12:57:14+0100","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":328,"optionOpen":false}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Fold 1\nTrain: \n(lphost14,wls1,2014-11-30 00:00:00.0,2014-12-03 00:00:00.0)\n(lphost09,wls1,2014-12-01 00:00:00.0,2014-12-04 00:00:00.0)\n(lphost18,wls2,2014-12-02 00:00:00.0,2014-12-03 09:12:00.0)\n(lphost10,wls1,2014-12-03 00:00:00.0,2014-12-03 16:21:00.0)\n(lphost18,wls2,2014-12-03 09:27:00.0,2014-12-04 00:00:00.0)\n(lphost10,wls1,2014-12-03 16:36:00.0,2014-12-04 00:00:00.0)\n(lphost11,wls1,2014-12-11 00:00:00.0,2014-12-11 15:31:00.0)\n(lphost11,wls1,2014-12-11 15:35:00.0,2014-12-11 21:51:00.0)\n(lphost11,wls1,2014-12-11 21:53:00.0,2014-12-12 00:00:00.0)\n(lphost07,wls1,2014-12-15 00:00:00.0,2014-12-18 00:00:00.0)\n(lphost06,wls1,2014-12-15 00:00:00.0,2014-12-17 16:24:00.0)\n(lphost11,wls1,2014-12-17 00:00:00.0,2014-12-18 09:15:00.0)\n(lphost06,wls1,2014-12-17 16:26:00.0,2014-12-18 00:00:00.0)\n(lphost18,wls1,2014-12-18 00:00:00.0,2014-12-19 16:09:00.0)\n(lphost11,wls1,2014-12-18 10:16:00.0,2014-12-18 10:28:00.0)\n(lphost11,wls1,2014-12-18 10:30:00.0,2014-12-19 00:00:00.0)\n(lphost07,wls2,2014-12-19 00:00:00.0,2014-12-22 00:00:00.0)\n(lphost18,wls1,2014-12-19 16:21:00.0,2014-12-20 00:00:00.0)\n(lphost09,wls1,2015-01-07 00:00:00.0,2015-01-07 23:13:00.0)\n(lphost09,wls1,2015-01-07 23:18:00.0,2015-01-08 00:00:00.0)\n(lphost18,wls2,2015-01-13 00:00:00.0,2015-01-13 14:13:00.0)\n(lphost18,wls2,2015-01-13 14:19:00.0,2015-01-14 00:00:00.0)\n(lphost10,wls2,2015-01-15 00:00:00.0,2015-01-15 13:49:00.0)\nValidate: \n(lphost07,wls2,2014-12-11 21:48:00.0,2015-01-07 23:13:00.0)\n(lphost10,wls1,2014-11-29 00:00:00.0,2014-12-03 16:21:00.0)\n(lphost11,wls1,2014-12-05 15:33:00.0,2014-12-11 15:31:00.0)\n(lphost11,wls1,2014-12-11 21:53:00.0,2014-12-18 09:15:00.0)\n(lphost09,wls1,2014-11-29 00:00:00.0,2014-12-05 15:06:00.0)\n(lphost09,wls1,2014-12-11 21:53:00.0,2015-01-07 23:13:00.0)\n(lphost18,wls1,2014-12-11 22:01:00.0,2014-12-19 16:09:00.0)\n(lphost06,wls1,2014-12-11 21:41:00.0,2014-12-17 16:24:00.0)\n(lphost10,wls2,2015-01-07 23:18:00.0,2015-01-15 13:49:00.0)\n(lphost07,wls1,2014-12-11 21:47:00.0,2015-01-07 23:13:00.0)\n(lphost14,wls1,2014-11-29 00:00:00.0,2014-12-05 15:06:00.0)\n(lphost18,wls2,2014-11-29 00:00:00.0,2014-12-03 09:12:00.0)\n(lphost18,wls2,2015-01-07 23:18:00.0,2015-01-13 14:13:00.0)\n(lphost17,wls2,2015-02-16 12:38:00.0,2015-02-17 18:46:00.0)\n(lphost17,wls2,2015-03-11 07:58:00.0,2015-03-19 00:50:00.0)\n(lphost10,wls1,2015-01-23 18:02:00.0,2015-01-30 17:10:00.0)\n(lphost10,wls1,2015-03-13 03:28:00.0,2015-03-19 00:39:00.0)\n(lphost10,wls1,2015-04-21 10:36:00.0,2015-04-25 16:20:00.0)\n(lphost10,wls1,2015-04-25 19:23:00.0,2015-05-01 00:00:00.0)\n(lphost09,wls2,2015-01-07 23:20:00.0,2015-01-30 17:13:00.0)\n(lphost09,wls2,2015-03-08 13:35:00.0,2015-03-19 00:43:00.0)\n(lphost11,wls1,2014-12-18 10:30:00.0,2015-01-07 23:08:00.0)\n(lphost11,wls1,2015-01-29 17:41:00.0,2015-01-30 17:11:00.0)\n(lphost11,wls1,2015-01-30 19:59:00.0,2015-02-17 18:18:00.0)\n(lphost11,wls1,2015-03-18 10:36:00.0,2015-03-19 00:33:00.0)\n(lphost08,wls1,2015-01-07 23:17:00.0,2015-01-30 17:08:00.0)\n(lphost08,wls1,2015-03-08 13:33:00.0,2015-03-19 00:29:00.0)\n(lphost08,wls1,2015-04-20 14:42:00.0,2015-04-25 16:20:00.0)\n(lphost09,wls1,2014-12-05 15:27:00.0,2014-12-11 21:49:00.0)\n(lphost09,wls1,2015-03-08 13:32:00.0,2015-03-19 00:40:00.0)\n(lphost09,wls1,2015-04-25 19:13:00.0,2015-05-01 00:00:00.0)\n(lphost18,wls1,2014-11-29 00:00:00.0,2014-12-05 15:06:00.0)\n(lphost18,wls1,2015-02-16 11:08:00.0,2015-02-17 18:52:00.0)\n(lphost06,wls1,2014-11-29 00:00:00.0,2014-12-01 13:09:00.0)\n(lphost06,wls1,2015-03-03 20:03:00.0,2015-03-08 09:59:00.0)\n(lphost06,wls1,2015-03-19 00:26:00.0,2015-04-09 11:53:00.0)\n(lphost06,wls1,2015-04-25 19:19:00.0,2015-05-01 00:00:00.0)\n(lphost10,wls2,2014-12-11 21:54:00.0,2015-01-07 23:13:00.0)\n(lphost10,wls2,2015-01-15 15:35:00.0,2015-01-30 17:10:00.0)\n(lphost07,wls1,2015-01-30 19:57:00.0,2015-02-17 18:38:00.0)\n(lphost07,wls1,2015-04-25 19:23:00.0,2015-05-01 00:00:00.0)\n(lphost08,wls2,2014-11-29 00:00:00.0,2014-12-05 15:06:00.0)\n(lphost08,wls2,2014-12-11 21:49:00.0,2015-01-07 23:13:00.0)\n(lphost08,wls2,2015-01-30 20:00:00.0,2015-02-17 18:53:00.0)\n(lphost08,wls2,2015-02-17 18:56:00.0,2015-03-08 10:00:00.0)\n(lphost08,wls2,2015-03-08 13:34:00.0,2015-03-19 00:30:00.0)\n(lphost08,wls2,2015-03-19 00:34:00.0,2015-04-25 16:19:00.0)\n(lphost08,wls2,2015-04-25 19:26:00.0,2015-05-01 00:00:00.0)\n(lphost14,wls1,2014-12-05 15:33:00.0,2014-12-11 21:52:00.0)\n(lphost17,wls1,2015-01-07 23:19:00.0,2015-01-30 17:13:00.0)\n(lphost06,wls2,2014-12-05 15:35:00.0,2014-12-11 21:40:00.0)\n(lphost06,wls2,2015-02-17 08:27:00.0,2015-02-17 18:28:00.0)\n(lphost06,wls2,2015-03-08 13:34:00.0,2015-03-19 00:24:00.0)\n(lphost18,wls2,2014-12-03 09:27:00.0,2014-12-05 15:07:00.0)\n(lphost11,wls2,2014-12-05 15:34:00.0,2014-12-11 21:51:00.0)\n(lphost11,wls2,2015-01-30 20:00:00.0,2015-02-17 18:19:00.0)\n(lphost11,wls2,2015-03-08 13:34:00.0,2015-03-19 00:35:00.0)\nFold 2\nTrain: \n(lphost10,wls1,2015-01-15 00:00:00.0,2015-01-15 13:47:00.0)\n(lphost10,wls1,2015-01-15 13:49:00.0,2015-01-15 15:31:00.0)\n(lphost10,wls2,2015-01-15 13:51:00.0,2015-01-15 15:33:00.0)\n(lphost10,wls2,2015-01-15 15:35:00.0,2015-01-16 00:00:00.0)\n(lphost10,wls1,2015-01-15 15:35:00.0,2015-01-16 00:00:00.0)\n(lphost07,wls1,2015-01-16 00:00:00.0,2015-01-19 00:00:00.0)\n(lphost09,wls1,2015-01-19 00:00:00.0,2015-01-19 17:37:00.0)\n(lphost09,wls1,2015-01-19 17:42:00.0,2015-01-20 00:00:00.0)\n(lphost10,wls1,2015-01-22 00:00:00.0,2015-01-23 17:36:00.0)\n(lphost15,wls2,2015-01-23 00:00:00.0,2015-01-23 14:01:00.0)\n(lphost15,wls2,2015-01-23 14:11:00.0,2015-01-24 00:00:00.0)\n(lphost10,wls1,2015-01-23 18:02:00.0,2015-01-24 00:00:00.0)\n(lphost06,wls2,2015-01-26 00:00:00.0,2015-01-29 00:00:00.0)\n(lphost11,wls1,2015-01-27 00:00:00.0,2015-01-29 17:39:00.0)\n(lphost11,wls1,2015-01-29 17:41:00.0,2015-01-30 00:00:00.0)\n(lphost10,wls2,2015-02-05 00:00:00.0,2015-02-17 18:04:00.0)\n(lphost09,wls1,2015-02-09 00:00:00.0,2015-02-09 17:21:00.0)\n(lphost09,wls1,2015-02-09 17:34:00.0,2015-02-10 00:00:00.0)\n(lphost15,wls1,2015-02-12 00:00:00.0,2015-02-13 12:32:00.0)\n(lphost15,wls2,2015-02-12 00:00:00.0,2015-02-13 12:50:00.0)\n(lphost15,wls1,2015-02-13 12:54:00.0,2015-02-14 00:00:00.0)\n(lphost15,wls2,2015-02-13 12:56:00.0,2015-02-14 00:00:00.0)\n(lphost17,wls1,2015-02-16 00:00:00.0,2015-02-16 12:26:00.0)\nValidate: \n(lphost10,wls1,2015-01-07 23:17:00.0,2015-01-15 13:47:00.0)\n(lphost10,wls1,2015-01-15 15:35:00.0,2015-01-23 17:36:00.0)\n(lphost11,wls1,2015-01-07 23:10:00.0,2015-01-29 17:39:00.0)\n(lphost09,wls1,2015-01-07 23:18:00.0,2015-01-19 17:37:00.0)\n(lphost09,wls1,2015-01-30 19:50:00.0,2015-02-09 17:21:00.0)\n(lphost15,wls1,2015-01-30 20:00:00.0,2015-02-13 12:32:00.0)\n(lphost10,wls2,2015-01-30 20:00:00.0,2015-02-17 18:04:00.0)\n(lphost15,wls2,2015-01-07 23:18:00.0,2015-01-23 14:01:00.0)\n(lphost15,wls2,2015-01-30 20:01:00.0,2015-02-13 12:50:00.0)\n(lphost07,wls1,2015-01-07 23:17:00.0,2015-01-30 17:07:00.0)\n(lphost17,wls1,2015-01-30 19:59:00.0,2015-02-16 12:26:00.0)\n(lphost06,wls2,2015-01-07 23:19:00.0,2015-01-30 17:05:00.0)\n(lphost07,wls2,2014-12-05 15:34:00.0,2014-12-11 21:44:00.0)\n(lphost07,wls2,2015-01-30 19:58:00.0,2015-02-17 18:38:00.0)\n(lphost07,wls2,2015-03-08 13:34:00.0,2015-03-19 00:30:00.0)\n(lphost07,wls2,2015-03-19 00:34:00.0,2015-04-25 16:19:00.0)\n(lphost07,wls2,2015-04-25 19:27:00.0,2015-05-01 00:00:00.0)\n(lphost17,wls2,2015-01-07 23:21:00.0,2015-01-30 17:17:00.0)\n(lphost17,wls2,2015-03-08 13:35:00.0,2015-03-11 07:54:00.0)\n(lphost10,wls1,2014-12-18 12:59:00.0,2015-01-07 23:12:00.0)\n(lphost10,wls1,2015-01-15 13:49:00.0,2015-01-15 15:31:00.0)\n(lphost10,wls1,2015-02-17 18:08:00.0,2015-03-08 10:00:00.0)\n(lphost09,wls2,2015-01-30 19:52:00.0,2015-02-17 18:58:00.0)\n(lphost11,wls1,2014-11-29 00:00:00.0,2014-12-05 15:06:00.0)\n(lphost11,wls1,2014-12-11 15:35:00.0,2014-12-11 21:51:00.0)\n(lphost11,wls1,2015-02-17 18:25:00.0,2015-03-08 10:00:00.0)\n(lphost08,wls1,2014-12-05 15:32:00.0,2014-12-11 21:45:00.0)\n(lphost08,wls1,2015-04-25 19:24:00.0,2015-05-01 00:00:00.0)\n(lphost09,wls1,2015-03-06 00:32:00.0,2015-03-08 10:00:00.0)\n(lphost09,wls1,2015-03-19 00:42:00.0,2015-04-25 16:20:00.0)\n(lphost18,wls1,2014-12-19 16:21:00.0,2015-01-07 23:12:00.0)\n(lphost18,wls1,2015-02-17 18:55:00.0,2015-03-08 10:00:00.0)\n(lphost06,wls1,2014-12-17 16:26:00.0,2015-01-07 23:13:00.0)\n(lphost06,wls1,2015-01-07 23:18:00.0,2015-01-30 17:09:00.0)\n(lphost06,wls1,2015-01-30 19:55:00.0,2015-02-17 08:29:00.0)\n(lphost06,wls1,2015-02-17 08:31:00.0,2015-02-17 18:28:00.0)\n(lphost06,wls1,2015-02-17 18:31:00.0,2015-03-03 20:01:00.0)\n(lphost06,wls1,2015-04-09 11:57:00.0,2015-04-22 16:43:00.0)\n(lphost06,wls1,2015-04-22 16:48:00.0,2015-04-25 16:18:00.0)\n(lphost15,wls1,2014-12-11 21:58:00.0,2015-01-07 23:12:00.0)\n(lphost15,wls1,2015-03-08 13:33:00.0,2015-03-19 00:52:00.0)\n(lphost10,wls2,2015-01-15 13:51:00.0,2015-01-15 15:33:00.0)\n(lphost10,wls2,2015-03-08 13:34:00.0,2015-03-19 00:42:00.0)\n(lphost10,wls2,2015-04-25 19:27:00.0,2015-05-01 00:00:00.0)\n(lphost15,wls2,2014-12-11 22:00:00.0,2015-01-07 23:13:00.0)\n(lphost15,wls2,2015-02-17 19:09:00.0,2015-03-08 10:02:00.0)\n(lphost14,wls1,2015-01-07 23:16:00.0,2015-01-30 17:11:00.0)\n(lphost17,wls1,2014-11-29 00:00:00.0,2014-12-05 15:06:00.0)\n(lphost17,wls1,2014-12-05 15:33:00.0,2014-12-11 21:57:00.0)\n(lphost17,wls1,2014-12-11 22:01:00.0,2015-01-07 23:12:00.0)\n(lphost06,wls2,2014-11-29 00:00:00.0,2014-12-05 15:06:00.0)\n(lphost06,wls2,2015-02-17 18:32:00.0,2015-03-08 10:00:00.0)\n(lphost14,wls2,2015-01-07 23:17:00.0,2015-01-30 17:12:00.0)\n(lphost14,wls2,2015-03-08 13:35:00.0,2015-03-08 16:04:00.0)\n(lphost18,wls2,2014-12-05 15:35:00.0,2014-12-11 21:58:00.0)\n(lphost18,wls2,2014-12-11 22:02:00.0,2015-01-07 23:13:00.0)\n(lphost18,wls2,2015-01-13 14:19:00.0,2015-01-30 17:14:00.0)\n(lphost18,wls2,2015-03-08 13:35:00.0,2015-03-08 16:05:00.0)\n(lphost11,wls2,2014-12-18 09:33:00.0,2015-01-07 23:08:00.0)\n(lphost11,wls2,2015-02-17 18:26:00.0,2015-03-08 10:01:00.0)\n(lphost11,wls2,2015-03-19 00:36:00.0,2015-04-25 16:21:00.0)\n(lphost11,wls2,2015-04-25 19:27:00.0,2015-05-01 00:00:00.0)\nFold 3\nTrain: \n(lphost17,wls2,2015-02-16 00:00:00.0,2015-02-16 12:34:00.0)\n(lphost18,wls2,2015-02-16 00:00:00.0,2015-02-16 11:10:00.0)\n(lphost18,wls1,2015-02-16 00:00:00.0,2015-02-16 11:02:00.0)\n(lphost10,wls1,2015-02-16 00:00:00.0,2015-02-17 18:03:00.0)\n(lphost18,wls1,2015-02-16 11:08:00.0,2015-02-17 00:00:00.0)\n(lphost18,wls2,2015-02-16 11:13:00.0,2015-02-17 00:00:00.0)\n(lphost17,wls1,2015-02-16 12:32:00.0,2015-02-17 00:00:00.0)\n(lphost17,wls2,2015-02-16 12:38:00.0,2015-02-17 00:00:00.0)\n(lphost10,wls1,2015-02-17 18:08:00.0,2015-02-18 00:00:00.0)\n(lphost10,wls2,2015-02-17 18:11:00.0,2015-02-18 00:00:00.0)\n(lphost10,wls2,2015-02-19 00:00:00.0,2015-02-20 00:00:00.0)\n(lphost18,wls2,2015-02-26 00:00:00.0,2015-03-08 10:01:00.0)\n(lphost14,wls1,2015-02-26 00:00:00.0,2015-02-26 16:23:00.0)\n(lphost14,wls1,2015-02-26 16:26:00.0,2015-02-27 00:00:00.0)\n(lphost17,wls1,2015-02-27 00:00:00.0,2015-02-27 14:05:00.0)\n(lphost17,wls1,2015-02-27 14:16:00.0,2015-02-28 00:00:00.0)\n(lphost07,wls2,2015-02-28 00:00:00.0,2015-03-03 00:00:00.0)\n(lphost17,wls1,2015-03-02 00:00:00.0,2015-03-02 08:54:00.0)\n(lphost17,wls1,2015-03-02 08:59:00.0,2015-03-03 00:00:00.0)\n(lphost09,wls1,2015-03-04 00:00:00.0,2015-03-06 00:25:00.0)\n(lphost14,wls2,2015-03-04 00:00:00.0,2015-03-05 00:00:00.0)\n(lphost15,wls1,2015-03-05 00:00:00.0,2015-03-08 10:01:00.0)\n(lphost09,wls1,2015-03-06 00:32:00.0,2015-03-07 00:00:00.0)\nValidate: \n(lphost07,wls2,2015-02-17 18:42:00.0,2015-03-08 10:00:00.0)\n(lphost17,wls2,2015-01-30 20:01:00.0,2015-02-16 12:34:00.0)\n(lphost10,wls1,2015-01-30 19:58:00.0,2015-02-17 18:03:00.0)\n(lphost09,wls1,2015-02-17 19:02:00.0,2015-03-06 00:25:00.0)\n(lphost18,wls1,2015-01-30 20:00:00.0,2015-02-16 11:02:00.0)\n(lphost15,wls1,2015-02-17 19:08:00.0,2015-03-08 10:01:00.0)\n(lphost10,wls2,2015-02-17 18:11:00.0,2015-03-08 10:00:00.0)\n(lphost14,wls1,2015-02-17 19:03:00.0,2015-02-26 16:23:00.0)\n(lphost17,wls1,2015-02-17 18:48:00.0,2015-02-27 14:05:00.0)\n(lphost17,wls1,2015-02-27 14:16:00.0,2015-03-02 08:54:00.0)\n(lphost14,wls2,2015-02-17 19:05:00.0,2015-03-08 10:02:00.0)\n(lphost18,wls2,2015-01-30 20:02:00.0,2015-02-16 11:10:00.0)\n(lphost18,wls2,2015-02-17 18:56:00.0,2015-03-08 10:01:00.0)\n(lphost07,wls2,2014-11-29 00:00:00.0,2014-12-05 15:06:00.0)\n(lphost17,wls2,2014-11-29 00:00:00.0,2014-12-05 15:07:00.0)\n(lphost17,wls2,2014-12-05 15:34:00.0,2014-12-11 21:58:00.0)\n(lphost17,wls2,2015-02-17 18:49:00.0,2015-03-02 09:16:00.0)\n(lphost17,wls2,2015-03-25 10:43:00.0,2015-03-25 13:08:00.0)\n(lphost17,wls2,2015-03-25 14:33:00.0,2015-04-25 16:22:00.0)\n(lphost10,wls1,2014-12-11 21:53:00.0,2014-12-18 12:55:00.0)\n(lphost09,wls2,2014-11-29 00:00:00.0,2014-12-05 15:06:00.0)\n(lphost09,wls2,2014-12-05 15:30:00.0,2014-12-11 21:49:00.0)\n(lphost09,wls2,2015-02-17 19:04:00.0,2015-03-08 10:00:00.0)\n(lphost11,wls1,2014-12-18 10:16:00.0,2014-12-18 10:28:00.0)\n(lphost08,wls1,2015-01-30 19:58:00.0,2015-02-17 18:52:00.0)\n(lphost09,wls1,2015-01-19 17:42:00.0,2015-01-30 17:09:00.0)\n(lphost09,wls1,2015-02-09 17:34:00.0,2015-02-17 18:58:00.0)\n(lphost18,wls1,2014-12-05 15:33:00.0,2014-12-11 21:58:00.0)\n(lphost18,wls1,2015-01-07 23:14:00.0,2015-01-30 17:13:00.0)\n(lphost06,wls1,2014-12-05 15:32:00.0,2014-12-11 21:39:00.0)\n(lphost06,wls1,2015-03-08 13:32:00.0,2015-03-19 00:24:00.0)\n(lphost15,wls1,2014-11-29 00:00:00.0,2014-12-05 15:06:00.0)\n(lphost15,wls1,2015-01-07 23:14:00.0,2015-01-30 17:12:00.0)\n(lphost15,wls1,2015-04-25 19:25:00.0,2015-05-01 00:00:00.0)\n(lphost15,wls2,2014-11-29 00:00:00.0,2014-12-05 15:06:00.0)\n(lphost15,wls2,2015-01-23 14:11:00.0,2015-01-30 17:13:00.0)\n(lphost15,wls2,2015-02-13 12:56:00.0,2015-02-17 19:06:00.0)\n(lphost15,wls2,2015-03-19 00:56:00.0,2015-04-25 16:21:00.0)\n(lphost15,wls2,2015-04-25 19:27:00.0,2015-05-01 00:00:00.0)\n(lphost07,wls1,2014-12-01 13:44:00.0,2014-12-05 15:06:00.0)\n(lphost07,wls1,2014-12-05 15:32:00.0,2014-12-11 21:44:00.0)\n(lphost07,wls1,2015-02-17 18:41:00.0,2015-03-08 10:00:00.0)\n(lphost07,wls1,2015-03-08 13:33:00.0,2015-03-19 00:29:00.0)\n(lphost08,wls2,2014-12-05 15:35:00.0,2014-12-11 21:45:00.0)\n(lphost08,wls2,2015-01-07 23:18:00.0,2015-01-30 17:09:00.0)\n(lphost14,wls1,2014-12-11 21:54:00.0,2015-01-07 23:11:00.0)\n(lphost14,wls1,2015-03-08 13:33:00.0,2015-03-08 16:04:00.0)\n(lphost17,wls1,2015-02-16 12:32:00.0,2015-02-17 18:46:00.0)\n(lphost06,wls2,2014-12-11 21:43:00.0,2014-12-17 15:58:00.0)\n(lphost06,wls2,2015-04-22 17:07:00.0,2015-04-25 16:19:00.0)\n(lphost06,wls2,2015-04-28 17:25:00.0,2015-05-01 00:00:00.0)\n(lphost14,wls2,2014-12-05 15:35:00.0,2014-12-11 21:52:00.0)\n(lphost14,wls2,2015-01-30 20:01:00.0,2015-02-17 19:00:00.0)\n(lphost18,wls2,2015-02-16 11:13:00.0,2015-02-17 18:52:00.0)\n(lphost11,wls2,2015-01-07 23:11:00.0,2015-01-30 17:11:00.0)\nFold 4\nTrain: \n(lphost15,wls1,2015-03-08 13:33:00.0,2015-03-09 00:00:00.0)\n(lphost18,wls2,2015-03-08 13:35:00.0,2015-03-08 16:05:00.0)\n(lphost17,wls1,2015-03-11 00:00:00.0,2015-03-11 07:36:00.0)\n(lphost17,wls1,2015-03-11 07:56:00.0,2015-03-12 00:00:00.0)\n(lphost11,wls1,2015-03-17 00:00:00.0,2015-03-18 10:31:00.0)\n(lphost11,wls1,2015-03-18 10:36:00.0,2015-03-19 00:00:00.0)\n(lphost17,wls2,2015-03-25 00:00:00.0,2015-03-25 10:34:00.0)\n(lphost17,wls2,2015-03-25 10:43:00.0,2015-03-25 13:08:00.0)\n(lphost17,wls2,2015-03-25 13:13:00.0,2015-03-25 14:17:00.0)\n(lphost17,wls2,2015-03-25 14:33:00.0,2015-03-26 00:00:00.0)\n(lphost17,wls1,2015-03-27 00:00:00.0,2015-03-27 09:16:00.0)\n(lphost11,wls1,2015-03-27 00:00:00.0,2015-03-27 11:41:00.0)\n(lphost17,wls1,2015-03-27 09:26:00.0,2015-03-28 00:00:00.0)\n(lphost11,wls1,2015-03-27 11:45:00.0,2015-03-28 00:00:00.0)\n(lphost08,wls1,2015-03-30 00:00:00.0,2015-03-30 15:52:00.0)\n(lphost08,wls1,2015-03-30 15:59:00.0,2015-03-31 00:00:00.0)\n(lphost11,wls1,2015-03-31 00:00:00.0,2015-04-03 00:00:00.0)\n(lphost07,wls1,2015-04-14 00:00:00.0,2015-04-17 00:00:00.0)\n(lphost08,wls1,2015-04-20 00:00:00.0,2015-04-20 14:41:00.0)\n(lphost08,wls1,2015-04-20 14:42:00.0,2015-04-21 00:00:00.0)\n(lphost10,wls1,2015-04-21 00:00:00.0,2015-04-21 10:30:00.0)\n(lphost10,wls1,2015-04-21 10:36:00.0,2015-04-22 00:00:00.0)\nValidate: \n(lphost17,wls2,2015-03-19 00:52:00.0,2015-03-25 10:34:00.0)\n(lphost10,wls1,2015-03-19 00:41:00.0,2015-04-21 10:30:00.0)\n(lphost11,wls1,2015-03-08 13:33:00.0,2015-03-18 10:31:00.0)\n(lphost11,wls1,2015-03-19 00:35:00.0,2015-03-27 11:41:00.0)\n(lphost11,wls1,2015-03-27 11:45:00.0,2015-04-25 16:20:00.0)\n(lphost08,wls1,2015-03-19 00:31:00.0,2015-03-30 15:52:00.0)\n(lphost08,wls1,2015-04-13 15:40:00.0,2015-04-20 14:41:00.0)\n(lphost07,wls1,2015-03-19 00:32:00.0,2015-04-25 16:18:00.0)\n(lphost17,wls1,2015-03-08 13:33:00.0,2015-03-11 07:36:00.0)\n(lphost17,wls1,2015-03-19 00:49:00.0,2015-03-27 09:16:00.0)\n(lphost07,wls2,2015-01-07 23:18:00.0,2015-01-30 17:07:00.0)\n(lphost17,wls2,2014-12-11 22:02:00.0,2015-01-07 23:16:00.0)\n(lphost17,wls2,2015-03-02 09:20:00.0,2015-03-08 10:01:00.0)\n(lphost17,wls2,2015-03-25 13:13:00.0,2015-03-25 14:17:00.0)\n(lphost17,wls2,2015-04-25 19:28:00.0,2015-05-01 00:00:00.0)\n(lphost10,wls1,2014-12-03 16:36:00.0,2014-12-05 15:05:00.0)\n(lphost10,wls1,2014-12-05 15:33:00.0,2014-12-11 21:50:00.0)\n(lphost10,wls1,2015-03-08 13:33:00.0,2015-03-13 03:03:00.0)\n(lphost09,wls2,2014-12-11 21:55:00.0,2015-01-07 23:14:00.0)\n(lphost09,wls2,2015-03-19 00:45:00.0,2015-04-25 16:24:00.0)\n(lphost09,wls2,2015-04-25 19:16:00.0,2015-05-01 00:00:00.0)\n(lphost11,wls1,2015-04-25 19:24:00.0,2015-05-01 00:00:00.0)\n(lphost08,wls1,2014-11-29 00:00:00.0,2014-12-05 15:05:00.0)\n(lphost08,wls1,2014-12-11 21:47:00.0,2015-01-07 23:13:00.0)\n(lphost08,wls1,2015-02-17 18:54:00.0,2015-03-08 10:00:00.0)\n(lphost08,wls1,2015-03-30 15:59:00.0,2015-04-13 15:38:00.0)\n(lphost18,wls1,2015-03-08 13:33:00.0,2015-03-08 16:05:00.0)\n(lphost06,wls1,2014-12-01 13:13:00.0,2014-12-05 15:05:00.0)\n(lphost15,wls1,2014-12-05 15:33:00.0,2014-12-11 21:56:00.0)\n(lphost15,wls1,2015-02-13 12:54:00.0,2015-02-17 19:05:00.0)\n(lphost15,wls1,2015-03-19 00:53:00.0,2015-04-25 16:21:00.0)\n(lphost10,wls2,2014-11-29 00:00:00.0,2014-12-05 15:10:00.0)\n(lphost10,wls2,2014-12-05 15:35:00.0,2014-12-11 21:50:00.0)\n(lphost10,wls2,2015-03-19 00:44:00.0,2015-04-25 16:23:00.0)\n(lphost15,wls2,2014-12-05 15:35:00.0,2014-12-11 21:56:00.0)\n(lphost15,wls2,2015-03-08 13:35:00.0,2015-03-19 00:54:00.0)\n(lphost07,wls1,2014-11-29 00:00:00.0,2014-12-01 13:42:00.0)\n(lphost14,wls1,2015-01-30 19:59:00.0,2015-02-17 18:59:00.0)\n(lphost14,wls1,2015-02-26 16:26:00.0,2015-03-08 10:00:00.0)\n(lphost17,wls1,2015-03-02 08:59:00.0,2015-03-08 10:01:00.0)\n(lphost17,wls1,2015-03-11 07:56:00.0,2015-03-19 00:48:00.0)\n(lphost17,wls1,2015-03-27 09:26:00.0,2015-04-25 16:21:00.0)\n(lphost17,wls1,2015-04-25 19:25:00.0,2015-05-01 00:00:00.0)\n(lphost06,wls2,2014-12-17 16:28:00.0,2015-01-07 23:13:00.0)\n(lphost06,wls2,2015-01-30 17:08:00.0,2015-02-17 08:25:00.0)\n(lphost06,wls2,2015-03-19 00:27:00.0,2015-04-22 16:53:00.0)\n(lphost06,wls2,2015-04-25 19:21:00.0,2015-04-28 17:23:00.0)\n(lphost14,wls2,2014-11-29 00:00:00.0,2014-12-05 15:08:00.0)\n(lphost14,wls2,2014-12-11 21:55:00.0,2015-01-07 23:13:00.0)\n(lphost11,wls2,2014-11-29 00:00:00.0,2014-12-05 15:07:00.0)\n(lphost11,wls2,2014-12-11 21:55:00.0,2014-12-18 09:31:00.0)\nres21: Array[Unit] = Array((), (), (), ())\n"}]},"apps":[],"jobName":"paragraph_1512480371927_1227084625","id":"20171205-142611_320051747","dateCreated":"2017-12-05T14:26:11+0100","dateStarted":"2018-01-16T12:58:33+0100","dateFinished":"2018-01-16T13:26:10+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:73"},{"text":"%md\n\n## Create Config","user":"anonymous","dateUpdated":"2018-01-16T12:57:14+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Create Config</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1508831428668_321842868","id":"20171024-095028_1356633690","dateCreated":"2017-10-24T09:50:28+0200","dateStarted":"2018-01-16T12:57:14+0100","dateFinished":"2018-01-16T12:57:14+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:74"},{"text":"%kryo-spark\ndef buildConf(learningRate: Double, l2reg: Option[Double], dropoutReg: Option[Double], layers: Array[Int], rmsPropagation: Int, updater: String, nIn: Int, nOut: Int, itPerMinibatch: Int, seed: Int): MultiLayerConfiguration = {\n    val confBuilder = new NeuralNetConfiguration.Builder()\n        .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT)\n        .iterations(itPerMinibatch) //amount of parameter updates propagated for one minibatch\n        .learningRate(learningRate)\n        .seed(seed) // always use the same seed!\n        .weightInit(WeightInit.XAVIER)\n        .updater(org.deeplearning4j.nn.conf.Updater.valueOf(updater))\n    \n    if (!(l2reg.isEmpty && dropoutReg.isEmpty)) {\n        confBuilder.regularization(true)\n    }\n    if (!l2reg.isEmpty){\n        confBuilder.l2(l2reg.get)\n    }\n    if (!dropoutReg.isEmpty){\n        confBuilder.dropOut(dropoutReg.get)\n    }\n    val listBuilder = confBuilder.list\n        .layer(0, new GravesLSTM.Builder().nIn(nIn).nOut(layers(0)).activation(Activation.TANH).build())\n    \n    for (i <- 1 until layers.size) {\n        listBuilder.layer(i, new GravesLSTM.Builder().nIn(layers(i - 1)).nOut(layers(i)).activation(Activation.TANH).build())\n    }\n    \n    listBuilder.layer(layers.size, new RnnOutputLayer.Builder(LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(layers(layers.size - 1)).nOut(nOut).build())\n        .backpropType(BackpropType.TruncatedBPTT).tBPTTForwardLength(rmsPropagation).tBPTTBackwardLength(rmsPropagation)\n        .pretrain(false).backprop(true).build()\n}","user":"anonymous","dateUpdated":"2018-01-16T12:57:14+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"buildConf: (learningRate: Double, l2reg: Option[Double], dropoutReg: Option[Double], layers: Array[Int], rmsPropagation: Int, updater: String, nIn: Int, nOut: Int, itPerMinibatch: Int, seed: Int)org.deeplearning4j.nn.conf.MultiLayerConfiguration\n"}]},"apps":[],"jobName":"paragraph_1504688731899_-1530773764","id":"20170906-110531_314625779","dateCreated":"2017-09-06T11:05:31+0200","dateStarted":"2018-01-16T12:59:11+0100","dateFinished":"2018-01-16T13:26:11+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:75"},{"text":"%md\nFix params for all models:","user":"anonymous","dateUpdated":"2018-01-16T12:57:14+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Fix params for all models:</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1508831528017_-1467469380","id":"20171024-095208_1148867058","dateCreated":"2017-10-24T09:52:08+0200","dateStarted":"2018-01-16T12:57:15+0100","dateFinished":"2018-01-16T12:57:15+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:76"},{"text":"%kryo-spark\nval nIn = 231\nval nOut = 2\nval itPerMinibatch = 1\nval seed = 1234567890\nval numFolds = 4","user":"anonymous","dateUpdated":"2018-01-16T12:57:15+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"nIn: Int = 231\nnOut: Int = 2\nitPerMinibatch: Int = 1\nseed: Int = 1234567890\nnumFolds: Int = 4\n"}]},"apps":[],"jobName":"paragraph_1504689554375_-364640886","id":"20170906-111914_1303080330","dateCreated":"2017-09-06T11:19:14+0200","dateStarted":"2018-01-16T13:26:10+0100","dateFinished":"2018-01-16T13:26:12+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:77"},{"text":"%md\n\n## Grid search on k-folded Dataset:","user":"anonymous","dateUpdated":"2018-01-16T12:57:15+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Grid search on k-folded Dataset:</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1504696215117_-922022812","id":"20170906-131015_304028158","dateCreated":"2017-09-06T13:10:15+0200","dateStarted":"2018-01-16T12:57:15+0100","dateFinished":"2018-01-16T12:57:15+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:78"},{"text":"%kryo-spark\nval learningRate = List(0.0025, 0.0005)\nval l2Reg: List[Option[Double]] = List(Some(0.001), None)\nval dropoutReg: List[Option[Double]] = List(Some(0.4))\nval layerConf = List(Array(200, 200), Array(200, 100, 30))\nval rmsPropagation = List(600)\nval updater = List(\"RMSPROP\")\nval numEpochs = List(10, 15)","user":"anonymous","dateUpdated":"2018-01-16T12:57:15+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"learningRate: List[Double] = List(0.0025, 5.0E-4)\nl2Reg: List[Option[Double]] = List(Some(0.001), None)\ndropoutReg: List[Option[Double]] = List(Some(0.4))\nlayerConf: List[Array[Int]] = List(Array(200, 200), Array(200, 100, 30))\nrmsPropagation: List[Int] = List(600)\nupdater: List[String] = List(RMSPROP)\nnumEpochs: List[Int] = List(10, 15)\n"}]},"apps":[],"jobName":"paragraph_1512393469371_1346221615","id":"20171204-141749_1210178631","dateCreated":"2017-12-04T14:17:49+0100","dateStarted":"2018-01-16T13:26:11+0100","dateFinished":"2018-01-16T13:26:15+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:79"},{"text":"%kryo-spark\n\nval numExecutors = 5\n\nval numFinished = 6\n\nval paramGrid = learningRate\n    .flatMap(lr => l2Reg.flatMap(l2 => dropoutReg.flatMap(dr => layerConf.flatMap(l => rmsPropagation.flatMap(rms => updater.flatMap(u => numEpochs.map(e => (lr, l2, dr, l, rms, u, e))))))))\n    .drop(numFinished)\n\n\nval crossValidationDataSet = sc.broadcast(trainDS.obj.map(fold => fold.train))\n\nval best = paramGrid.grouped(numExecutors).flatMap(subGrid => {\n    val networkFolds = sc.makeRDD(subGrid, subGrid.size)\n        .coalesce(numExecutors)\n        .mapPartitions(values => {\n            values.map({case (lr, r1, r2, l, rmsProp, u, e) => {\n                val localFolds = crossValidationDataSet.value\n                // Build conf once\n                var conf = buildConf(lr, r1, r2, l, rmsProp, u, nIn, nOut, itPerMinibatch, seed)\n                \n                (lr, r1, r2, l, rmsProp, u, e, (0 until localFolds.size).map(i => {\n                    val foldNet = new MultiLayerNetwork(conf)\n                    \n                    for (ep <- 0 until e) {\n                        for (j <- 0 until localFolds.size if j != i) {\n                            localFolds(j).foreach(seq => foldNet.fit(seq.series))\n                        }\n                    }\n                    \n                    println(\"Trained: \" + (lr, r1, r2, l.mkString(\",\"), rmsProp, u, e))\n                    foldNet\n                }))\n            }})\n        }).collect\n        \n    println(\"Training finished for grid \" + subGrid.mkString(\",\"))\n    \n    // Evaluate networks\n    val result = networkFolds.map({case (lr, r1, r2, l, rmsProp, u, e, netFolds) => {\n        val avgEval = (0 until netFolds.size).map(i =>  {\n            val validate = trainDS.obj(i).validate.union(trainDS.obj(i).validateUnbalanced)\n            evalNetworkRDD(netFolds(i), validate, () => new ROC(1000))\n        }).reduce((l, r) => {\n            l.asInstanceOf[ROC].merge(r.asInstanceOf[ROC])\n            l.setPrCurve(null)\n            l.setAuprc(null)\n            l\n        })\n        val AuPRC = avgEval.calculateAUCPR\n        println(\"AuPRC: \" + AuPRC + \": \" + (lr, r1, r2, l.mkString(\",\"), rmsProp, u, e))\n        (AuPRC, avgEval, lr, r1, r2, l, rmsProp, u, e)\n    }})\n    \n    println(\"Evaluation finished for the grid\")\n    \n    result\n}).maxBy(_._1)\n    \nprintln(best._1, best._3, best._4, best._5, best._6, best._7, best._8, best._9)\nval curve = best._2.getPrecisionRecallCurve\nval bestThreshold = curve.getThreshold(curve.getX.zip(curve.getY).map({case (x, y) => 2.0 * x * y / (x + y)}).zipWithIndex.maxBy(_._1)._2)\n\nprintln(\"Best Threshold: \" + bestThreshold)\nprintln(best._2.getPrecisionRecallCurve)","user":"anonymous","dateUpdated":"2018-01-16T12:57:15+0100","config":{"colWidth":12,"enabled":false,"results":{"0":{"graph":{"mode":"table","height":382.9,"optionOpen":false}}},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"numExecutors: Int = 5\nnumFinished: Int = 1\nparamGrid: List[(Double, Option[Double], Option[Double], Array[Int], Int, String, Int)] = List((0.0025,Some(0.001),Some(0.4),Array(200, 200),600,RMSPROP,15), (0.0025,Some(0.001),Some(0.4),Array(200, 100, 30),600,RMSPROP,10), (0.0025,Some(0.001),Some(0.4),Array(200, 100, 30),600,RMSPROP,15), (0.0025,None,Some(0.4),Array(200, 200),600,RMSPROP,10), (0.0025,None,Some(0.4),Array(200, 200),600,RMSPROP,15), (0.0025,None,Some(0.4),Array(200, 100, 30),600,RMSPROP,10), (0.0025,None,Some(0.4),Array(200, 100, 30),600,RMSPROP,15), (5.0E-4,Some(0.001),Some(0.4),Array(200, 200),600,RMSPROP,10), (5.0E-4,Some(0.001),Some(0.4),Array(200, 200),600,RMSPROP,15), (5.0E-4,Some(0.001),Some(0.4),Array(200, 100, 30),600,RMSPROP,10), (5.0E-4,Some(0.001),Some(0.4),Array(200, 100, 30),600,RMSPROP,15), (5.0E-4,None,...crossValidationDataSet: org.apache.spark.broadcast.Broadcast[Array[Array[Sequence]]] = Broadcast(22)\nTraining finished for grid (0.0025,Some(0.001),Some(0.4),[I@93391e9,600,RMSPROP,15),(0.0025,Some(0.001),Some(0.4),[I@619996c,600,RMSPROP,10),(0.0025,Some(0.001),Some(0.4),[I@619996c,600,RMSPROP,15),(0.0025,None,Some(0.4),[I@93391e9,600,RMSPROP,10),(0.0025,None,Some(0.4),[I@93391e9,600,RMSPROP,15)\nAuPRC: 0.3524591791254813: (0.0025,Some(0.001),Some(0.4),200,200,600,RMSPROP,15)\nAuPRC: 0.2958835847827866: (0.0025,Some(0.001),Some(0.4),200,100,30,600,RMSPROP,10)\nAuPRC: 0.3964050204276752: (0.0025,Some(0.001),Some(0.4),200,100,30,600,RMSPROP,15)\nAuPRC: 0.40309112190438046: (0.0025,None,Some(0.4),200,200,600,RMSPROP,10)\nAuPRC: 0.3380545763661414: (0.0025,None,Some(0.4),200,200,600,RMSPROP,15)\nEvaluation finished for the grid\norg.apache.spark.SparkException: Job 36 cancelled part of cancelled job group zeppelin-20170905-152952_1440547998\n  at org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1435)\n  at org.apache.spark.scheduler.DAGScheduler.handleJobCancellation(DAGScheduler.scala:1375)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleJobGroupCancelled$1.apply$mcVI$sp(DAGScheduler.scala:788)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleJobGroupCancelled$1.apply(DAGScheduler.scala:788)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleJobGroupCancelled$1.apply(DAGScheduler.scala:788)\n  at scala.collection.mutable.HashSet.foreach(HashSet.scala:78)\n  at org.apache.spark.scheduler.DAGScheduler.handleJobGroupCancelled(DAGScheduler.scala:788)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1625)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1605)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1594)\n  at org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)\n  at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:628)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1925)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1938)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1951)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1965)\n  at org.apache.spark.rdd.RDD$$anonfun$collect$1.apply(RDD.scala:936)\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\n  at org.apache.spark.rdd.RDD.withScope(RDD.scala:362)\n  at org.apache.spark.rdd.RDD.collect(RDD.scala:935)\n  at $$$$73dee2a55e7090b474788d5fb4a3a95$$$$$anonfun$1.apply(<console>:188)\n  at $$$$73dee2a55e7090b474788d5fb4a3a95$$$$$anonfun$1.apply(<console>:166)\n  at scala.collection.Iterator$$anon$12.nextCur(Iterator.scala:434)\n  at scala.collection.Iterator$$anon$12.hasNext(Iterator.scala:440)\n  at scala.collection.Iterator$class.foreach(Iterator.scala:893)\n  at scala.collection.AbstractIterator.foreach(Iterator.scala:1336)\n  at scala.collection.TraversableOnce$class.maxBy(TraversableOnce.scala:242)\n  at scala.collection.AbstractIterator.maxBy(Iterator.scala:1336)\n  ... 72 elided\n"}]},"apps":[],"jobName":"paragraph_1504618192249_-280404285","id":"20170905-152952_1440547998","dateCreated":"2017-09-05T15:29:52+0200","dateStarted":"2018-01-12T18:02:15+0100","dateFinished":"2018-01-15T11:07:49+0100","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:80"},{"text":"%kryo-spark\ncrossValidationDataSet.destroy","user":"anonymous","dateUpdated":"2018-01-16T12:57:15+0100","config":{"colWidth":12,"enabled":false,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1512657745341_977799352","id":"20171207-154225_1509467640","dateCreated":"2017-12-07T15:42:25+0100","dateStarted":"2018-01-11T11:01:39+0100","dateFinished":"2018-01-11T11:01:45+0100","status":"ABORT","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:81"},{"text":"%md\n\n## Validation of best model:","user":"anonymous","dateUpdated":"2018-01-16T12:57:15+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Validation of best model:</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1504696241492_-694605564","id":"20170906-131041_576208040","dateCreated":"2017-09-06T13:10:41+0200","dateStarted":"2018-01-16T12:57:15+0100","dateFinished":"2018-01-16T12:57:15+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:82"},{"text":"%kryo-spark\n\nvar net = new MultiLayerNetwork(buildConf(0.0025, Some(0.001), Some(0.4), Array(200, 200), 600, \"RMSPROP\", nIn, nOut, itPerMinibatch, seed))\n\nfor (i <- 0 until 10) {\n    trainDS.obj.flatMap(_.train).foreach(seq => net.fit(seq.series))\n    println(\"Finished epoch \" + (i + 1))\n}\n\nval eval = evalNetworkRDD(net, testRDD, () => new ROC(1000))\nprintln(\"AuROC: \" + eval.calculateAUC + \", AuPRC: \" + eval.calculateAUCPR)\nprintln(\"threshold;rec;pre\")\nprintln(\"threshold;rec;pre\")\neval.getPrecisionRecallCurve.getThreshold.zip(eval.getPrecisionRecallCurve.getRecall).zip(eval.getPrecisionRecallCurve.getPrecision).foreach(t => println(\"%.10f;%.10f;%.10f\".format(t._1._1, t._1._2, t._2)))","user":"anonymous","dateUpdated":"2018-01-17T13:45:33+0100","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":404,"optionOpen":false}},"1":{"graph":{"mode":"table","height":213,"optionOpen":false}}},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"net: org.deeplearning4j.nn.multilayer.MultiLayerNetwork = org.deeplearning4j.nn.multilayer.MultiLayerNetwork@3325bac\nFinished epoch 1\nFinished epoch 2\nFinished epoch 3\nFinished epoch 4\nFinished epoch 5\nFinished epoch 6\nFinished epoch 7\nFinished epoch 8\nFinished epoch 9\nFinished epoch 10\neval: org.deeplearning4j.eval.ROC = ROC(thresholdSteps=1000, countActualPositive=86862, countActualNegative=3327647, counts={0.0=ROC.CountsForThreshold(threshold=0.0, countTruePositive=86862, countFalsePositive=3327647), 0.001=ROC.CountsForThreshold(threshold=0.001, countTruePositive=86862, countFalsePositive=3327647), 0.002=ROC.CountsForThreshold(threshold=0.002, countTruePositive=86862, countFalsePositive=3327647), 0.003=ROC.CountsForThreshold(threshold=0.003, countTruePositive=86862, countFalsePositive=3327647), 0.004=ROC.CountsForThreshold(threshold=0.004, countTruePositive=86862, countFalsePositive=3327647), 0.005=ROC.CountsForThreshold(threshold=0.005, countTruePositive=86862, countFalsePositive=3327647), 0.006=ROC.CountsForThreshold(threshold=0.006, countTruePositive=86862, count...AuROC: 0.8924387986661864, AuPRC: 0.44433395324646957\nthreshold;rec;pre\nthreshold;rec;pre\n0.0000000000;1.0000000000;0.0254390895\n0.0010000000;1.0000000000;0.0254390895\n0.0020000000;1.0000000000;0.0254390895\n0.0030000000;1.0000000000;0.0254390895\n0.0040000000;1.0000000000;0.0254390895\n0.0050000000;1.0000000000;0.0254390895\n0.0060000000;1.0000000000;0.0254797510\n0.0070000000;0.8808800166;0.0963868929\n0.0080000000;0.8502912666;0.1203628257\n0.0090000000;0.8208998181;0.1272033809\n0.0100000000;0.7989224287;0.1294684584\n0.0110000000;0.7802606433;0.1368696976\n0.0120000000;0.7693007299;0.1407199941\n0.0130000000;0.7640164859;0.1426894348\n0.0140000000;0.7571550275;0.1436283588\n0.0150000000;0.7504547443;0.1443094020\n0.0160000000;0.7454122631;0.1447982825\n0.0170000000;0.7393566807;0.1447830576\n0.0180000000;0.7335773986;0.1448125868\n0.0190000000;0.7287191177;0.1449528259\n0.0200000000;0.7244134374;0.1457080005\n0.0210000000;0.7217655592;0.1463588867\n0.0220000000;0.7199811195;0.1472701369\n0.0230000000;0.7190716309;0.1484587246\n0.0240000000;0.7177937418;0.1503334635\n0.0250000000;0.7169072782;0.1517585588\n0.0260000000;0.7163546775;0.1526429924\n0.0270000000;0.7160438397;0.1533940691\n0.0280000000;0.7157675393;0.1545008598\n0.0290000000;0.7154221639;0.1562080528\n0.0300000000;0.7151804011;0.1584320526\n0.0310000000;0.7148810757;0.1600197912\n0.0320000000;0.7146623380;0.1610173009\n0.0330000000;0.7143630126;0.1622710786\n0.0340000000;0.7141672999;0.1630684223\n0.0350000000;0.7139255371;0.1643756097\n0.0360000000;0.7137413368;0.1654992178\n0.0370000000;0.7133844489;0.1663793705\n0.0380000000;0.7131311736;0.1670491595\n0.0390000000;0.7127742856;0.1675670263\n0.0400000000;0.7125210103;0.1684709379\n0.0410000000;0.7123252976;0.1703842002\n0.0420000000;0.7121871474;0.1714402902\n0.0430000000;0.7120720223;0.1730764926\n0.0440000000;0.7119568971;0.1741768130\n0.0450000000;0.7118763095;0.1754084875\n0.0460000000;0.7117842094;0.1765053499\n0.0470000000;0.7117266469;0.1786510003\n0.0480000000;0.7116575718;0.1814962815\n0.0490000000;0.7115309341;0.1833524681\n0.0500000000;0.7114503465;0.1854080910\n0.0510000000;0.7113927840;0.1865494110\n0.0520000000;0.7113352214;0.1873777487\n0.0530000000;0.7112661463;0.1880742044\n0.0540000000;0.7112316088;0.1889485628\n0.0550000000;0.7111855587;0.1906735847\n0.0560000000;0.7111625337;0.1913163861\n0.0570000000;0.7111164836;0.1918434914\n0.0580000000;0.7111049711;0.1923397895\n0.0590000000;0.7110934586;0.1927821023\n0.0600000000;0.7110358960;0.1931577581\n0.0610000000;0.7110013585;0.1935527343\n0.0620000000;0.7109898460;0.1939203256\n0.0630000000;0.7109553084;0.1944396341\n0.0640000000;0.7109092584;0.1962598406\n0.0650000000;0.7108862333;0.1976379087\n0.0660000000;0.7108401833;0.1980834873\n0.0670000000;0.7108171583;0.1984329253\n0.0680000000;0.7107711082;0.1987579839\n0.0690000000;0.7107480832;0.1990912433\n0.0700000000;0.7106905206;0.1994050022\n0.0710000000;0.7106674956;0.1997488982\n0.0720000000;0.7106444705;0.2001426626\n0.0730000000;0.7106099330;0.2008309799\n0.0740000000;0.7105178329;0.2013730052\n0.0750000000;0.7104717828;0.2032205483\n0.0760000000;0.7103796827;0.2046043862\n0.0770000000;0.7103451452;0.2058160324\n0.0780000000;0.7103106076;0.2072508750\n0.0790000000;0.7102645576;0.2077776431\n0.0800000000;0.7102300200;0.2088033711\n0.0810000000;0.7101724575;0.2097341221\n0.0820000000;0.7101033824;0.2101860907\n0.0830000000;0.7100343073;0.2105674652\n0.0840000000;0.7099652322;0.2109106206\n0.0850000000;0.7099191822;0.2112292504\n0.0860000000;0.7098616196;0.2115490841\n0.0870000000;0.7098270820;0.2118600680\n0.0880000000;0.7097925445;0.2121719979\n0.0890000000;0.7097695195;0.2124465886\n0.0900000000;0.7097119569;0.2127409197\n0.0910000000;0.7096889319;0.2130987732\n0.0920000000;0.7096428818;0.2136995705\n0.0930000000;0.7095738067;0.2145452900\n0.0940000000;0.7094701941;0.2153046358\n0.0950000000;0.7093896065;0.2160258590\n0.0960000000;0.7093435564;0.2167382503\n0.0970000000;0.7092859939;0.2174718762\n0.0980000000;0.7092054063;0.2179988959\n0.0990000000;0.7091708687;0.2184691554\n0.1000000000;0.7090672561;0.2188890468\n0.1010000000;0.7089866685;0.2193537357\n0.1020000000;0.7089751560;0.2198270169\n0.1030000000;0.7089060809;0.2203625172\n0.1040000000;0.7088485183;0.2207047842\n0.1050000000;0.7087564182;0.2210064546\n0.1060000000;0.7086988557;0.2213444846\n0.1070000000;0.7086182681;0.2216787977\n0.1080000000;0.7085837305;0.2221039413\n0.1090000000;0.7085261679;0.2227038998\n0.1100000000;0.7084686054;0.2232067725\n0.1110000000;0.7084455803;0.2238156722\n0.1120000000;0.7084225553;0.2245720959\n0.1130000000;0.7083995303;0.2250436131\n0.1140000000;0.7083534802;0.2257216018\n0.1150000000;0.7082383551;0.2265284104\n0.1160000000;0.7082038175;0.2273553805\n0.1170000000;0.7081462550;0.2279426206\n0.1180000000;0.7081002049;0.2287398427\n0.1190000000;0.7080771799;0.2292276959\n0.1200000000;0.7080196173;0.2295821232\n0.1210000000;0.7079735673;0.2298881512\n0.1220000000;0.7079390297;0.2302099829\n0.1230000000;0.7079160047;0.2305045227\n0.1240000000;0.7078814672;0.2307839553\n0.1250000000;0.7078469296;0.2310745143\n0.1260000000;0.7078008796;0.2313524945\n0.1270000000;0.7077548295;0.2315962765\n0.1280000000;0.7076972669;0.2318613177\n0.1290000000;0.7076512169;0.2320817051\n0.1300000000;0.7075821418;0.2323046395\n0.1310000000;0.7075130667;0.2325122109\n0.1320000000;0.7074670166;0.2327171925\n0.1330000000;0.7074209666;0.2329366900\n0.1340000000;0.7074094541;0.2331193614\n0.1350000000;0.7073864290;0.2332799283\n0.1360000000;0.7073634040;0.2334425009\n0.1370000000;0.7073403790;0.2335946530\n0.1380000000;0.7073288665;0.2337303655\n0.1390000000;0.7073058414;0.2338757875\n0.1400000000;0.7072828164;0.2340374469\n0.1410000000;0.7072367664;0.2341542250\n0.1420000000;0.7072367664;0.2343274985\n0.1430000000;0.7071676913;0.2346115652\n0.1440000000;0.7071216412;0.2349633336\n0.1450000000;0.7070986162;0.2351139778\n0.1460000000;0.7070640787;0.2352546866\n0.1470000000;0.7070410536;0.2353759538\n0.1480000000;0.7070065161;0.2355242266\n0.1490000000;0.7069719785;0.2358446726\n0.1500000000;0.7069604660;0.2363991931\n0.1510000000;0.7069259285;0.2366919786\n0.1520000000;0.7069029035;0.2368476881\n0.1530000000;0.7068683659;0.2370207953\n0.1540000000;0.7068338284;0.2372060858\n0.1550000000;0.7067992908;0.2373430445\n0.1560000000;0.7067762658;0.2374950677\n0.1570000000;0.7067532408;0.2378369583\n0.1580000000;0.7067187032;0.2383387301\n0.1590000000;0.7066611407;0.2387234274\n0.1600000000;0.7066381156;0.2388968244\n0.1610000000;0.7066035781;0.2391299266\n0.1620000000;0.7065345030;0.2394451923\n0.1630000000;0.7065114780;0.2397198470\n0.1640000000;0.7064999655;0.2400779291\n0.1650000000;0.7064424029;0.2402491641\n0.1660000000;0.7064308904;0.2404137364\n0.1670000000;0.7063848403;0.2405997937\n0.1680000000;0.7063387903;0.2409043435\n0.1690000000;0.7063387903;0.2411950860\n0.1700000000;0.7063042527;0.2413721201\n0.1710000000;0.7062697152;0.2415722594\n0.1720000000;0.7062697152;0.2417950567\n0.1730000000;0.7062466902;0.2420189683\n0.1740000000;0.7062121526;0.2422106664\n0.1750000000;0.7061776151;0.2424007714\n0.1760000000;0.7061315650;0.2426131464\n0.1770000000;0.7061200525;0.2429484158\n0.1780000000;0.7060970275;0.2433337433\n0.1790000000;0.7060970275;0.2435037737\n0.1800000000;0.7060970275;0.2436740418\n0.1810000000;0.7060740024;0.2439879221\n0.1820000000;0.7060509774;0.2442821977\n0.1830000000;0.7060279524;0.2445908596\n0.1840000000;0.7060164399;0.2449199655\n0.1850000000;0.7059703898;0.2452144357\n0.1860000000;0.7059473648;0.2455127461\n0.1870000000;0.7059243398;0.2458177153\n0.1880000000;0.7059013147;0.2461788004\n0.1890000000;0.7058667772;0.2464180502\n0.1900000000;0.7058207271;0.2466319368\n0.1910000000;0.7058207271;0.2468991124\n0.1920000000;0.7057746771;0.2471019283\n0.1930000000;0.7057516520;0.2474159816\n0.1940000000;0.7057516520;0.2478230638\n0.1950000000;0.7057171145;0.2480224960\n0.1960000000;0.7056940895;0.2481931516\n0.1970000000;0.7056940895;0.2483953059\n0.1980000000;0.7056480394;0.2485684624\n0.1990000000;0.7056480394;0.2486904941\n0.2000000000;0.7056135019;0.2488055176\n0.2010000000;0.7055904768;0.2489034910\n0.2020000000;0.7055444268;0.2490257986\n0.2030000000;0.7055214018;0.2491381413\n0.2040000000;0.7055214018;0.2492982727\n0.2050000000;0.7054868642;0.2495174964\n0.2060000000;0.7054753517;0.2497646191\n0.2070000000;0.7054753517;0.2500346823\n0.2080000000;0.7054523267;0.2503012503\n0.2090000000;0.7054408142;0.2504659756\n0.2100000000;0.7054293017;0.2506329735\n0.2110000000;0.7053947641;0.2507858546\n0.2120000000;0.7053947641;0.2509399189\n0.2130000000;0.7053717391;0.2511209660\n0.2140000000;0.7053372015;0.2513229250\n0.2150000000;0.7053026640;0.2515076749\n0.2160000000;0.7052911515;0.2517288562\n0.2170000000;0.7052566139;0.2518966262\n0.2180000000;0.7052335889;0.2521517570\n0.2190000000;0.7052335889;0.2524343859\n0.2200000000;0.7052335889;0.2526978417\n0.2210000000;0.7052105639;0.2528930192\n0.2220000000;0.7052105639;0.2530716794\n0.2230000000;0.7051990514;0.2532265666\n0.2240000000;0.7051760263;0.2533670312\n0.2250000000;0.7051645138;0.2535369841\n0.2260000000;0.7051530013;0.2537975785\n0.2270000000;0.7051299763;0.2539860917\n0.2280000000;0.7051184638;0.2542265243\n0.2290000000;0.7050954387;0.2544030173\n0.2300000000;0.7050839262;0.2545341956\n0.2310000000;0.7050724137;0.2547131753\n0.2320000000;0.7050378762;0.2548702988\n0.2330000000;0.7049918261;0.2550107231\n0.2340000000;0.7049688011;0.2551766672\n0.2350000000;0.7049227510;0.2553291745\n0.2360000000;0.7048997260;0.2554657120\n0.2370000000;0.7048767010;0.2556184114\n0.2380000000;0.7048536759;0.2558140507\n0.2390000000;0.7048191384;0.2560625706\n0.2400000000;0.7047961134;0.2563952222\n0.2410000000;0.7047846009;0.2566371681\n0.2420000000;0.7047846009;0.2569010231\n0.2430000000;0.7047846009;0.2571243768\n0.2440000000;0.7047730883;0.2573082209\n0.2450000000;0.7047500633;0.2575119573\n0.2460000000;0.7047500633;0.2576973269\n0.2470000000;0.7047500633;0.2578829635\n0.2480000000;0.7047270383;0.2581104899\n0.2490000000;0.7047270383;0.2582760221\n0.2500000000;0.7046925007;0.2584836661\n0.2510000000;0.7046579632;0.2587321247\n0.2520000000;0.7046119131;0.2592038895\n0.2530000000;0.7046004006;0.2596229713\n0.2540000000;0.7045888881;0.2599230449\n0.2550000000;0.7045313256;0.2601769460\n0.2560000000;0.7045198130;0.2606059057\n0.2570000000;0.7045198130;0.2611742513\n0.2580000000;0.7045083005;0.2616680564\n0.2590000000;0.7044967880;0.2620166988\n0.2600000000;0.7044852755;0.2623741575\n0.2610000000;0.7044737630;0.2627687075\n0.2620000000;0.7044392254;0.2632770112\n0.2630000000;0.7044392254;0.2636968148\n0.2640000000;0.7044162004;0.2640500593\n0.2650000000;0.7043701504;0.2644516291\n0.2660000000;0.7043471253;0.2649101537\n0.2670000000;0.7043356128;0.2651411732\n0.2680000000;0.7043241003;0.2653093085\n0.2690000000;0.7043010753;0.2654433747\n0.2700000000;0.7042895628;0.2656626585\n0.2710000000;0.7042780502;0.2658834676\n0.2720000000;0.7042550252;0.2660250835\n0.2730000000;0.7042435127;0.2662836000\n0.2740000000;0.7042089752;0.2665664357\n0.2750000000;0.7041744376;0.2668755154\n0.2760000000;0.7041053625;0.2672527934\n0.2770000000;0.7040823375;0.2674941938\n0.2780000000;0.7040708250;0.2678154628\n0.2790000000;0.7040247749;0.2681243615\n0.2800000000;0.7040247749;0.2683490868\n0.2810000000;0.7040017499;0.2685276669\n0.2820000000;0.7040017499;0.2686999354\n0.2830000000;0.7039211623;0.2688688372\n0.2840000000;0.7039096498;0.2690418988\n0.2850000000;0.7038981373;0.2692128182\n0.2860000000;0.7038866248;0.2694195720\n0.2870000000;0.7038635997;0.2697554777\n0.2880000000;0.7038290622;0.2700758948\n0.2890000000;0.7038290622;0.2703362400\n0.2900000000;0.7037945246;0.2706161494\n0.2910000000;0.7037830121;0.2709055296\n0.2920000000;0.7037599871;0.2711369745\n0.2930000000;0.7037484746;0.2713949565\n0.2940000000;0.7037484746;0.2716421890\n0.2950000000;0.7037484746;0.2718173329\n0.2960000000;0.7037139370;0.2719854054\n0.2970000000;0.7036909120;0.2721266517\n0.2980000000;0.7036793995;0.2723792802\n0.2990000000;0.7036448620;0.2725444468\n0.3000000000;0.7036333495;0.2727297067\n0.3010000000;0.7035872994;0.2729274218\n0.3020000000;0.7035757869;0.2731999088\n0.3030000000;0.7035642744;0.2736272297\n0.3040000000;0.7035412493;0.2742162014\n0.3050000000;0.7035067118;0.2745957994\n0.3060000000;0.7035067118;0.2750159767\n0.3070000000;0.7034951993;0.2753820432\n0.3080000000;0.7034606617;0.2757338508\n0.3090000000;0.7034491492;0.2761205833\n0.3100000000;0.7034261242;0.2763863193\n0.3110000000;0.7033915867;0.2766655950\n0.3120000000;0.7033800741;0.2769244018\n0.3130000000;0.7033685616;0.2771547813\n0.3140000000;0.7033570491;0.2773880709\n0.3150000000;0.7033340241;0.2775617203\n0.3160000000;0.7032994865;0.2777310523\n0.3170000000;0.7032649490;0.2779499220\n0.3180000000;0.7032304115;0.2781159651\n0.3190000000;0.7032188989;0.2783065505\n0.3200000000;0.7031728489;0.2784824555\n0.3210000000;0.7031728489;0.2787480775\n0.3220000000;0.7031613364;0.2789943450\n0.3230000000;0.7031383113;0.2793769869\n0.3240000000;0.7031152863;0.2795890900\n0.3250000000;0.7031037738;0.2798176487\n0.3260000000;0.7030922613;0.2803602743\n0.3270000000;0.7030692363;0.2806848213\n0.3280000000;0.7030462112;0.2809532573\n0.3290000000;0.7029886487;0.2814702479\n0.3300000000;0.7029656236;0.2819509988\n0.3310000000;0.7029656236;0.2822690249\n0.3320000000;0.7029541111;0.2825622183\n0.3330000000;0.7029541111;0.2827846835\n0.3340000000;0.7029425986;0.2830015527\n0.3350000000;0.7029195736;0.2831602721\n0.3360000000;0.7029080611;0.2833580077\n0.3370000000;0.7029080611;0.2835382844\n0.3380000000;0.7028735235;0.2838684180\n0.3390000000;0.7028274735;0.2841034423\n0.3400000000;0.7028159609;0.2842760618\n0.3410000000;0.7027814234;0.2844568084\n0.3420000000;0.7027468859;0.2845940099\n0.3430000000;0.7027123483;0.2847260447\n0.3440000000;0.7026662983;0.2848469009\n0.3450000000;0.7026432732;0.2849745529\n0.3460000000;0.7025972232;0.2850796676\n0.3470000000;0.7025972232;0.2852262265\n0.3480000000;0.7025972232;0.2853502530\n0.3490000000;0.7025741982;0.2854596908\n0.3500000000;0.7025396606;0.2855698856\n0.3510000000;0.7025281481;0.2856975650\n0.3520000000;0.7025166356;0.2858133141\n0.3530000000;0.7025051231;0.2859023675\n0.3540000000;0.7024936106;0.2860048839\n0.3550000000;0.7024590730;0.2860806616\n0.3560000000;0.7024245355;0.2861658818\n0.3570000000;0.7023899979;0.2862605628\n0.3580000000;0.7023554604;0.2863432195\n0.3590000000;0.7023209228;0.2864353460\n0.3600000000;0.7022748728;0.2865282273\n0.3610000000;0.7022403352;0.2866285736\n0.3620000000;0.7022173102;0.2867067456\n0.3630000000;0.7021942852;0.2867809201\n0.3640000000;0.7021827727;0.2868571429\n0.3650000000;0.7021252101;0.2869280892\n0.3660000000;0.7020906726;0.2870233534\n0.3670000000;0.7020561350;0.2870970627\n0.3680000000;0.7020331100;0.2871998719\n0.3690000000;0.7019870599;0.2872811564\n0.3700000000;0.7019179848;0.2873530715\n0.3710000000;0.7018834473;0.2874215645\n0.3720000000;0.7018604223;0.2874961684\n0.3730000000;0.7018258847;0.2875891610\n0.3740000000;0.7018143722;0.2877310401\n0.3750000000;0.7018028597;0.2880553429\n0.3760000000;0.7017568097;0.2885395514\n0.3770000000;0.7017107596;0.2890076387\n0.3780000000;0.7016647095;0.2894896835\n0.3790000000;0.7016071470;0.2899507099\n0.3800000000;0.7015841219;0.2902615836\n0.3810000000;0.7015495844;0.2905157372\n0.3820000000;0.7015035343;0.2907655895\n0.3830000000;0.7014805093;0.2909156883\n0.3840000000;0.7014344593;0.2910452752\n0.3850000000;0.7013768967;0.2911590830\n0.3860000000;0.7013308466;0.2913251399\n0.3870000000;0.7012963091;0.2915980546\n0.3880000000;0.7012847966;0.2918992740\n0.3890000000;0.7012502590;0.2922462061\n0.3900000000;0.7012042090;0.2925526550\n0.3910000000;0.7011696714;0.2927801253\n0.3920000000;0.7011236214;0.2929298760\n0.3930000000;0.7010890838;0.2930973077\n0.3940000000;0.7010660588;0.2932627017\n0.3950000000;0.7010200087;0.2933861401\n0.3960000000;0.7010200087;0.2935657741\n0.3970000000;0.7009854712;0.2938374674\n0.3980000000;0.7009509337;0.2941565814\n0.3990000000;0.7009048836;0.2945057709\n0.4000000000;0.7008933711;0.2948632260\n0.4010000000;0.7008818586;0.2951972265\n0.4020000000;0.7008358085;0.2955446914\n0.4030000000;0.7007897585;0.2958728863\n0.4040000000;0.7007206834;0.2961546509\n0.4050000000;0.7006976584;0.2965027062\n0.4060000000;0.7006516083;0.2968331618\n0.4070000000;0.7006285833;0.2972220594\n0.4080000000;0.7006170708;0.2975586859\n0.4090000000;0.7005479957;0.2976763526\n0.4100000000;0.7005019456;0.2977937218\n0.4110000000;0.7004789206;0.2979312033\n0.4120000000;0.7004328705;0.2980254425\n0.4130000000;0.7004098455;0.2981383200\n0.4140000000;0.7003753080;0.2982522368\n0.4150000000;0.7003637954;0.2983467954\n0.4160000000;0.7003407704;0.2984335830\n0.4170000000;0.7002486703;0.2984983069\n0.4180000000;0.7002256453;0.2985866678\n0.4190000000;0.7001680827;0.2986808891\n0.4200000000;0.7001220326;0.2987830342\n0.4210000000;0.7000874951;0.2989180926\n0.4220000000;0.7000644701;0.2991626653\n0.4230000000;0.6999953950;0.2994115475\n0.4240000000;0.6999148074;0.2996795978\n0.4250000000;0.6998687573;0.2999304346\n0.4260000000;0.6997881697;0.3000839258\n0.4270000000;0.6997421197;0.3002094220\n0.4280000000;0.6997190947;0.3003419547\n0.4290000000;0.6996500196;0.3004919776\n0.4300000000;0.6996154820;0.3006094303\n0.4310000000;0.6995924570;0.3007349120\n0.4320000000;0.6995579195;0.3008510870\n0.4330000000;0.6994888444;0.3009599572\n0.4340000000;0.6994543068;0.3010658910\n0.4350000000;0.6993852317;0.3011465877\n0.4360000000;0.6993737192;0.3012625962\n0.4370000000;0.6993276692;0.3013623194\n0.4380000000;0.6993161567;0.3014545689\n0.4390000000;0.6992816191;0.3015444341\n0.4400000000;0.6992470816;0.3016418518\n0.4410000000;0.6992240565;0.3017503068\n0.4420000000;0.6992125440;0.3018488147\n0.4430000000;0.6991895190;0.3019589320\n0.4440000000;0.6991319564;0.3020557178\n0.4450000000;0.6989938063;0.3021117370\n0.4460000000;0.6988786811;0.3021687299\n0.4470000000;0.6988671686;0.3022750925\n0.4480000000;0.6988096060;0.3023525720\n0.4490000000;0.6987635560;0.3024215247\n0.4500000000;0.6987290184;0.3024985172\n0.4510000000;0.6986599434;0.3025545662\n0.4520000000;0.6986023808;0.3026382724\n0.4530000000;0.6985678432;0.3027169141\n0.4540000000;0.6984987682;0.3027896996\n0.4550000000;0.6984757431;0.3028870395\n0.4560000000;0.6984296931;0.3029774866\n0.4570000000;0.6983951555;0.3030623970\n0.4580000000;0.6983606180;0.3031594834\n0.4590000000;0.6983030554;0.3032527073\n0.4600000000;0.6982109553;0.3034205352\n0.4610000000;0.6981303677;0.3035784014\n0.4620000000;0.6981073427;0.3037189151\n0.4630000000;0.6980382676;0.3038258212\n0.4640000000;0.6979576800;0.3039140984\n0.4650000000;0.6979116299;0.3040190169\n0.4660000000;0.6978770924;0.3041000507\n0.4670000000;0.6978195298;0.3041955234\n0.4680000000;0.6977159172;0.3042969613\n0.4690000000;0.6976353296;0.3043749058\n0.4700000000;0.6975547420;0.3044926881\n0.4710000000;0.6974741544;0.3046442867\n0.4720000000;0.6974281043;0.3048709910\n0.4730000000;0.6973820543;0.3050243210\n0.4740000000;0.6973360042;0.3052624152\n0.4750000000;0.6972669292;0.3055293518\n0.4760000000;0.6971863416;0.3057639681\n0.4770000000;0.6971287790;0.3059008957\n0.4780000000;0.6971057540;0.3060624134\n0.4790000000;0.6970597039;0.3063131428\n0.4800000000;0.6970021413;0.3065095887\n0.4810000000;0.6969330662;0.3067680832\n0.4820000000;0.6968985287;0.3069877832\n0.4830000000;0.6968409661;0.3071680495\n0.4840000000;0.6967718910;0.3073122680\n0.4850000000;0.6966913034;0.3074359508\n0.4860000000;0.6966222284;0.3075570284\n0.4870000000;0.6965646658;0.3078476865\n0.4880000000;0.6965186157;0.3080953909\n0.4890000000;0.6963574405;0.3083711445\n0.4900000000;0.6962538279;0.3085753938\n0.4910000000;0.6960926527;0.3088096345\n0.4920000000;0.6960120651;0.3091559919\n0.4930000000;0.6959084525;0.3092776121\n0.4940000000;0.6958393774;0.3094527414\n0.4950000000;0.6956666897;0.3097089319\n0.4960000000;0.6955745896;0.3100731830\n0.4970000000;0.6954479519;0.3103097550\n0.4980000000;0.6953213143;0.3105132463\n0.4990000000;0.6951486266;0.3106629280\n0.5000000000;0.6950219889;0.3107774197\n0.5010000000;0.6949183763;0.3109087444\n0.5020000000;0.6947917386;0.3110042669\n0.5030000000;0.6946651010;0.3110966751\n0.5040000000;0.6945845134;0.3112162260\n0.5050000000;0.6944693882;0.3113236273\n0.5060000000;0.6943657756;0.3114330858\n0.5070000000;0.6942621630;0.3115426540\n0.5080000000;0.6941585503;0.3116491105\n0.5090000000;0.6939973751;0.3117378758\n0.5100000000;0.6938707375;0.3118648453\n0.5110000000;0.6937440998;0.3119984260\n0.5120000000;0.6936750248;0.3121402854\n0.5130000000;0.6935483871;0.3125074570\n0.5140000000;0.6934332620;0.3128255732\n0.5150000000;0.6932951118;0.3130933441\n0.5160000000;0.6931339366;0.3133414869\n0.5170000000;0.6929497364;0.3135143863\n0.5180000000;0.6927655361;0.3136581374\n0.5190000000;0.6925928484;0.3137745788\n0.5200000000;0.6924662108;0.3138825543\n0.5210000000;0.6923971357;0.3139970763\n0.5220000000;0.6922359605;0.3140961684\n0.5230000000;0.6921553729;0.3141974696\n0.5240000000;0.6920402477;0.3143028940\n0.5250000000;0.6919136101;0.3143834577\n0.5260000000;0.6917294099;0.3144379262\n0.5270000000;0.6915682347;0.3145292612\n0.5280000000;0.6914300845;0.3146097433\n0.5290000000;0.6912228592;0.3146588545\n0.5300000000;0.6910731966;0.3147424772\n0.5310000000;0.6908544588;0.3147980087\n0.5320000000;0.6907278211;0.3148707937\n0.5330000000;0.6905666459;0.3149477310\n0.5340000000;0.6904515208;0.3150358246\n0.5350000000;0.6903479082;0.3151209720\n0.5360000000;0.6902097580;0.3152219062\n0.5370000000;0.6899910202;0.3154819556\n0.5380000000;0.6897837950;0.3158177707\n0.5390000000;0.6895880822;0.3159879933\n0.5400000000;0.6894729571;0.3161670767\n0.5410000000;0.6893463194;0.3163561820\n0.5420000000;0.6892196818;0.3164987259\n0.5430000000;0.6890700191;0.3165906759\n0.5440000000;0.6888858189;0.3166450589\n0.5450000000;0.6887016187;0.3167212872\n0.5460000000;0.6884368308;0.3167689032\n0.5470000000;0.6882641431;0.3168455362\n0.5480000000;0.6881259930;0.3169600008\n0.5490000000;0.6879302802;0.3170362903\n0.5500000000;0.6877000299;0.3170883187\n0.5510000000;0.6874812922;0.3171490785\n0.5520000000;0.6873086045;0.3172142994\n0.5530000000;0.6871013792;0.3172636324\n0.5540000000;0.6869632290;0.3173871186\n0.5550000000;0.6868020538;0.3174713830\n0.5560000000;0.6866178536;0.3175535370\n0.5570000000;0.6863530658;0.3175984871\n0.5580000000;0.6861343280;0.3176783506\n0.5590000000;0.6859271028;0.3177500813\n0.5600000000;0.6857544150;0.3178243285\n0.5610000000;0.6855587023;0.3178676090\n0.5620000000;0.6853399645;0.3179359001\n0.5630000000;0.6851327393;0.3179892173\n0.5640000000;0.6848909765;0.3180248471\n0.5650000000;0.6845686261;0.3180553921\n0.5660000000;0.6843959384;0.3180942597\n0.5670000000;0.6842002256;0.3181496986\n0.5680000000;0.6839584628;0.3181752454\n0.5690000000;0.6836936750;0.3181866890\n0.5700000000;0.6833943497;0.3182042348\n0.5710000000;0.6831756119;0.3182371522\n0.5720000000;0.6827611614;0.3182898882\n0.5730000000;0.6826230112;0.3185297799\n0.5740000000;0.6824157860;0.3190003121\n0.5750000000;0.6822661233;0.3192052053\n0.5760000000;0.6820128480;0.3192793162\n0.5770000000;0.6817020101;0.3193231088\n0.5780000000;0.6814026847;0.3193654562\n0.5790000000;0.6811494094;0.3194277230\n0.5800000000;0.6809306716;0.3194786535\n0.5810000000;0.6805968087;0.3195239408\n0.5820000000;0.6801593332;0.3195309796\n0.5830000000;0.6798484953;0.3196010196\n0.5840000000;0.6795606825;0.3196664049\n0.5850000000;0.6792153070;0.3197013130\n0.5860000000;0.6789274942;0.3197443043\n0.5870000000;0.6786627064;0.3197981935\n0.5880000000;0.6784094311;0.3198488903\n0.5890000000;0.6780870807;0.3199035401\n0.5900000000;0.6778107803;0.3199643494\n0.5910000000;0.6775344800;0.3199921704\n0.5920000000;0.6772581796;0.3200792200\n0.5930000000;0.6769473418;0.3200907997\n0.5940000000;0.6765559163;0.3201148267\n0.5950000000;0.6762220534;0.3201835913\n0.5960000000;0.6759802906;0.3202698870\n0.5970000000;0.6755197900;0.3203172766\n0.5980000000;0.6751513896;0.3206326816\n0.5990000000;0.6747484516;0.3207956125\n0.6000000000;0.6743685386;0.3213149465\n0.6010000000;0.6739771131;0.3215835558\n0.6020000000;0.6734245124;0.3218361081\n0.6030000000;0.6731482121;0.3222927760\n0.6040000000;0.6727798117;0.3226285512\n0.6050000000;0.6723423361;0.3233183857\n0.6060000000;0.6718703230;0.3240206094\n0.6070000000;0.6713867974;0.3242753321\n0.6080000000;0.6708572218;0.3245284280\n0.6090000000;0.6702815961;0.3245753405\n0.6100000000;0.6698210955;0.3246564106\n0.6110000000;0.6693490825;0.3247483718\n0.6120000000;0.6689116069;0.3253247480\n0.6130000000;0.6682669061;0.3255635260\n0.6140000000;0.6678064056;0.3256332241\n0.6150000000;0.6672307799;0.3256706488\n0.6160000000;0.6665975916;0.3256763598\n0.6170000000;0.6660910410;0.3256835030\n0.6180000000;0.6655154153;0.3256825429\n0.6190000000;0.6648707145;0.3256073565\n0.6200000000;0.6645023140;0.3256141934\n0.6210000000;0.6638345882;0.3255882237\n0.6220000000;0.6631438374;0.3255141079\n0.6230000000;0.6625336741;0.3254978705\n0.6240000000;0.6619235109;0.3254337060\n0.6250000000;0.6612672976;0.3253799659\n0.6260000000;0.6605880592;0.3253203311\n0.6270000000;0.6598857959;0.3252695494\n0.6280000000;0.6592410951;0.3252064379\n0.6290000000;0.6585158067;0.3251422497\n0.6300000000;0.6578595934;0.3250713936\n0.6310000000;0.6570882549;0.3249786483\n0.6320000000;0.6563054040;0.3249133686\n0.6330000000;0.6554880155;0.3248364037\n0.6340000000;0.6548087771;0.3247443576\n0.6350000000;0.6540950013;0.3246869767\n0.6360000000;0.6532891253;0.3246097258\n0.6370000000;0.6524141742;0.3244775265\n0.6380000000;0.6515622482;0.3243881470\n0.6390000000;0.6507793972;0.3243199826\n0.6400000000;0.6500080588;0.3242108769\n0.6410000000;0.6490755451;0.3240527865\n0.6420000000;0.6480739564;0.3238971456\n0.6430000000;0.6471529553;0.3237292821\n0.6440000000;0.6464161544;0.3236477451\n0.6450000000;0.6456448159;0.3235786243\n0.6460000000;0.6446777647;0.3234485467\n0.6470000000;0.6437452511;0.3232906650\n0.6480000000;0.6428587875;0.3231687202\n0.6490000000;0.6421795492;0.3233474967\n0.6500000000;0.6412009855;0.3232632783\n0.6510000000;0.6403375469;0.3231749832\n0.6520000000;0.6393820082;0.3230286921\n0.6530000000;0.6384379821;0.3228916785\n0.6540000000;0.6374594184;0.3227406522\n0.6550000000;0.6364693422;0.3226173525\n0.6560000000;0.6354562409;0.3224801944\n0.6570000000;0.6345237273;0.3223780028\n0.6580000000;0.6332343257;0.3221430914\n0.6590000000;0.6322442495;0.3220052770\n0.6600000000;0.6309778729;0.3217508204\n0.6610000000;0.6299532592;0.3216172849\n0.6620000000;0.6288480578;0.3216769627\n0.6630000000;0.6277083189;0.3215901383\n0.6640000000;0.6265570675;0.3214914405\n0.6650000000;0.6254633787;0.3213459753\n0.6660000000;0.6246114526;0.3212769359\n0.6670000000;0.6234026387;0.3210677355\n0.6680000000;0.6222744123;0.3209090801\n0.6690000000;0.6211576984;0.3207654854\n0.6700000000;0.6199373719;0.3206633716\n0.6710000000;0.6188321706;0.3208885281\n0.6720000000;0.6176578941;0.3209463704\n0.6730000000;0.6163569800;0.3207270244\n0.6740000000;0.6151481661;0.3205358161\n0.6750000000;0.6138702770;0.3203792494\n0.6760000000;0.6126154130;0.3201648567\n0.6770000000;0.6114756741;0.3200120500\n0.6780000000;0.6104971104;0.3199085441\n0.6790000000;0.6092307338;0.3196885213\n0.6800000000;0.6078377196;0.3193936131\n0.6810000000;0.6065483180;0.3191272851\n0.6820000000;0.6052934540;0.3189248864\n0.6830000000;0.6038659022;0.3185882096\n0.6840000000;0.6024613755;0.3184235506\n0.6850000000;0.6013216366;0.3185188799\n0.6860000000;0.6000322350;0.3184106349\n0.6870000000;0.5986392208;0.3183151013\n0.6880000000;0.5971886441;0.3180675464\n0.6890000000;0.5958877300;0.3178658282\n0.6900000000;0.5945407658;0.3176252068\n0.6910000000;0.5931362391;0.3176857242\n0.6920000000;0.5916280997;0.3175397620\n0.6930000000;0.5901429854;0.3171973813\n0.6940000000;0.5884966959;0.3168615102\n0.6950000000;0.5870346066;0.3166552816\n0.6960000000;0.5855149548;0.3164171862\n0.6970000000;0.5838916903;0.3160866530\n0.6980000000;0.5823490134;0.3157888165\n0.6990000000;0.5807602864;0.3154412776\n0.7000000000;0.5791139969;0.3150810205\n0.7010000000;0.5777440077;0.3148009911\n0.7020000000;0.5765121687;0.3145836605\n0.7030000000;0.5750040294;0.3142601867\n0.7040000000;0.5733462273;0.3138873832\n0.7050000000;0.5717805254;0.3135578775\n0.7060000000;0.5701227234;0.3131667647\n0.7070000000;0.5684418963;0.3127676287\n0.7080000000;0.5669452695;0.3124647061\n0.7090000000;0.5652068799;0.3120947441\n0.7100000000;0.5634800028;0.3116622624\n0.7110000000;0.5620064010;0.3113865270\n0.7120000000;0.5602449863;0.3109500898\n0.7130000000;0.5587828970;0.3106626471\n0.7140000000;0.5571826575;0.3103092321\n0.7150000000;0.5553751928;0.3098927218\n0.7160000000;0.5538210034;0.3095903106\n0.7170000000;0.5521632014;0.3091888965\n0.7180000000;0.5505974995;0.3088557240\n0.7190000000;0.5490893601;0.3085397489\n0.7200000000;0.5476042458;0.3082356448\n0.7210000000;0.5457392185;0.3078261773\n0.7220000000;0.5440583915;0.3074590937\n0.7230000000;0.5421012641;0.3070142267\n0.7240000000;0.5402707743;0.3066172723\n0.7250000000;0.5385438972;0.3062795859\n0.7260000000;0.5369321452;0.3059759754\n0.7270000000;0.5352282932;0.3055884209\n0.7280000000;0.5336856163;0.3052594149\n0.7290000000;0.5318666390;0.3048452976\n0.7300000000;0.5300361493;0.3044691629\n0.7310000000;0.5284589349;0.3041706425\n0.7320000000;0.5269623080;0.3039113490\n0.7330000000;0.5253045060;0.3035982807\n0.7340000000;0.5236351915;0.3032913688\n0.7350000000;0.5219313394;0.3030663609\n0.7360000000;0.5202505123;0.3030181114\n0.7370000000;0.5185351477;0.3028210679\n0.7380000000;0.5169118832;0.3027013908\n0.7390000000;0.5153922314;0.3026214393\n0.7400000000;0.5136653542;0.3024498041\n0.7410000000;0.5120766273;0.3025191795\n0.7420000000;0.5103612627;0.3024314036\n0.7430000000;0.5088416108;0.3022897944\n0.7440000000;0.5070341461;0.3021645913\n0.7450000000;0.5054454192;0.3022026432\n0.7460000000;0.5037185421;0.3018703904\n0.7470000000;0.5021413276;0.3016118883\n0.7480000000;0.5005526007;0.3013223003\n0.7490000000;0.4989868988;0.3010725052\n0.7500000000;0.4974672469;0.3008724472\n0.7510000000;0.4956943197;0.3004885198\n0.7520000000;0.4942207179;0.3002342903\n0.7530000000;0.4924823283;0.2998471955\n0.7540000000;0.4908130137;0.2995426026\n0.7550000000;0.4890861366;0.2991802701\n0.7560000000;0.4874628721;0.2989599735\n0.7570000000;0.4859317078;0.2987718988\n0.7580000000;0.4844350809;0.2986232347\n0.7590000000;0.4826391287;0.2983376268\n0.7600000000;0.4809352766;0.2981585897\n0.7610000000;0.4791278119;0.2979012770\n0.7620000000;0.4775045474;0.2978300207\n0.7630000000;0.4758122079;0.2977472642\n0.7640000000;0.4745573438;0.2978568125\n0.7650000000;0.4727959292;0.2977258063\n0.7660000000;0.4711151021;0.2976881556\n0.7670000000;0.4694918376;0.2976997817\n0.7680000000;0.4679376482;0.2978143478\n0.7690000000;0.4666252216;0.2981763074\n0.7700000000;0.4651746448;0.2983600021\n0.7710000000;0.4637470931;0.2986218707\n0.7720000000;0.4621813912;0.2988565643\n0.7730000000;0.4610416523;0.2993138808\n0.7740000000;0.4596141005;0.2996322426\n0.7750000000;0.4584628491;0.3000663080\n0.7760000000;0.4573691603;0.3005439264\n0.7770000000;0.4561027837;0.3009823063\n0.7780000000;0.4548824572;0.3014871392\n0.7790000000;0.4537196933;0.3020162001\n0.7800000000;0.4526375170;0.3028041558\n0.7810000000;0.4513366029;0.3036457002\n0.7820000000;0.4502774516;0.3047221335\n0.7830000000;0.4489995625;0.3057175556\n0.7840000000;0.4479749488;0.3071240272\n0.7850000000;0.4467315972;0.3085559796\n0.7860000000;0.4455803458;0.3102102319\n0.7870000000;0.4444866570;0.3120070468\n0.7880000000;0.4434850683;0.3138299606\n0.7890000000;0.4424719670;0.3157756361\n0.7900000000;0.4415739909;0.3176454025\n0.7910000000;0.4405493772;0.3194053770\n0.7920000000;0.4394556883;0.3211185140\n0.7930000000;0.4384886371;0.3227331656\n0.7940000000;0.4375100734;0.3243656165\n0.7950000000;0.4365775598;0.3259668033\n0.7960000000;0.4353802583;0.3277889974\n0.7970000000;0.4343095945;0.3296141614\n0.7980000000;0.4332619557;0.3319865914\n0.7990000000;0.4322833920;0.3349479055\n0.8000000000;0.4313163409;0.3385687304\n0.8010000000;0.4303492897;0.3424830733\n0.8020000000;0.4295319012;0.3466473414\n0.8030000000;0.4286914876;0.3507464795\n0.8040000000;0.4278280491;0.3546940022\n0.8050000000;0.4267804103;0.3575727762\n0.8060000000;0.4257442840;0.3602209191\n0.8070000000;0.4248347954;0.3627908806\n0.8080000000;0.4236144689;0.3651229943\n0.8090000000;0.4226359052;0.3677793584\n0.8100000000;0.4216458290;0.3701738427\n0.8110000000;0.4207363404;0.3725989968\n0.8120000000;0.4198498768;0.3751491585\n0.8130000000;0.4188828256;0.3777120316\n0.8140000000;0.4178927494;0.3806602487\n0.8150000000;0.4170408234;0.3837963257\n0.8160000000;0.4160852847;0.3867315820\n0.8170000000;0.4150491584;0.3893809133\n0.8180000000;0.4139784946;0.3917827920\n0.8190000000;0.4127696806;0.3935070351\n0.8200000000;0.4116875043;0.3952953661\n0.8210000000;0.4104902029;0.3970689770\n0.8220000000;0.4093734890;0.3991088264\n0.8230000000;0.4080955999;0.4016360938\n0.8240000000;0.4067486358;0.4034048092\n0.8250000000;0.4054246966;0.4051588260\n0.8260000000;0.4042389077;0.4065557447\n0.8270000000;0.4028574060;0.4078295631\n0.8280000000;0.4015910294;0.4094441054\n0.8290000000;0.4003591904;0.4113458399\n0.8300000000;0.3989086137;0.4130802794\n0.8310000000;0.3976882872;0.4158420609\n0.8320000000;0.3963413230;0.4203386933\n0.8330000000;0.3947756211;0.4271584638\n0.8340000000;0.3934286570;0.4351601895\n0.8350000000;0.3921277429;0.4422530091\n0.8360000000;0.3906080910;0.4484996695\n0.8370000000;0.3890078515;0.4533988138\n0.8380000000;0.3875572748;0.4574907589\n0.8390000000;0.3862678732;0.4610247743\n0.8400000000;0.3848633465;0.4637966675\n0.8410000000;0.3834473072;0.4656758571\n0.8420000000;0.3819276554;0.4673325069\n0.8430000000;0.3805001036;0.4692811200\n0.8440000000;0.3792567521;0.4711999199\n0.8450000000;0.3778982754;0.4719151200\n0.8460000000;0.3763095485;0.4724715609\n0.8470000000;0.3749856094;0.4733339146\n0.8480000000;0.3733393198;0.4736995866\n0.8490000000;0.3720268932;0.4742372434\n0.8500000000;0.3706684166;0.4745250623\n0.8510000000;0.3693444774;0.4746700598\n0.8520000000;0.3676981879;0.4745412674\n0.8530000000;0.3661785361;0.4745188721\n0.8540000000;0.3646013216;0.4744782537\n0.8550000000;0.3631737699;0.4745614827\n0.8560000000;0.3615620179;0.4742317856\n0.8570000000;0.3600999286;0.4739816948\n0.8580000000;0.3584191016;0.4736137522\n0.8590000000;0.3570951624;0.4736223298\n0.8600000000;0.3551955976;0.4732055215\n0.8610000000;0.3531924202;0.4726681663\n0.8620000000;0.3510971426;0.4721409441\n0.8630000000;0.3488291773;0.4714925931\n0.8640000000;0.3465727246;0.4707648521\n0.8650000000;0.3441090465;0.4698355811\n0.8660000000;0.3415762934;0.4688537025\n0.8670000000;0.3391241279;0.4682924503\n0.8680000000;0.3368907002;0.4679908522\n0.8690000000;0.3343234095;0.4677006329\n0.8700000000;0.3321475444;0.4674043353\n0.8710000000;0.3303515922;0.4675204067\n0.8720000000;0.3286707651;0.4673574960\n0.8730000000;0.3268517879;0.4672108217\n0.8740000000;0.3250903732;0.4668672707\n0.8750000000;0.3234325712;0.4668018078\n0.8760000000;0.3218093067;0.4666299412\n0.8770000000;0.3203357049;0.4667919274\n0.8780000000;0.3189196657;0.4670240744\n0.8790000000;0.3171812760;0.4669265316\n0.8800000000;0.3155004490;0.4670882193\n0.8810000000;0.3139117220;0.4675892582\n0.8820000000;0.3122308950;0.4679100100\n0.8830000000;0.3103658677;0.4682251594\n0.8840000000;0.3087771408;0.4689887916\n0.8850000000;0.3068430384;0.4693586447\n0.8860000000;0.3053579241;0.4700086829\n0.8870000000;0.3037116345;0.4705179425\n0.8880000000;0.3019041698;0.4709431794\n0.8890000000;0.3004651056;0.4711265953\n0.8900000000;0.2988418411;0.4711412807\n0.8910000000;0.2971379890;0.4710541685\n0.8920000000;0.2954686744;0.4708828710\n0.8930000000;0.2941447353;0.4707334598\n0.8940000000;0.2926941586;0.4705446873\n0.8950000000;0.2913356819;0.4703367779\n0.8960000000;0.2898851051;0.4698550130\n0.8970000000;0.2879855403;0.4691045476\n0.8980000000;0.2863277383;0.4685922074\n0.8990000000;0.2846929612;0.4680951750\n0.9000000000;0.2830581842;0.4678515023\n0.9010000000;0.2814694573;0.4679413566\n0.9020000000;0.2800419056;0.4681485758\n0.9030000000;0.2787179664;0.4683328820\n0.9040000000;0.2775667150;0.4690113994\n0.9050000000;0.2764039511;0.4691823654\n0.9060000000;0.2753908499;0.4693429082\n0.9070000000;0.2745043863;0.4695919332\n0.9080000000;0.2736294352;0.4697790252\n0.9090000000;0.2727314591;0.4701329629\n0.9100000000;0.2721558334;0.4706819313\n0.9110000000;0.2713384449;0.4709090909\n0.9120000000;0.2707513067;0.4713592817\n0.9130000000;0.2701871935;0.4720897954\n0.9140000000;0.2696345928;0.4726740666\n0.9150000000;0.2691856048;0.4735594937\n0.9160000000;0.2687826668;0.4744746576\n0.9170000000;0.2683451912;0.4755483015\n0.9180000000;0.2680458659;0.4767199017\n0.9190000000;0.2678386406;0.4782313764\n0.9200000000;0.2676199028;0.4798134082\n0.9210000000;0.2672975524;0.4811821272\n0.9220000000;0.2669867146;0.4828340030\n0.9230000000;0.2665607515;0.4842109666\n0.9240000000;0.2662153761;0.4860638164\n0.9250000000;0.2658469757;0.4880069317\n0.9260000000;0.2654900877;0.4897114098\n0.9270000000;0.2652713500;0.4916780471\n0.9280000000;0.2650986622;0.4938978616\n0.9290000000;0.2649374870;0.4960125873\n0.9300000000;0.2647763119;0.4979539697\n0.9310000000;0.2646957243;0.5001522732\n0.9320000000;0.2645805991;0.5022619490\n0.9330000000;0.2645345491;0.5040582635\n0.9340000000;0.2645230365;0.5057782474\n0.9350000000;0.2645115240;0.5074092887\n0.9360000000;0.2644769865;0.5089728820\n0.9370000000;0.2644194239;0.5106496509\n0.9380000000;0.2643388363;0.5123622082\n0.9390000000;0.2641661486;0.5135516215\n0.9400000000;0.2639589233;0.5152243770\n0.9410000000;0.2637056480;0.5174509228\n0.9420000000;0.2634869103;0.5199227624\n0.9430000000;0.2633142226;0.5239022379\n0.9440000000;0.2632451475;0.5285836473\n0.9450000000;0.2631645599;0.5341761503\n0.9460000000;0.2629803597;0.5401002506\n0.9470000000;0.2628997721;0.5472322070\n0.9480000000;0.2627961594;0.5539458358\n0.9490000000;0.2627501094;0.5610511566\n0.9500000000;0.2626810343;0.5679119894\n0.9510000000;0.2626464967;0.5743705942\n0.9520000000;0.2625774217;0.5803267009\n0.9530000000;0.2625198591;0.5849772966\n0.9540000000;0.2624277590;0.5885466422\n0.9550000000;0.2623471714;0.5914812988\n0.9560000000;0.2622665838;0.5939667310\n0.9570000000;0.2619442334;0.5961745054\n0.9580000000;0.2614837328;0.5978678600\n0.9590000000;0.2607929820;0.5991272150\n0.9600000000;0.2605742442;0.6011846264\n0.9610000000;0.2603094564;0.6027831836\n0.9620000000;0.2600561811;0.6048572806\n0.9630000000;0.2597453432;0.6069459016\n0.9640000000;0.2595726555;0.6090820682\n0.9650000000;0.2592963551;0.6114232972\n0.9660000000;0.2586056043;0.6149024117\n0.9670000000;0.2580990537;0.6198230578\n0.9680000000;0.2572356151;0.6246226099\n0.9690000000;0.2562225139;0.6306245041\n0.9700000000;0.2557044507;0.6386141461\n0.9710000000;0.2551058000;0.6470914613\n0.9720000000;0.2546683245;0.6562537083\n0.9730000000;0.2537703484;0.6724116893\n0.9740000000;0.2524809468;0.6930101751\n0.9750000000;0.2515254081;0.7139402653\n0.9760000000;0.2500287813;0.7209533926\n0.9770000000;0.2490041675;0.7375366569\n0.9780000000;0.2474845157;0.7670377507\n0.9790000000;0.2444336994;0.8126148194\n0.9800000000;0.2427528724;0.8417228853\n0.9810000000;0.2405539822;0.8828748891\n0.9820000000;0.2373189657;0.9166259060\n0.9830000000;0.2270613157;0.9548315259\n0.9840000000;0.2149156133;0.9551291891\n0.9850000000;0.1831295618;0.9699390244\n0.9860000000;0.0680850084;0.9998309383\n0.9870000000;0.0112592388;1.0000000000\n0.9880000000;0.0000000000;1.0000000000\n0.9890000000;0.0000000000;1.0000000000\n0.9900000000;0.0000000000;1.0000000000\n0.9910000000;0.0000000000;1.0000000000\n0.9920000000;0.0000000000;1.0000000000\n0.9930000000;0.0000000000;1.0000000000\n0.9940000000;0.0000000000;1.0000000000\n0.9950000000;0.0000000000;1.0000000000\n0.9960000000;0.0000000000;1.0000000000\n0.9970000000;0.0000000000;1.0000000000\n0.9980000000;0.0000000000;1.0000000000\n0.9990000000;0.0000000000;1.0000000000\n1.0000000000;0.0000000000;1.0000000000\n"}]},"apps":[],"jobName":"paragraph_1504618188396_2135834132","id":"20170905-152948_1307919699","dateCreated":"2017-09-05T15:29:48+0200","dateStarted":"2018-01-17T13:45:33+0100","dateFinished":"2018-01-17T18:11:54+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:83"},{"text":"%kryo-spark\nnet = null\nnet","user":"anonymous","dateUpdated":"2018-01-16T12:57:16+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"net: org.deeplearning4j.nn.multilayer.MultiLayerNetwork = null\nres29: org.deeplearning4j.nn.multilayer.MultiLayerNetwork = null\n"}]},"apps":[],"jobName":"paragraph_1515760172519_1288276544","id":"20180112-132932_514488730","dateCreated":"2018-01-12T13:29:32+0100","dateStarted":"2018-01-16T13:26:15+0100","dateFinished":"2018-01-16T19:13:46+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:84"},{"text":"%kryo-spark\neval.setPrCurve(null)\neval.setAuprc(null)\neval.setRocCurve(null)\neval.setAuc(null)\neval.calculateAUC\neval.calculateAUCPR","user":"anonymous","dateUpdated":"2018-01-16T12:57:16+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res34: Double = 0.856827342512365\nres35: Double = 0.36383326073266054\n"}]},"apps":[],"jobName":"paragraph_1515759951856_-810249581","id":"20180112-132551_2085321048","dateCreated":"2018-01-12T13:25:51+0100","dateStarted":"2018-01-16T19:13:46+0100","dateFinished":"2018-01-16T19:13:49+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:85"},{"text":"%md\n\n## Write classification to Solr","user":"anonymous","dateUpdated":"2018-01-17T10:08:14+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Write classification to Solr</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1508831572376_2092673489","id":"20171024-095252_686339792","dateCreated":"2017-10-24T09:52:52+0200","dateStarted":"2018-01-17T10:08:14+0100","dateFinished":"2018-01-17T10:08:15+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:86"},{"text":"%kryo-spark\nval service = new MetricsServiceImpl.Factory(sqlc).getInstance(\"192.168.1.100:2181\", \"featuredata2\")\nval ds = sqlc.createDataset(predictDataset(net, testRDD)) (Encoders.bean(classOf[Counter]))\nservice.putCounters(ds, \"nn-sequence-classification\", org.apache.spark.sql.SaveMode.Ignore)","user":"anonymous","dateUpdated":"2018-01-16T12:57:16+0100","config":{"colWidth":12,"enabled":false,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"service: de.qaware.mlwb.api.MetricsService = de.qaware.mlwb.impl.sparksolr.MetricsServiceImpl@4ceb2c8f\nds: org.apache.spark.sql.Dataset[de.qaware.mlwb.api.Counter] = [metric: struct<host: string, name: string ... 1 more field>, valuePoints: array<struct<date:timestamp,value:double>>]\n"}]},"apps":[],"jobName":"paragraph_1504166349237_-1501011313","id":"20170831-095909_1163597844","dateCreated":"2017-08-31T09:59:09+0200","dateStarted":"2017-12-18T17:06:51+0100","dateFinished":"2017-12-18T20:54:26+0100","status":"ABORT","progressUpdateIntervalMs":500,"$$hashKey":"object:87"},{"text":"%kryo-spark\ndef export(net: MultiLayerNetwork, seq: RDD[Sequence]): String = {\n    net.rnnClearPreviousState\n    val s = seq.filter(_.series.getLabels.sumNumber.doubleValue > 0).first\n    val output = net.rnnTimeStep(s.series.getFeatures)\n    \n    val eval = evalNetwork(net, Array(s), () => new SequenceEvaluation(100))\n    println(eval.confusionByThreshold.mkString(\",\"))\n    println(eval)\n    \n    val labelStr = for (i <- 0 until s.series.getLabels.size(2)) yield {\n        s.series.getLabels.getDouble(0, 1, i) + \";\"\n    }\n    val outStr = for (i <- 0 until output.size(2)) yield {\n        output.getDouble(0, 1, i) + \";\"\n    }\n    \n    labelStr.reduce(_ + _) + \"\\n\" + outStr.reduce(_ + _)\n}\n\nval exportString = export (net, testRDD)\nsc.parallelize(List(exportString)).coalesce(1).saveAsTextFile(\"/anomaly-detection-ml/results/sequence.csv\")","user":"anonymous","dateUpdated":"2018-01-16T12:57:16+0100","config":{"colWidth":12,"enabled":false,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"export: (net: org.deeplearning4j.nn.multilayer.MultiLayerNetwork, seq: org.apache.spark.rdd.RDD[Sequence])String\nlabels: 57587,2, preds: 57587,2\n(0.8260869565217391,475.0,0.17391304347826086)\nPrediction took 26625, eval took 2787 for 57587\n(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,0.0,1.0),(0.0,1.0,1.0),(0.0,4.0,1.0),(0.0,3.0,1.0),(0.0,6.0,1.0),(0.0,5.0,1.0),(0.0,15.0,1.0),(0.0,18.0,1.0),(0.0,50.0,1.0),(0.0,71.0,1.0),(0.0,106.0,1.0),(0.08695652173913043,341.0,0.9130434782608696),(0.13043478260869565,403.0,0.8695652173913043),(0.13043478260869565,210.0,0.8695652173913043),(0.2608695652173913,232.0,0.7391304347826086),(0.391304347826087,244.0,0.6086956521739131),(0.6521739130434783,262.0,0.34782608695652173),(0.6521739130434783,299.0,0.34782608695652173),(0.6956521739130435,323.0,0.30434782608695654),(0.7391304347826086,373.0,0.26086956521739135),(0.7391304347826086,417.0,0.26086956521739135),(0.782608695652174,442.0,0.21739130434782605),(0.782608695652174,463.0,0.21739130434782605),(0.8260869565217391,517.0,0.17391304347826086),(0.8260869565217391,615.0,0.17391304347826086),(0.8260869565217391,553.0,0.17391304347826086),(0.8260869565217391,475.0,0.17391304347826086),(0.9130434782608695,490.0,0.08695652173913049),(0.9565217391304348,393.0,0.04347826086956519),(0.9565217391304348,302.0,0.04347826086956519),(1.0,293.0,0.0),(1.0,309.0,0.0),(1.0,349.04347826086956,0.0),(1.0,356.0869565217391,0.0),(1.0,337.1304347826087,0.0),(1.0,326.1304347826087,0.0),(1.0,305.1304347826087,0.0),(1.0,303.0,0.0),(1.0,341.0,0.0),(1.0,511.0,0.0),(1.0,604.0,0.0),(1.0,484.0,0.0),(1.0,375.0,0.0),(1.0,310.0,0.0),(1.0,207.0,0.0),(1.0,177.0,0.0),(1.0,142.0,0.0),(1.0,136.0,0.0),(1.0,120.0,0.0),(1.0,77.0,0.0),(1.0,49.0,0.0),(1.0,27.0,0.0),(1.0,6.0,0.0),(1.0,2.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0),(1.0,1.0,0.0)\nAuPRC: [0.055883986618768366]\nexportString: String =\n0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0...."}]},"apps":[],"jobName":"paragraph_1512466208323_810765083","id":"20171205-103008_2136962372","dateCreated":"2017-12-05T10:30:08+0100","dateStarted":"2017-12-05T15:00:50+0100","dateFinished":"2017-12-05T15:02:17+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:88"},{"user":"anonymous","dateUpdated":"2018-01-16T12:57:16+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1512482628144_-1408628708","id":"20171205-150348_1411809448","dateCreated":"2017-12-05T15:03:48+0100","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:89"}],"name":"AnomalyDetectionML/ML/DL4J-LSTMs","id":"2CRY3HDVB","angularObjects":{"2CZU9K4SP:shared_process":[],"2D18HK2TW:shared_process":[],"2D15EVSM5:shared_process":[],"2D4K6GGH4:shared_process":[],"2D2FQENTY:shared_process":[],"2CYJWH63V:shared_process":[],"2CY5C8M4U:shared_process":[],"2D2NZHKM4:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}