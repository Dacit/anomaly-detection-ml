{"paragraphs":[{"text":"%kryo-spark.dep\n\nz.reset()\nz.addRepo(\"Spark Packages Repo\").url(\"https://dl.bintray.com/spark-packages/maven\")\n\nz.addRepo(\"qaware-internal-snapshots\").url(\"https://www.qaware.de/nexus/content/repositories/qaware-internal-snapshots/\").username(\"f.huch\").password(\"\")\nz.load(\"de.qaware.mlwb:mlwb-impl:1.2-SNAPSHOT\")\n\nz.load(\"org.vegas-viz:vegas_2.11:0.3.11\")\nz.load(\"org.vegas-viz:vegas-spark_2.11:0.3.11\")\nz.load(\"sramirez:spark-infotheoretic-feature-selection:1.4.0\")\nz.load(\"org.nd4j:nd4j-native:0.9.1\")\nz.load(\"org.deeplearning4j:dl4j-spark_2.11:0.9.1_spark_2\")\nz.load(\"org.nd4j:nd4j-kryo_2.11:0.9.1\")\nz.load(\"org.datavec:datavec-api:0.9.1\")\nz.load(\"org.apache.mahout:mahout-spark_2.10:0.13.0\")\nz.load(\"org.apache.commons:commons-math3:3.6.1\")\n\nz.fetch","user":"anonymous","dateUpdated":"2018-01-19T09:19:42+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: java.util.List[java.io.File] = [/opt/zeppelin/local-repo/de/qaware/mlwb/mlwb-impl/1.2-SNAPSHOT/mlwb-impl-1.2-SNAPSHOT.jar, /opt/zeppelin/local-repo/de/qaware/mlwb/mlwb-api/1.2-SNAPSHOT/mlwb-api-1.2-SNAPSHOT.jar, /opt/zeppelin/local-repo/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar, /opt/zeppelin/local-repo/de/qaware/mlwb/mlwb-dt/1.2-SNAPSHOT/mlwb-dt-1.2-SNAPSHOT.jar, /opt/zeppelin/local-repo/org/apache/solr/solr-solrj/6.5.1/solr-solrj-6.5.1.jar, /opt/zeppelin/local-repo/org/apache/httpcomponents/httpclient/4.4.1/httpclient-4.4.1.jar, /opt/zeppelin/local-repo/org/apache/httpcomponents/httpcore/4.4.1/httpcore-4.4.1.jar, /opt/zeppelin/local-repo/org/apache/httpcomponents/httpmime/4.4.1/httpmime-4.4.1.jar, /opt/zeppelin/local-repo/org/apache/zookeeper/zookeeper/3.4.6/zoo..."}]},"apps":[],"jobName":"paragraph_1500453626801_1014378037","id":"20170719-104026_1206247333","dateCreated":"2017-07-19T10:40:26+0200","dateStarted":"2018-01-19T09:19:42+0100","dateFinished":"2018-01-19T09:19:53+0100","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:63"},{"text":"%kryo-spark\nprintln(sc)","user":"anonymous","dateUpdated":"2018-01-19T09:19:47+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"org.apache.spark.SparkContext@27db50d\n"}]},"apps":[],"jobName":"paragraph_1513595973265_-122558446","id":"20171218-121933_1452704461","dateCreated":"2017-12-18T12:19:33+0100","dateStarted":"2018-01-19T09:19:47+0100","dateFinished":"2018-01-19T09:20:10+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64"},{"text":"%md\n\n# Transformation\n1. Create List of Features\n2. Flatmap to (system, metric, timestamp, value)\n3. Group by timestamp\n4. Create feature vectors by group\n","user":"anonymous","dateUpdated":"2017-12-18T12:18:10+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Transformation</h1>\n<ol>\n  <li>Create List of Features</li>\n  <li>Flatmap to (system, metric, timestamp, value)</li>\n  <li>Group by timestamp</li>\n  <li>Create feature vectors by group</li>\n</ol>\n</div>"}]},"apps":[],"jobName":"paragraph_1500464625400_-1481799045","id":"20170719-134345_1790601146","dateCreated":"2017-07-19T13:43:45+0200","dateStarted":"2017-12-18T12:18:10+0100","dateFinished":"2017-12-18T12:18:10+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:65"},{"text":"%kryo-spark\nimport scala.collection.mutable.ListBuffer\nimport org.apache.spark.sql.Encoders\nimport org.apache.spark.ml.feature._\nimport de.qaware.mlwb.api.Counter\nimport org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.ml.linalg.Vector\nimport collection.JavaConverters._\nimport java.sql.Timestamp\nimport de.qaware.mlwb.api._\nimport de.qaware.mlwb.impl.sparksolr.MetricsServiceImpl\nimport org.apache.spark.storage.StorageLevel\n\nval service = new MetricsServiceImpl.Factory(sqlc).getInstance(\"192.168.1.100:2181\", \"featuredata\")","user":"anonymous","dateUpdated":"2018-01-19T09:19:48+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import scala.collection.mutable.ListBuffer\nimport org.apache.spark.sql.Encoders\nimport org.apache.spark.ml.feature._\nimport de.qaware.mlwb.api.Counter\nimport org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.ml.linalg.Vector\nimport collection.JavaConverters._\nimport java.sql.Timestamp\nimport de.qaware.mlwb.api._\nimport de.qaware.mlwb.impl.sparksolr.MetricsServiceImpl\nimport org.apache.spark.storage.StorageLevel\nservice: de.qaware.mlwb.api.MetricsService = de.qaware.mlwb.impl.sparksolr.MetricsServiceImpl@19ddfcf0\n"}]},"apps":[],"jobName":"paragraph_1501064360657_231971684","id":"20170726-121920_619881831","dateCreated":"2017-07-26T12:19:20+0200","dateStarted":"2018-01-19T09:19:54+0100","dateFinished":"2018-01-19T09:20:13+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:66"},{"text":"%kryo-spark\nval incompleteFeatures = service.getMetrics(new QueryMetricContext.Builder().build())\n    .map(_._1)(Encoders.bean(classOf[Metric]))\n    .groupByKey(_.getName)\n    .mapGroups((k, xs) => Tuple2(k, xs.size))\n    .filter(x => x._2 != 20 && x._2 != 10)\n    .collect","user":"anonymous","dateUpdated":"2017-12-18T12:18:11+0100","config":{"colWidth":12,"enabled":false,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nincompleteFeatures: Array[(String, Int)] = Array()\n"}]},"apps":[],"jobName":"paragraph_1501064375944_1352006380","id":"20170726-121935_875761720","dateCreated":"2017-07-26T12:19:35+0200","dateStarted":"2017-11-27T11:30:07+0100","dateFinished":"2017-11-27T11:30:51+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:67"},{"text":"%kryo-spark\nval featureList = service.getMetrics(new QueryMetricContext.Builder().withSeries(\"featuredata\").build())\n    .map(_._1.getName)\n    .distinct\n    .collectAsList\nval numFeatures = featureList.size\n\nval dataset = service.getCounters(new QueryMetricContext.Builder().withSeries(\"featuredata\").withStart(Timestamp.valueOf(\"2014-11-29 00:00:00\")).withEnd(Timestamp.valueOf(\"2015-10-03 00:00:00\")).build(), Granularity.MINUTE, AggregationType.AVG)\n\nval featureVectors = dataset\n    .flatMap(c => {\n        val host = c.getMetric.getHost\n        val proc = c.getMetric.getProcs\n        val index = featureList.indexOf(c.getMetric.getName)\n        if (proc == \"global\") {\n            // add to each for grouping\n            c.getValuePoints.asScala.map(vp => Tuple3(Tuple3(host, \"wls1\", vp.getDate), index, vp.getValue)) ++ \n            c.getValuePoints.asScala.map(vp => Tuple3(Tuple3(host, \"wls2\", vp.getDate), index, vp.getValue))\n        } else {\n            c.getValuePoints.asScala.map(vp => Tuple3(Tuple3(host, proc, vp.getDate), index, vp.getValue))\n        }\n    })\n    .groupByKey(_._1)\n    .mapGroups((k, vs) => {\n        val vectorSeq = vs.toSeq.sortBy(_._2)\n        \n        if (vectorSeq.size == numFeatures){\n            (k._1, k._2, k._3, Vectors.dense(vectorSeq.map(_._3).toArray))\n        } else if (vectorSeq.size < numFeatures) {\n            println(\"Missing: \" + ((0 until featureList.size).toSet -- vectorSeq.map(_._2).toSet).mkString(\",\"))\n            (k._1, k._2, k._3, Vectors.zeros(numFeatures))\n        } else {\n            println(\"Too many: \" + vectorSeq.map(_._2).mkString(\",\"))\n            (k._1, k._2, k._3, Vectors.zeros(numFeatures))\n        }\n    }).filter(_._4 != Vectors.zeros(numFeatures))","user":"anonymous","dateUpdated":"2018-01-19T09:19:51+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"featureList: java.util.List[String] = [Prepared statement cache hit rate : ((MXBean(com.bea:Name=source06,Type=JDBCDataSourceRuntime).PrepStmtCacheHitCount / MXBean(com.bea:Name=source06,Type=JDBCDataSourceRuntime).PrepStmtCacheMissCount)), Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed / MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max)), Active connections : (MXBean(com.bea:Name=source04,Type=JDBCConnectionPoolRuntime).ActiveConnectionsCurrentCount), Available db connection activity : (d/dx (MXBean(com.bea:Name=source02,Type=JDBCDataSourceRuntime).NumAvailable)), Active connections : (MXBean(com.bea:Name=source03,Type=JDBCConnectionPoolRuntime).ActiveConnectionsCurrentCount), DB connection started : (incld/dx (MXBean(com.bea:Name=so...numFeatures: Int = 231\ndataset: org.apache.spark.sql.Dataset[de.qaware.mlwb.api.Counter] = [metric: struct<host: string, name: string ... 1 more field>, valuePoints: array<struct<date:timestamp,value:double>>]\nfeatureVectors: org.apache.spark.sql.Dataset[(String, String, java.sql.Timestamp, org.apache.spark.ml.linalg.Vector)] = [_1: string, _2: string ... 2 more fields]\n"}]},"apps":[],"jobName":"paragraph_1500453637894_-1786978704","id":"20170719-104037_312019872","dateCreated":"2017-07-19T10:40:37+0200","dateStarted":"2018-01-19T09:20:11+0100","dateFinished":"2018-01-19T09:20:48+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:68"},{"text":"%kryo-spark\nservice.getMetrics(new QueryMetricContext.Builder().withSeries(\"featuredata\").build())\n    .map(_._1.getName)\n    .distinct\n    .collectAsList\n    .asScala\n    .foreach(println(_))\n","user":"anonymous","dateUpdated":"2018-01-19T09:19:57+0100","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":182,"optionOpen":false}}},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Prepared statement cache hit rate : ((MXBean(com.bea:Name=source06,Type=JDBCDataSourceRuntime).PrepStmtCacheHitCount / MXBean(com.bea:Name=source06,Type=JDBCDataSourceRuntime).PrepStmtCacheMissCount))\nMemory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed / MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))\nActive connections : (MXBean(com.bea:Name=source04,Type=JDBCConnectionPoolRuntime).ActiveConnectionsCurrentCount)\nAvailable db connection activity : (d/dx (MXBean(com.bea:Name=source02,Type=JDBCDataSourceRuntime).NumAvailable))\nDB connection started : (incld/dx (MXBean(com.bea:Name=source02,Type=JDBCDataSourceRuntime).ConnectionsTotalCount))\nActive connections : (MXBean(com.bea:Name=source03,Type=JDBCConnectionPoolRuntime).ActiveConnectionsCurrentCount)\nHeap usage activity : (d/dx (MXBean(java.lang:type=Memory).HeapMemoryUsage.used))\nConnection delay : (MXBean(com.bea:Name=source10,Type=JDBCDataSourceRuntime).ConnectionDelayTime)\nStuck threads : (MXBean(com.bea:Name=ThreadPoolRuntime,Type=ThreadPoolRuntime).StuckThreadCount)\nDB connection started : (incld/dx (MXBean(com.bea:Name=source09,Type=JDBCConnectionPoolRuntime).ConnectionsTotalCount))\nStuck threads : (MXBean(com.bea:Name=DataRetirementWorkManager,Type=WorkManagerRuntime).StuckThreadCount)\nReserve request activity : (incld/dx (MXBean(com.bea:Name=source02,Type=JDBCDataSourceRuntime).ReserveRequestCount))\nConnection delay : (MXBean(com.bea:Name=source06,Type=JDBCDataSourceRuntime).ConnectionDelayTime)\nActive connections : (MXBean(com.bea:Name=source01,Type=JDBCDataSourceRuntime).ActiveConnectionsCurrentCount)\nMemory space activity : (d/dx ((MXBean(java.lang:name=PS Old Gen,type=MemoryPool).Usage.committed / MXBean(java.lang:name=PS Old Gen,type=MemoryPool).Usage.max)))\nActive connections : (MXBean(com.bea:Name=source08,Type=JDBCConnectionPoolRuntime).ActiveConnectionsCurrentCount)\nRel. heap committed : ((MXBean(java.lang:type=Memory).HeapMemoryUsage.committed / MXBean(java.lang:type=Memory).HeapMemoryUsage.max))\nActive connections : (MXBean(com.bea:Name=source05,Type=JDBCConnectionPoolRuntime).ActiveConnectionsCurrentCount)\nDB connection started : (incld/dx (MXBean(com.bea:Name=source01,Type=JDBCConnectionPoolRuntime).ConnectionsTotalCount))\nDB connection started : (incld/dx (MXBean(com.bea:Name=source03,Type=JDBCConnectionPoolRuntime).ConnectionsTotalCount))\nPrepared statement cache hit rate : ((MXBean(com.bea:Name=source01,Type=JDBCDataSourceRuntime).PrepStmtCacheHitCount / MXBean(com.bea:Name=source01,Type=JDBCDataSourceRuntime).PrepStmtCacheMissCount))\nRel. nonHeap usage : ((MXBean(java.lang:type=Memory).NonHeapMemoryUsage.used / MXBean(java.lang:type=Memory).NonHeapMemoryUsage.max))\nConnection delay : (MXBean(com.bea:Name=source03,Type=JDBCDataSourceRuntime).ConnectionDelayTime)\nReserve request activity : (incld/dx (MXBean(com.bea:Name=source08,Type=JDBCDataSourceRuntime).ReserveRequestCount))\nRel. Swap Usage : ((\\Swap\\used / \\Swap\\total))\nFailing reserve requests : (incld/dx (MXBean(com.bea:Name=source04,Type=JDBCDataSourceRuntime).FailedReserveRequestCount))\nFailing reserve requests : (incld/dx (MXBean(com.bea:Name=source06,Type=JDBCDataSourceRuntime).FailedReserveRequestCount))\nFailing reserve requests : (incld/dx (MXBean(com.bea:Name=source08,Type=JDBCDataSourceRuntime).FailedReserveRequestCount))\nStuck threads : (MXBean(com.bea:Name=ClusterMessaging,Type=WorkManagerRuntime).StuckThreadCount)\nStuck threads : (MXBean(com.bea:ApplicationRuntime=batchModules2,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nActive connections : (MXBean(com.bea:Name=source05,Type=JDBCDataSourceRuntime).ActiveConnectionsCurrentCount)\nReserve request activity : (incld/dx (MXBean(com.bea:Name=source10,Type=JDBCDataSourceRuntime).ReserveRequestCount))\nMemory space usage : ((MXBean(java.lang:name=PS Perm Gen,type=MemoryPool).Usage.committed / MXBean(java.lang:name=PS Perm Gen,type=MemoryPool).Usage.max))\nPhysical mem activity : (d/dx (MXBean(java.lang:type=OperatingSystem).FreePhysicalMemorySize))\nStuck threads : (MXBean(com.bea:ApplicationRuntime=source02,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nReserve request activity : (incld/dx (MXBean(com.bea:Name=source05,Type=JDBCDataSourceRuntime).ReserveRequestCount))\nSuccessful wait for connection : (incld/dx (MXBean(com.bea:Name=source02,Type=JDBCDataSourceRuntime).WaitingForConnectionSuccessTotal))\nRel. unavailable connections : ((MXBean(com.bea:Name=source02,Type=JDBCConnectionPoolRuntime).NumUnavailable / MXBean(com.bea:Name=source02,Type=JDBCConnectionPoolRuntime).CurrCapacity))\nMemory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.used / MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))\nRel. nonHeap committed : ((MXBean(java.lang:type=Memory).NonHeapMemoryUsage.committed / MXBean(java.lang:type=Memory).NonHeapMemoryUsage.max))\nConnection delay : (MXBean(com.bea:Name=source09,Type=JDBCDataSourceRuntime).ConnectionDelayTime)\nAvailable db connection activity : (d/dx (MXBean(com.bea:Name=source05,Type=JDBCDataSourceRuntime).NumAvailable))\nProcess CPU : (MXBean(java.lang:type=OperatingSystem).ProcessCpuLoad)\nClass loading activity : (d/dx (MXBean(java.lang:type=ClassLoading).LoadedClassCount))\nConnection delay : (MXBean(com.bea:Name=source09,Type=JDBCConnectionPoolRuntime).ConnectionDelayTime)\nMemory space usage : ((MXBean(java.lang:name=PS Survivor Space,type=MemoryPool).Usage.used / MXBean(java.lang:name=PS Survivor Space,type=MemoryPool).Usage.max))\nAvailable db connection activity : (d/dx (MXBean(com.bea:Name=source04,Type=JDBCConnectionPoolRuntime).NumAvailable))\nGC activity : (incld/dx (MXBean(java.lang:name=PS Scavenge,type=GarbageCollector).CollectionCount))\nConnection delay : (MXBean(com.bea:Name=source02,Type=JDBCConnectionPoolRuntime).ConnectionDelayTime)\nFailed wait for connection : (incld/dx (MXBean(com.bea:Name=source01,Type=JDBCDataSourceRuntime).WaitingForConnectionFailureTotal))\nRel. unavailable connections : ((MXBean(com.bea:Name=source01,Type=JDBCConnectionPoolRuntime).NumUnavailable / MXBean(com.bea:Name=source01,Type=JDBCConnectionPoolRuntime).CurrCapacity))\nPrepared statement cache hit rate : ((MXBean(com.bea:Name=source04,Type=JDBCDataSourceRuntime).PrepStmtCacheHitCount / MXBean(com.bea:Name=source04,Type=JDBCDataSourceRuntime).PrepStmtCacheMissCount))\nStuck threads : (MXBean(com.bea:Name=weblogic.logging.DomainLogBroadcasterClient,Type=WorkManagerRuntime).StuckThreadCount)\nDB connection started : (incld/dx (MXBean(com.bea:Name=source10,Type=JDBCDataSourceRuntime).ConnectionsTotalCount))\nStuck threads : (MXBean(com.bea:Name=JmsDispatcher,Type=WorkManagerRuntime).StuckThreadCount)\nDB connection started : (incld/dx (MXBean(com.bea:Name=source04,Type=JDBCDataSourceRuntime).ConnectionsTotalCount))\nAvailable db connection activity : (d/dx (MXBean(com.bea:Name=source03,Type=JDBCConnectionPoolRuntime).NumAvailable))\nDB connection started : (incld/dx (MXBean(com.bea:Name=source02,Type=JDBCConnectionPoolRuntime).ConnectionsTotalCount))\nStuck threads : (MXBean(com.bea:ApplicationRuntime=bea_wls_internal,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nStuck threads : (MXBean(com.bea:ApplicationRuntime=sys01,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nFailed wait for connection : (incld/dx (MXBean(com.bea:Name=source02,Type=JDBCDataSourceRuntime).WaitingForConnectionFailureTotal))\nThread User time : (MXBean(java.lang:type=Threading).CurrentThreadUserTime)\nDB connection started : (incld/dx (MXBean(com.bea:Name=source04,Type=JDBCConnectionPoolRuntime).ConnectionsTotalCount))\nConnection delay : (MXBean(com.bea:Name=source01,Type=JDBCConnectionPoolRuntime).ConnectionDelayTime)\nActive connections : (MXBean(com.bea:Name=source06,Type=JDBCConnectionPoolRuntime).ActiveConnectionsCurrentCount)\nAvailable db connection activity : (d/dx (MXBean(com.bea:Name=source09,Type=JDBCDataSourceRuntime).NumAvailable))\nStuck threads : (MXBean(com.bea:Name=weblogic.admin.RMI,Type=WorkManagerRuntime).StuckThreadCount)\nThread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)\nAvailable db connection activity : (d/dx (MXBean(com.bea:Name=source09,Type=JDBCConnectionPoolRuntime).NumAvailable))\nTransaction committ activity : (incld/dx (MXBean(com.bea:Name=JTARuntime,Type=JTARuntime).TransactionCommittedTotalCount))\nMemory space usage : ((MXBean(java.lang:name=PS Old Gen,type=MemoryPool).Usage.used / MXBean(java.lang:name=PS Old Gen,type=MemoryPool).Usage.max))\nStuck threads : (MXBean(com.bea:ApplicationRuntime=batchModules,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nNo data\nDB connection started : (incld/dx (MXBean(com.bea:Name=source08,Type=JDBCConnectionPoolRuntime).ConnectionsTotalCount))\nStuck threads : (MXBean(com.bea:ApplicationRuntime=source04,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nStuck threads : (MXBean(com.bea:Name=HARVESTER_WM,Type=WorkManagerRuntime).StuckThreadCount)\nDaemon thread count : (MXBean(java.lang:type=Threading).DaemonThreadCount)\nRel. unavailable connections : ((MXBean(com.bea:Name=source02,Type=JDBCDataSourceRuntime).NumUnavailable / MXBean(com.bea:Name=source02,Type=JDBCDataSourceRuntime).CurrCapacity))\nAvailable db connection activity : (d/dx (MXBean(com.bea:Name=source06,Type=JDBCDataSourceRuntime).NumAvailable))\nMemory space usage : ((MXBean(java.lang:name=PS Eden Space,type=MemoryPool).Usage.committed / MXBean(java.lang:name=PS Eden Space,type=MemoryPool).Usage.max))\nFailing reserve requests : (incld/dx (MXBean(com.bea:Name=source05,Type=JDBCDataSourceRuntime).FailedReserveRequestCount))\nDB connection started : (incld/dx (MXBean(com.bea:Name=source01,Type=JDBCDataSourceRuntime).ConnectionsTotalCount))\nConnection delay : (MXBean(com.bea:Name=source01,Type=JDBCDataSourceRuntime).ConnectionDelayTime)\nMemory space usage : ((MXBean(java.lang:name=PS Eden Space,type=MemoryPool).Usage.used / MXBean(java.lang:name=PS Eden Space,type=MemoryPool).Usage.max))\nDB connection started : (incld/dx (MXBean(com.bea:Name=source05,Type=JDBCDataSourceRuntime).ConnectionsTotalCount))\nSuccessful wait for connection : (incld/dx (MXBean(com.bea:Name=source10,Type=JDBCDataSourceRuntime).WaitingForConnectionSuccessTotal))\nPrepared statement cache hit rate : ((MXBean(com.bea:Name=source09,Type=JDBCDataSourceRuntime).PrepStmtCacheHitCount / MXBean(com.bea:Name=source09,Type=JDBCDataSourceRuntime).PrepStmtCacheMissCount))\nStuck threads : (MXBean(com.bea:Name=JmsAsyncQueue,Type=WorkManagerRuntime).StuckThreadCount)\nDB connection started : (incld/dx (MXBean(com.bea:Name=source10,Type=JDBCConnectionPoolRuntime).ConnectionsTotalCount))\nClass unloading activity : (d/dx (MXBean(java.lang:type=ClassLoading).UnloadedClassCount))\nRel. unavailable connections : ((MXBean(com.bea:Name=source10,Type=JDBCDataSourceRuntime).NumUnavailable / MXBean(com.bea:Name=source10,Type=JDBCDataSourceRuntime).CurrCapacity))\nReserve request activity : (incld/dx (MXBean(com.bea:Name=source06,Type=JDBCDataSourceRuntime).ReserveRequestCount))\nStuck threads : (MXBean(com.bea:ApplicationRuntime=bea_wls_cluster_internal,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nSuccessful wait for connection : (incld/dx (MXBean(com.bea:Name=source09,Type=JDBCDataSourceRuntime).WaitingForConnectionSuccessTotal))\nConnection delay : (MXBean(com.bea:Name=source04,Type=JDBCDataSourceRuntime).ConnectionDelayTime)\nConnection delay : (MXBean(com.bea:Name=source05,Type=JDBCDataSourceRuntime).ConnectionDelayTime)\nRel. unavailable connections : ((MXBean(com.bea:Name=source10,Type=JDBCConnectionPoolRuntime).NumUnavailable / MXBean(com.bea:Name=source10,Type=JDBCConnectionPoolRuntime).CurrCapacity))\nStuck threads : (MXBean(com.bea:ApplicationRuntime=source09,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nFailed wait for connection : (incld/dx (MXBean(com.bea:Name=source05,Type=JDBCDataSourceRuntime).WaitingForConnectionFailureTotal))\nConnection delay : (MXBean(com.bea:Name=source04,Type=JDBCConnectionPoolRuntime).ConnectionDelayTime)\nStuck threads : (MXBean(com.bea:ApplicationRuntime=bea_wls_diagnostics,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nTotal thread count : (MXBean(java.lang:type=Threading).ThreadCount)\nStuck threads : (MXBean(com.bea:Name=CdsAsyncRegistration,Type=WorkManagerRuntime).StuckThreadCount)\nAvailable db connection activity : (d/dx (MXBean(com.bea:Name=source08,Type=JDBCConnectionPoolRuntime).NumAvailable))\nStuck threads : (MXBean(com.bea:Name=weblogic.kernel.WTC,Type=WorkManagerRuntime).StuckThreadCount)\nPrepared statement cache hit rate : ((MXBean(com.bea:Name=source08,Type=JDBCDataSourceRuntime).PrepStmtCacheHitCount / MXBean(com.bea:Name=source08,Type=JDBCDataSourceRuntime).PrepStmtCacheMissCount))\nRel. unavailable connections : ((MXBean(com.bea:Name=source06,Type=JDBCConnectionPoolRuntime).NumUnavailable / MXBean(com.bea:Name=source06,Type=JDBCConnectionPoolRuntime).CurrCapacity))\nStuck threads : (MXBean(com.bea:Name=ASYNC_REP_FLUSH_WM,Type=WorkManagerRuntime).StuckThreadCount)\nMemory space usage : ((MXBean(java.lang:name=PS Survivor Space,type=MemoryPool).Usage.committed / MXBean(java.lang:name=PS Survivor Space,type=MemoryPool).Usage.max))\nStuck threads : (MXBean(com.bea:ApplicationRuntime=bea_wls9_async_response,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nMemory space activity : (d/dx ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.used / MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max)))\nRel. unavailable connections : ((MXBean(com.bea:Name=source01,Type=JDBCDataSourceRuntime).NumUnavailable / MXBean(com.bea:Name=source01,Type=JDBCDataSourceRuntime).CurrCapacity))\nStuck threads : (MXBean(com.bea:Name=ImageWorkManager,Type=WorkManagerRuntime).StuckThreadCount)\nObjects to be finalized : (MXBean(java.lang:type=Memory).ObjectPendingFinalizationCount)\nPrepared statement cache hit rate : ((MXBean(com.bea:Name=source10,Type=JDBCDataSourceRuntime).PrepStmtCacheHitCount / MXBean(com.bea:Name=source10,Type=JDBCDataSourceRuntime).PrepStmtCacheMissCount))\nStuck threads : (MXBean(com.bea:ApplicationRuntime=source03,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nStuck threads : (MXBean(com.bea:ApplicationRuntime=wls-wsat,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nRel. unavailable connections : ((MXBean(com.bea:Name=source06,Type=JDBCDataSourceRuntime).NumUnavailable / MXBean(com.bea:Name=source06,Type=JDBCDataSourceRuntime).CurrCapacity))\nActive connections : (MXBean(com.bea:Name=source10,Type=JDBCDataSourceRuntime).ActiveConnectionsCurrentCount)\nAvailable db connection activity : (d/dx (MXBean(com.bea:Name=source05,Type=JDBCConnectionPoolRuntime).NumAvailable))\nStuck threads : (MXBean(com.bea:Name=weblogic.Rejector,Type=WorkManagerRuntime).StuckThreadCount)\nActive connections : (MXBean(com.bea:Name=source02,Type=JDBCDataSourceRuntime).ActiveConnectionsCurrentCount)\nActive connections : (MXBean(com.bea:Name=source06,Type=JDBCDataSourceRuntime).ActiveConnectionsCurrentCount)\nDB connection started : (incld/dx (MXBean(com.bea:Name=source05,Type=JDBCConnectionPoolRuntime).ConnectionsTotalCount))\nPrepared statement cache hit rate : ((MXBean(com.bea:Name=source02,Type=JDBCDataSourceRuntime).PrepStmtCacheHitCount / MXBean(com.bea:Name=source02,Type=JDBCDataSourceRuntime).PrepStmtCacheMissCount))\nSuccessful wait for connection : (incld/dx (MXBean(com.bea:Name=source06,Type=JDBCDataSourceRuntime).WaitingForConnectionSuccessTotal))\nHeap committed activity : (d/dx (MXBean(java.lang:type=Memory).HeapMemoryUsage.committed))\nStuck threads : (MXBean(com.bea:Name=weblogic.kernel.System,Type=WorkManagerRuntime).StuckThreadCount)\nRel. swap usage : ((MXBean(java.lang:type=OperatingSystem).FreeSwapSpaceSize / MXBean(java.lang:type=OperatingSystem).TotalSwapSpaceSize))\nStuck threads : (MXBean(com.bea:Name=OneWayJTACoordinatorWM,Type=WorkManagerRuntime).StuckThreadCount)\nActive connections : (MXBean(com.bea:Name=source09,Type=JDBCDataSourceRuntime).ActiveConnectionsCurrentCount)\nAvailable db connection activity : (d/dx (MXBean(com.bea:Name=source04,Type=JDBCDataSourceRuntime).NumAvailable))\nLast GC duration : (MXBean(java.lang:name=PS Scavenge,type=GarbageCollector).LastGcInfo.duration)\nFailing reserve requests : (incld/dx (MXBean(com.bea:Name=source01,Type=JDBCDataSourceRuntime).FailedReserveRequestCount))\nRel. unavailable connections : ((MXBean(com.bea:Name=source04,Type=JDBCConnectionPoolRuntime).NumUnavailable / MXBean(com.bea:Name=source04,Type=JDBCConnectionPoolRuntime).CurrCapacity))\nPrepared statement cache hit rate : ((MXBean(com.bea:Name=source03,Type=JDBCDataSourceRuntime).PrepStmtCacheHitCount / MXBean(com.bea:Name=source03,Type=JDBCDataSourceRuntime).PrepStmtCacheMissCount))\nStuck threads : (MXBean(com.bea:ApplicationRuntime=sys02,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nDB connection started : (incld/dx (MXBean(com.bea:Name=source08,Type=JDBCDataSourceRuntime).ConnectionsTotalCount))\nReserve request activity : (incld/dx (MXBean(com.bea:Name=source09,Type=JDBCDataSourceRuntime).ReserveRequestCount))\nNonHeap usage activity : (d/dx (MXBean(java.lang:type=Memory).NonHeapMemoryUsage.used))\nRel. physical mem usage : ((MXBean(java.lang:type=OperatingSystem).FreePhysicalMemorySize / MXBean(java.lang:type=OperatingSystem).TotalPhysicalMemorySize))\nRel. unavailable connections : ((MXBean(com.bea:Name=source03,Type=JDBCDataSourceRuntime).NumUnavailable / MXBean(com.bea:Name=source03,Type=JDBCDataSourceRuntime).CurrCapacity))\nActive connections : (MXBean(com.bea:Name=source01,Type=JDBCConnectionPoolRuntime).ActiveConnectionsCurrentCount)\nPrepared statement cache hit rate : ((MXBean(com.bea:Name=source05,Type=JDBCDataSourceRuntime).PrepStmtCacheHitCount / MXBean(com.bea:Name=source05,Type=JDBCDataSourceRuntime).PrepStmtCacheMissCount))\nMemory space activity : (d/dx ((MXBean(java.lang:name=PS Survivor Space,type=MemoryPool).Usage.used / MXBean(java.lang:name=PS Survivor Space,type=MemoryPool).Usage.max)))\nConnection delay : (MXBean(com.bea:Name=source08,Type=JDBCConnectionPoolRuntime).ConnectionDelayTime)\nFailed wait for connection : (incld/dx (MXBean(com.bea:Name=source10,Type=JDBCDataSourceRuntime).WaitingForConnectionFailureTotal))\nRel. unavailable connections : ((MXBean(com.bea:Name=source08,Type=JDBCConnectionPoolRuntime).NumUnavailable / MXBean(com.bea:Name=source08,Type=JDBCConnectionPoolRuntime).CurrCapacity))\nDB connection started : (incld/dx (MXBean(com.bea:Name=source06,Type=JDBCConnectionPoolRuntime).ConnectionsTotalCount))\nActive connections : (MXBean(com.bea:Name=source10,Type=JDBCConnectionPoolRuntime).ActiveConnectionsCurrentCount)\nStuck threads : (MXBean(com.bea:Name=weblogic.kernel.Non-Blocking,Type=WorkManagerRuntime).StuckThreadCount)\nStuck threads : (MXBean(com.bea:Name=UserLockout,Type=WorkManagerRuntime).StuckThreadCount)\nNonHeap committed activity : (d/dx (MXBean(java.lang:type=Memory).NonHeapMemoryUsage.committed))\nMemory space activity : (d/dx ((MXBean(java.lang:name=PS Perm Gen,type=MemoryPool).Usage.used / MXBean(java.lang:name=PS Perm Gen,type=MemoryPool).Usage.max)))\nSwap activity : (d/dx (MXBean(java.lang:type=OperatingSystem).FreeSwapSpaceSize))\nGC time : (incld/dx (MXBean(java.lang:name=PS Scavenge,type=GarbageCollector).CollectionTime))\nRel. heap usage : ((MXBean(java.lang:type=Memory).HeapMemoryUsage.used / MXBean(java.lang:type=Memory).HeapMemoryUsage.max))\nGC time : (incld/dx (MXBean(java.lang:name=PS MarkSweep,type=GarbageCollector).CollectionTime))\nStuck threads : (MXBean(com.bea:ApplicationRuntime=source08,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nSuccessful wait for connection : (incld/dx (MXBean(com.bea:Name=source04,Type=JDBCDataSourceRuntime).WaitingForConnectionSuccessTotal))\nActive connections : (MXBean(com.bea:Name=source03,Type=JDBCDataSourceRuntime).ActiveConnectionsCurrentCount)\nGC activity : (incld/dx (MXBean(java.lang:name=PS MarkSweep,type=GarbageCollector).CollectionCount))\nMemory space activity : (d/dx ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed / MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max)))\nAvailable db connection activity : (d/dx (MXBean(com.bea:Name=source01,Type=JDBCConnectionPoolRuntime).NumAvailable))\nConnection delay : (MXBean(com.bea:Name=source05,Type=JDBCConnectionPoolRuntime).ConnectionDelayTime)\nMemory space activity : (d/dx ((MXBean(java.lang:name=PS Old Gen,type=MemoryPool).Usage.used / MXBean(java.lang:name=PS Old Gen,type=MemoryPool).Usage.max)))\nStuck threads : (MXBean(com.bea:Name=JTACoordinatorWM,Type=WorkManagerRuntime).StuckThreadCount)\nAvailable db connection activity : (d/dx (MXBean(com.bea:Name=source10,Type=JDBCDataSourceRuntime).NumAvailable))\nDB connection started : (incld/dx (MXBean(com.bea:Name=source03,Type=JDBCDataSourceRuntime).ConnectionsTotalCount))\nAvailable db connection activity : (d/dx (MXBean(com.bea:Name=source06,Type=JDBCConnectionPoolRuntime).NumAvailable))\nAvailable db connection activity : (d/dx (MXBean(com.bea:Name=source01,Type=JDBCDataSourceRuntime).NumAvailable))\nMemory space activity : (d/dx ((MXBean(java.lang:name=PS Eden Space,type=MemoryPool).Usage.used / MXBean(java.lang:name=PS Eden Space,type=MemoryPool).Usage.max)))\nReserve request activity : (incld/dx (MXBean(com.bea:Name=source03,Type=JDBCDataSourceRuntime).ReserveRequestCount))\nActive connections : (MXBean(com.bea:Name=source09,Type=JDBCConnectionPoolRuntime).ActiveConnectionsCurrentCount)\nFailed wait for connection : (incld/dx (MXBean(com.bea:Name=source06,Type=JDBCDataSourceRuntime).WaitingForConnectionFailureTotal))\nRel. unavailable connections : ((MXBean(com.bea:Name=source05,Type=JDBCDataSourceRuntime).NumUnavailable / MXBean(com.bea:Name=source05,Type=JDBCDataSourceRuntime).CurrCapacity))\nSuccessful wait for connection : (incld/dx (MXBean(com.bea:Name=source08,Type=JDBCDataSourceRuntime).WaitingForConnectionSuccessTotal))\nStuck threads : (MXBean(com.bea:Name=wl_oldBootStrap,Type=WorkManagerRuntime).StuckThreadCount)\nSystem CPU : (MXBean(java.lang:type=OperatingSystem).SystemCpuLoad)\nMemory space usage : ((MXBean(java.lang:name=PS Old Gen,type=MemoryPool).Usage.committed / MXBean(java.lang:name=PS Old Gen,type=MemoryPool).Usage.max))\nTransaction roll back activity : (incld/dx (MXBean(com.bea:Name=JTARuntime,Type=JTARuntime).TransactionRolledBackTotalCount))\nConnection delay : (MXBean(com.bea:Name=source10,Type=JDBCConnectionPoolRuntime).ConnectionDelayTime)\nMemory space activity : (d/dx ((MXBean(java.lang:name=PS Survivor Space,type=MemoryPool).Usage.committed / MXBean(java.lang:name=PS Survivor Space,type=MemoryPool).Usage.max)))\nActive connections : (MXBean(com.bea:Name=source08,Type=JDBCDataSourceRuntime).ActiveConnectionsCurrentCount)\nStuck threads : (MXBean(com.bea:Name=direct,Type=WorkManagerRuntime).StuckThreadCount)\nStuck threads : (MXBean(com.bea:Name=weblogic.kernel.Default,Type=WorkManagerRuntime).StuckThreadCount)\nRel. unavailable connections : ((MXBean(com.bea:Name=source09,Type=JDBCConnectionPoolRuntime).NumUnavailable / MXBean(com.bea:Name=source09,Type=JDBCConnectionPoolRuntime).CurrCapacity))\nStuck threads : (MXBean(com.bea:ApplicationRuntime=batchModules3,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nStuck threads : (MXBean(com.bea:Name=weblogic.logging.LogBroadcaster,Type=WorkManagerRuntime).StuckThreadCount)\nRel. open file descriptors : ((MXBean(java.lang:type=OperatingSystem).OpenFileDescriptorCount / MXBean(java.lang:type=OperatingSystem).MaxFileDescriptorCount))\nRel. unavailable connections : ((MXBean(com.bea:Name=source05,Type=JDBCConnectionPoolRuntime).NumUnavailable / MXBean(com.bea:Name=source05,Type=JDBCConnectionPoolRuntime).CurrCapacity))\nFailing reserve requests : (incld/dx (MXBean(com.bea:Name=source02,Type=JDBCDataSourceRuntime).FailedReserveRequestCount))\nAvailable db connection activity : (d/dx (MXBean(com.bea:Name=source03,Type=JDBCDataSourceRuntime).NumAvailable))\nConnection delay : (MXBean(com.bea:Name=source03,Type=JDBCConnectionPoolRuntime).ConnectionDelayTime)\nRel. unavailable connections : ((MXBean(com.bea:Name=source09,Type=JDBCDataSourceRuntime).NumUnavailable / MXBean(com.bea:Name=source09,Type=JDBCDataSourceRuntime).CurrCapacity))\nReserve request activity : (incld/dx (MXBean(com.bea:Name=source04,Type=JDBCDataSourceRuntime).ReserveRequestCount))\nActive connections : (MXBean(com.bea:Name=source02,Type=JDBCConnectionPoolRuntime).ActiveConnectionsCurrentCount)\nFailed wait for connection : (incld/dx (MXBean(com.bea:Name=source04,Type=JDBCDataSourceRuntime).WaitingForConnectionFailureTotal))\nMemory space usage : ((MXBean(java.lang:name=PS Perm Gen,type=MemoryPool).Usage.used / MXBean(java.lang:name=PS Perm Gen,type=MemoryPool).Usage.max))\nStuck threads : (MXBean(com.bea:ApplicationRuntime=source01,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nConnection delay : (MXBean(com.bea:Name=source06,Type=JDBCConnectionPoolRuntime).ConnectionDelayTime)\nStuck threads : (MXBean(com.bea:ApplicationRuntime=source10,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nLast GC duration : (MXBean(java.lang:name=PS MarkSweep,type=GarbageCollector).LastGcInfo.duration)\nReserve request activity : (incld/dx (MXBean(com.bea:Name=source01,Type=JDBCDataSourceRuntime).ReserveRequestCount))\nSuccessful wait for connection : (incld/dx (MXBean(com.bea:Name=source05,Type=JDBCDataSourceRuntime).WaitingForConnectionSuccessTotal))\nStuck threads : (MXBean(com.bea:ApplicationRuntime=bea_wls_deployment_internal,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nFailing reserve requests : (incld/dx (MXBean(com.bea:Name=source09,Type=JDBCDataSourceRuntime).FailedReserveRequestCount))\nRel. unavailable connections : ((MXBean(com.bea:Name=source03,Type=JDBCConnectionPoolRuntime).NumUnavailable / MXBean(com.bea:Name=source03,Type=JDBCConnectionPoolRuntime).CurrCapacity))\nMemory space activity : (d/dx ((MXBean(java.lang:name=PS Perm Gen,type=MemoryPool).Usage.committed / MXBean(java.lang:name=PS Perm Gen,type=MemoryPool).Usage.max)))\nAvailable db connection activity : (d/dx (MXBean(com.bea:Name=source02,Type=JDBCConnectionPoolRuntime).NumAvailable))\nFailing reserve requests : (incld/dx (MXBean(com.bea:Name=source03,Type=JDBCDataSourceRuntime).FailedReserveRequestCount))\nFailing reserve requests : (incld/dx (MXBean(com.bea:Name=source10,Type=JDBCDataSourceRuntime).FailedReserveRequestCount))\nFailed wait for connection : (incld/dx (MXBean(com.bea:Name=source09,Type=JDBCDataSourceRuntime).WaitingForConnectionFailureTotal))\nStuck threads : (MXBean(com.bea:ApplicationRuntime=source06,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nDB connection started : (incld/dx (MXBean(com.bea:Name=source09,Type=JDBCDataSourceRuntime).ConnectionsTotalCount))\nActive connections : (MXBean(com.bea:Name=source04,Type=JDBCDataSourceRuntime).ActiveConnectionsCurrentCount)\nSuccessful wait for connection : (incld/dx (MXBean(com.bea:Name=source01,Type=JDBCDataSourceRuntime).WaitingForConnectionSuccessTotal))\nMemory space activity : (d/dx ((MXBean(java.lang:name=PS Eden Space,type=MemoryPool).Usage.committed / MXBean(java.lang:name=PS Eden Space,type=MemoryPool).Usage.max)))\nActive transactions : (MXBean(com.bea:Name=JTARuntime,Type=JTARuntime).ActiveTransactionsTotalCount)\nConnection delay : (MXBean(com.bea:Name=source08,Type=JDBCDataSourceRuntime).ConnectionDelayTime)\nDB connection started : (incld/dx (MXBean(com.bea:Name=source06,Type=JDBCDataSourceRuntime).ConnectionsTotalCount))\nAvailable db connection activity : (d/dx (MXBean(com.bea:Name=source08,Type=JDBCDataSourceRuntime).NumAvailable))\nAvailable db connection activity : (d/dx (MXBean(com.bea:Name=source10,Type=JDBCConnectionPoolRuntime).NumAvailable))\nRel. unavailable connections : ((MXBean(com.bea:Name=source04,Type=JDBCDataSourceRuntime).NumUnavailable / MXBean(com.bea:Name=source04,Type=JDBCDataSourceRuntime).CurrCapacity))\nStuck threads : (MXBean(com.bea:ApplicationRuntime=source05,Name=default,Type=WorkManagerRuntime).StuckThreadCount)\nRel. unavailable connections : ((MXBean(com.bea:Name=source08,Type=JDBCDataSourceRuntime).NumUnavailable / MXBean(com.bea:Name=source08,Type=JDBCDataSourceRuntime).CurrCapacity))\nFailed wait for connection : (incld/dx (MXBean(com.bea:Name=source08,Type=JDBCDataSourceRuntime).WaitingForConnectionFailureTotal))\nSuccessful wait for connection : (incld/dx (MXBean(com.bea:Name=source03,Type=JDBCDataSourceRuntime).WaitingForConnectionSuccessTotal))\nProcess CPU : (\\Process(java)\\CPU)\nConnection delay : (MXBean(com.bea:Name=source02,Type=JDBCDataSourceRuntime).ConnectionDelayTime)\nFailed wait for connection : (incld/dx (MXBean(com.bea:Name=source03,Type=JDBCDataSourceRuntime).WaitingForConnectionFailureTotal))\n"}]},"apps":[],"jobName":"paragraph_1507544911137_2004549813","id":"20171009-122831_512960223","dateCreated":"2017-10-09T12:28:31+0200","dateStarted":"2018-01-19T09:20:13+0100","dateFinished":"2018-01-19T09:20:50+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:69"},{"text":"%md\n\n# Labeling","user":"anonymous","dateUpdated":"2017-12-18T12:18:11+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Labeling</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1502970271255_-2144539994","id":"20170817-134431_490947145","dateCreated":"2017-08-17T13:44:31+0200","dateStarted":"2017-12-18T12:18:11+0100","dateFinished":"2017-12-18T12:18:11+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:70"},{"text":"%md\n\n## Define Anomalies","user":"anonymous","dateUpdated":"2017-12-18T12:18:11+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Define Anomalies</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1508832436159_1510193182","id":"20171024-100716_527486522","dateCreated":"2017-10-24T10:07:16+0200","dateStarted":"2017-12-18T12:18:11+0100","dateFinished":"2017-12-18T12:18:11+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:71"},{"text":"%kryo-spark\n// host, process, start of anomaly (end is restart of affected node)\nval restartAnomalies = List(\n    (18, 2, \"2014-12-02 13:40\"),\n    (10, 1, \"2014-12-03 14:45\"),\n    (11, 1, \"2014-12-11 08:00\"),\n    (11, 1, \"2014-12-17 12:31\"),\n    (18, 1, \"2014-12-18 11:27\"),\n    ( 9, 1, \"2015-01-07 12:23\"),\n    (18, 2, \"2015-01-13 13:33\"),\n    (10, 1, \"2015-01-15 11:35\"),\n    (10, 2, \"2015-01-15 10:53\"),\n    (10, 1, \"2015-01-15 14:57\"),\n    ( 9, 1, \"2015-01-19 12:45\"),\n    (15, 2, \"2015-01-23 13:05\"),\n    (10, 1, \"2015-01-22 10:56\"),\n    (11, 1, \"2015-01-27 11:45\"),\n    ( 9, 1, \"2015-02-09 17:00\"),\n    (15, 1, \"2015-02-12 17:49\"),\n    (15, 2, \"2015-02-12 10:12\"),\n    (18, 1, \"2015-02-16 10:28\"),\n    (18, 2, \"2015-02-16 09:07\"),\n    (17, 1, \"2015-02-16 10:16\"),\n    (17, 2, \"2015-02-16 10:09\"),\n    (10, 1, \"2015-02-16 13:20\"),\n    (10, 2, \"2015-02-05 14:08\"),\n    (14, 1, \"2015-02-26 15:42\"),\n    (17, 1, \"2015-02-27 13:38\"),\n    (17, 1, \"2015-03-02 08:31\"),\n    ( 9, 1, \"2015-03-04 16:10\"),\n    (15, 1, \"2015-03-05 15:30\"),\n    (18, 2, \"2015-02-26 12:26\"),\n    (17, 1, \"2015-03-11 06:58\"),\n    (11, 1, \"2015-03-17 13:36\"),\n    (18, 2, \"2015-03-24 07:17\"),\n    (17, 2, \"2015-03-25 10:08\"),\n    (17, 2, \"2015-03-25 10:59\"),\n    (17, 2, \"2015-03-25 14:11\"),\n    (18, 1, \"2015-03-26 14:06\"),\n    (17, 1, \"2015-03-27 06:44\"),\n    (11, 1, \"2015-03-27 08:46\"),\n    ( 8, 1, \"2015-03-30 15:29\"),\n    (14, 1, \"2015-04-16 14:22\"),\n    ( 8, 1, \"2015-04-20 13:38\"),\n    (10, 1, \"2015-04-21 07:10\"),\n    \n    (17, 1, \"2015-06-18 09:28\"),\n    (10, 1, \"2015-06-18 08:38\"),\n    (10, 2, \"2015-06-18 07:31\"),\n    (17, 1, \"2015-06-24 11:20\"),\n    (17, 2, \"2015-06-24 14:07\"),\n    (14, 1, \"2015-07-01 12:40\"),\n    (15, 2, \"2015-06-18 10:13\"),\n    (10, 2, \"2015-07-02 13:32\"),\n    (11, 1, \"2015-07-03 09:03\"),\n    (10, 2, \"2015-07-23 17:35\"),\n    (17, 1, \"2015-07-24 13:42\"),\n    (11, 1, \"2015-08-03 13:10\"),\n    (15, 1, \"2015-08-12 07:17\"),\n    (14, 1, \"2015-08-12 08:45\"),\n    (15, 1, \"2015-08-21 12:38\"),\n    (15, 2, \"2015-08-21 14:11\"),\n    (14, 1, \"2015-08-25 16:11\"),\n    (10, 1, \"2015-08-21 13:16\"),\n    (10, 2, \"2015-09-16 15:19\"),\n    (11, 2, \"2015-09-14 14:54\"),\n    ( 6, 1, \"2015-09-22 07:28\"),\n    (15, 1, \"2015-09-28 18:53\")\n)\n\n// host, process, start of anomaly, end of anomaly\nval resolvedAnomalies = List(\n    // No restarts\n    (14, 2, \"2015-03-04 14:26\", \"2015-03-04 22:38\"),\n    (14, 1, \"2015-06-29 09:34\", \"2015-06-29 13:49\"),\n    (10, 2, \"2015-02-19 10:41\", \"2015-02-19 12:07\")\n)\n\n/*\n( 6, 1, \"2015-07-13 05:30\", \"2015-07-13 08:22\", Some(\"2015-07-13 10:39\")),\n( 6, 2, \"2015-07-13 05:30\", \"2015-07-13 08:29\", Some(\"2015-07-13 08:40\")),\n( 7, 1, \"2015-07-13 05:29\", \"2015-07-13 08:34\", Some(\"2015-07-13 10:41\")),\n( 7, 2, \"2015-07-13 06:09\", \"2015-07-13 08:34\", Some(\"2015-07-13 10:45\")),\n( 8, 1, \"2015-07-13 05:40\", \"2015-07-13 07:17\", Some(\"2015-07-13 10:28\")),\n( 8, 2, \"2015-07-13 06:05\", \"2015-07-13 08:26\", Some(\"2015-07-13 10:29\")),\n( 9, 1, \"2015-07-13 05:33\", \"2015-07-13 07:57\", Some(\"2015-07-13 09:07\")),\n( 9, 2, \"2015-07-13 05:44\", \"2015-07-13 07:59\", Some(\"2015-07-13 08:10\")),\n( 9, 2, \"2015-07-13 08:11\", \"2015-07-13 08:59\", Some(\"2015-07-13 09:14\")),\n(10, 1, \"2015-07-13 05:55\", \"2015-07-13 07:07\", Some(\"2015-07-13 09:26\")),\n(10, 2, \"2015-07-13 06:07\", \"2015-07-13 07:06\", Some(\"2015-07-13 09:46\")),\n(11, 1, \"2015-07-13 08:59\", \"2015-07-13 09:34\", None),\n(11, 2, \"2015-07-13 08:59\", \"2015-07-13 09:34\", None),\n(17, 1, \"2015-07-13 05:35\", \"2015-07-13 06:16\", None),\n(17, 2, \"2015-07-13 05:35\", \"2015-07-13 06:16\", None),\n(18, 1, \"2015-07-13 05:35\", \"2015-07-13 06:37\", None),\n(18, 2, \"2015-07-13 05:35\", \"2015-07-13 06:37\", None),\n( 7, 1, \"2015-09-21 07:53\", \"2015-09-21 08:45\", None),\n( 7, 2, \"2015-09-21 07:53\", \"2015-09-21 08:45\", None),\n(10, 1, \"2015-09-21 07:51\", \"2015-09-21 08:20\", None),\n(10, 1, \"2015-09-21 08:40\", \"2015-09-21 09:17\", None),\n(11, 1, \"2015-09-21 08:03\", \"2015-09-21 08:29\", Some(\"2015-09-21 10:15\")),\n(18, 1, \"2015-09-21 08:07\", \"2015-09-21 08:30\", None),\n(18, 2, \"2015-09-21 08:07\", \"2015-09-21 08:30\", None),\n(17, 1, \"2015-09-21 07:50\", \"2015-09-21 09:56\", None),\n(17, 2, \"2015-09-21 07:50\", \"2015-09-21 09:56\", None)\n*/","user":"anonymous","dateUpdated":"2018-01-19T09:19:59+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"restartAnomalies: List[(Int, Int, String)] = List((18,2,2014-12-02 13:40), (10,1,2014-12-03 14:45), (11,1,2014-12-11 08:00), (11,1,2014-12-17 12:31), (18,1,2014-12-18 11:27), (9,1,2015-01-07 12:23), (18,2,2015-01-13 13:33), (10,1,2015-01-15 11:35), (10,2,2015-01-15 10:53), (10,1,2015-01-15 14:57), (9,1,2015-01-19 12:45), (15,2,2015-01-23 13:05), (10,1,2015-01-22 10:56), (11,1,2015-01-27 11:45), (9,1,2015-02-09 17:00), (15,1,2015-02-12 17:49), (15,2,2015-02-12 10:12), (18,1,2015-02-16 10:28), (18,2,2015-02-16 09:07), (17,1,2015-02-16 10:16), (17,2,2015-02-16 10:09), (10,1,2015-02-16 13:20), (10,2,2015-02-05 14:08), (14,1,2015-02-26 15:42), (17,1,2015-02-27 13:38), (17,1,2015-03-02 08:31), (9,1,2015-03-04 16:10), (15,1,2015-03-05 15:30), (18,2,2015-02-26 12:26), (17,1,2015-03-11 06:58), (...resolvedAnomalies: List[(Int, Int, String, String)] = List((14,2,2015-03-04 14:26,2015-03-04 22:38), (14,1,2015-06-29 09:34,2015-06-29 13:49), (10,2,2015-02-19 10:41,2015-02-19 12:07))\n"}]},"apps":[],"jobName":"paragraph_1501771070755_-1577093622","id":"20170803-163750_1188997058","dateCreated":"2017-08-03T16:37:50+0200","dateStarted":"2018-01-19T09:20:48+0100","dateFinished":"2018-01-19T09:20:51+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:72"},{"text":"%kryo-spark\ndef restartSeqs(c: Counter): Tuple3[String, String, List[Tuple2[Timestamp,Timestamp]]] = {\n    val vps = c.getValuePoints\n    \n    var result = new ListBuffer[Tuple2[Timestamp, Timestamp]]\n    var lastUptime = vps.get(0)\n    for (i <- 1 until vps.size) {\n        val elem = vps.get(i)\n        if (elem.getValue != -1) {\n            if (elem.getValue < lastUptime.getValue) {\n                result.append(Tuple2(new Timestamp(lastUptime.getDate.getTime + 60000L), new Timestamp(elem.getDate.getTime - 60000L)))\n            }\n            lastUptime = elem\n        }\n    }\n    \n    (c.getMetric.getHost, c.getMetric.getProcs, result.toList)\n}\n\nval start = Timestamp.valueOf(\"2014-11-29 00:00:00\")\nval end = Timestamp.valueOf(\"2015-10-03 00:00:00\")\n\n\nval restarts = new MetricsServiceImpl.Factory(sqlc).getInstance(\"192.168.1.100:2181\", \"ekgdata\")\n    .getCounters(new QueryMetricContext.Builder().withMetrics(\"*Runtime*Uptime*\").withHost(\"lp*\").withStart(start).withEnd(end).build(), Granularity.MINUTE, AggregationType.MIN)\n    .map(c => restartSeqs(c)).flatMap(t => t._3.map(se => (t._1, t._2, se._1, se._2))).collect.toList\n    \ndef expandHost(h: Int): String = \"lphost\" + (if (h < 10) \"0\" else \"\") + h\n\ndef expandProc(p: Int): String = \"wls\" + p\n\ndef expandTS(ts: String): Timestamp = Timestamp.valueOf(ts + \":00\")\n\ncase class Labeled(host: String, procs: String, ts: java.sql.Timestamp, features: org.apache.spark.ml.linalg.Vector, manualLabel: Double)\n\ndef inList(l: List[Tuple4[String, String, Timestamp, Timestamp]], host:String, proc:String, ts: Timestamp): Boolean = \n    l.exists(x => x._1 == host && x._2 == proc && !(ts.before(x._3) || ts.after(x._4)))\n\nval anomalies: List[Tuple4[String, String, Timestamp, Timestamp]] = (resolvedAnomalies.map(t => (expandHost(t._1), expandProc(t._2), expandTS(t._3), expandTS(t._4))) ++\n    restartAnomalies.map(t => {\n        restarts.find(r => r._1 == expandHost(t._1) && r._2 == expandProc(t._2) && r._4.after(expandTS(t._3))) match {\n            case None => throw new IllegalStateException(\"Anomaly does not end!\")\n            case Some(r) => (r._1, r._2, expandTS(t._3), r._3)\n        }\n    }))\n\nval anomaliesBC = sc.broadcast(anomalies)\nval restartsBC = sc.broadcast(restarts)\n\nanomalies.foreach(println(_))\nrestarts.foreach(println(_))","user":"anonymous","dateUpdated":"2018-01-19T09:20:03+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"restartSeqs: (c: de.qaware.mlwb.api.Counter)(String, String, List[(java.sql.Timestamp, java.sql.Timestamp)])\nstart: java.sql.Timestamp = 2014-11-29 00:00:00.0\nend: java.sql.Timestamp = 2015-10-03 00:00:00.0\nrestarts: List[(String, String, java.sql.Timestamp, java.sql.Timestamp)] = List((lphost06,wls1,2014-12-01 13:09:00.0,2014-12-01 13:12:00.0), (lphost06,wls1,2014-12-05 15:05:00.0,2014-12-05 15:31:00.0), (lphost06,wls1,2014-12-11 21:39:00.0,2014-12-11 21:40:00.0), (lphost06,wls1,2014-12-17 16:24:00.0,2014-12-17 16:25:00.0), (lphost06,wls1,2015-01-07 23:13:00.0,2015-01-07 23:17:00.0), (lphost06,wls1,2015-01-30 17:09:00.0,2015-01-30 19:54:00.0), (lphost06,wls1,2015-02-17 08:29:00.0,2015-02-17 08:30:00.0), (lphost06,wls1,2015-02-17 18:28:00.0,2015-02-17 18:30:00.0), (lphost06,wls1,2015-03-03 20:01:00.0,2015-03-03 20:02:00.0), (lphost06,wls1,2015-03-08 09:59:00.0,2015-03-08 13:31:00.0), (lphost06,wls1,2015-03-19 00:24:00.0,2015-03-19 00:25:00.0), (lphost06,wls1,2015-04-09 11:53:00.0,2015-04-0...expandHost: (h: Int)String\nexpandProc: (p: Int)String\nexpandTS: (ts: String)java.sql.Timestamp\ndefined class Labeled\ninList: (l: List[(String, String, java.sql.Timestamp, java.sql.Timestamp)], host: String, proc: String, ts: java.sql.Timestamp)Boolean\nanomalies: List[(String, String, java.sql.Timestamp, java.sql.Timestamp)] = List((lphost14,wls2,2015-03-04 14:26:00.0,2015-03-04 22:38:00.0), (lphost14,wls1,2015-06-29 09:34:00.0,2015-06-29 13:49:00.0), (lphost10,wls2,2015-02-19 10:41:00.0,2015-02-19 12:07:00.0), (lphost18,wls2,2014-12-02 13:40:00.0,2014-12-03 09:12:00.0), (lphost10,wls1,2014-12-03 14:45:00.0,2014-12-03 16:21:00.0), (lphost11,wls1,2014-12-11 08:00:00.0,2014-12-11 15:31:00.0), (lphost11,wls1,2014-12-17 12:31:00.0,2014-12-18 10:28:00.0), (lphost18,wls1,2014-12-18 11:27:00.0,2014-12-19 16:09:00.0), (lphost09,wls1,2015-01-07 12:23:00.0,2015-01-07 23:13:00.0), (lphost18,wls2,2015-01-13 13:33:00.0,2015-01-13 14:13:00.0), (lphost10,wls1,2015-01-15 11:35:00.0,2015-01-15 13:47:00.0), (lphost10,wls2,2015-01-15 10:53:00.0,2015-01-...anomaliesBC: org.apache.spark.broadcast.Broadcast[List[(String, String, java.sql.Timestamp, java.sql.Timestamp)]] = Broadcast(7)\nrestartsBC: org.apache.spark.broadcast.Broadcast[List[(String, String, java.sql.Timestamp, java.sql.Timestamp)]] = Broadcast(8)\n(lphost14,wls2,2015-03-04 14:26:00.0,2015-03-04 22:38:00.0)\n(lphost14,wls1,2015-06-29 09:34:00.0,2015-06-29 13:49:00.0)\n(lphost10,wls2,2015-02-19 10:41:00.0,2015-02-19 12:07:00.0)\n(lphost18,wls2,2014-12-02 13:40:00.0,2014-12-03 09:12:00.0)\n(lphost10,wls1,2014-12-03 14:45:00.0,2014-12-03 16:21:00.0)\n(lphost11,wls1,2014-12-11 08:00:00.0,2014-12-11 15:31:00.0)\n(lphost11,wls1,2014-12-17 12:31:00.0,2014-12-18 10:28:00.0)\n(lphost18,wls1,2014-12-18 11:27:00.0,2014-12-19 16:09:00.0)\n(lphost09,wls1,2015-01-07 12:23:00.0,2015-01-07 23:13:00.0)\n(lphost18,wls2,2015-01-13 13:33:00.0,2015-01-13 14:13:00.0)\n(lphost10,wls1,2015-01-15 11:35:00.0,2015-01-15 13:47:00.0)\n(lphost10,wls2,2015-01-15 10:53:00.0,2015-01-15 13:49:00.0)\n(lphost10,wls1,2015-01-15 14:57:00.0,2015-01-15 15:31:00.0)\n(lphost09,wls1,2015-01-19 12:45:00.0,2015-01-19 17:37:00.0)\n(lphost15,wls2,2015-01-23 13:05:00.0,2015-01-23 14:01:00.0)\n(lphost10,wls1,2015-01-22 10:56:00.0,2015-01-23 17:36:00.0)\n(lphost11,wls1,2015-01-27 11:45:00.0,2015-01-29 17:39:00.0)\n(lphost09,wls1,2015-02-09 17:00:00.0,2015-02-09 17:21:00.0)\n(lphost15,wls1,2015-02-12 17:49:00.0,2015-02-13 12:32:00.0)\n(lphost15,wls2,2015-02-12 10:12:00.0,2015-02-13 12:50:00.0)\n(lphost18,wls1,2015-02-16 10:28:00.0,2015-02-16 11:02:00.0)\n(lphost18,wls2,2015-02-16 09:07:00.0,2015-02-16 11:10:00.0)\n(lphost17,wls1,2015-02-16 10:16:00.0,2015-02-16 12:26:00.0)\n(lphost17,wls2,2015-02-16 10:09:00.0,2015-02-16 12:34:00.0)\n(lphost10,wls1,2015-02-16 13:20:00.0,2015-02-17 18:03:00.0)\n(lphost10,wls2,2015-02-05 14:08:00.0,2015-02-17 18:04:00.0)\n(lphost14,wls1,2015-02-26 15:42:00.0,2015-02-26 16:23:00.0)\n(lphost17,wls1,2015-02-27 13:38:00.0,2015-02-27 14:05:00.0)\n(lphost17,wls1,2015-03-02 08:31:00.0,2015-03-02 08:54:00.0)\n(lphost09,wls1,2015-03-04 16:10:00.0,2015-03-06 00:25:00.0)\n(lphost15,wls1,2015-03-05 15:30:00.0,2015-03-08 10:01:00.0)\n(lphost18,wls2,2015-02-26 12:26:00.0,2015-03-08 10:01:00.0)\n(lphost17,wls1,2015-03-11 06:58:00.0,2015-03-11 07:36:00.0)\n(lphost11,wls1,2015-03-17 13:36:00.0,2015-03-18 10:31:00.0)\n(lphost18,wls2,2015-03-24 07:17:00.0,2015-03-24 08:04:00.0)\n(lphost17,wls2,2015-03-25 10:08:00.0,2015-03-25 10:34:00.0)\n(lphost17,wls2,2015-03-25 10:59:00.0,2015-03-25 13:08:00.0)\n(lphost17,wls2,2015-03-25 14:11:00.0,2015-03-25 14:17:00.0)\n(lphost18,wls1,2015-03-26 14:06:00.0,2015-03-26 15:12:00.0)\n(lphost17,wls1,2015-03-27 06:44:00.0,2015-03-27 09:16:00.0)\n(lphost11,wls1,2015-03-27 08:46:00.0,2015-03-27 11:41:00.0)\n(lphost08,wls1,2015-03-30 15:29:00.0,2015-03-30 15:52:00.0)\n(lphost14,wls1,2015-04-16 14:22:00.0,2015-04-16 14:46:00.0)\n(lphost08,wls1,2015-04-20 13:38:00.0,2015-04-20 14:41:00.0)\n(lphost10,wls1,2015-04-21 07:10:00.0,2015-04-21 10:30:00.0)\n(lphost17,wls1,2015-06-18 09:28:00.0,2015-06-18 09:29:00.0)\n(lphost10,wls1,2015-06-18 08:38:00.0,2015-06-18 10:49:00.0)\n(lphost10,wls2,2015-06-18 07:31:00.0,2015-06-18 10:50:00.0)\n(lphost17,wls1,2015-06-24 11:20:00.0,2015-06-24 13:28:00.0)\n(lphost17,wls2,2015-06-24 14:07:00.0,2015-06-24 14:33:00.0)\n(lphost14,wls1,2015-07-01 12:40:00.0,2015-07-03 09:13:00.0)\n(lphost15,wls2,2015-06-18 10:13:00.0,2015-07-03 23:37:00.0)\n(lphost10,wls2,2015-07-02 13:32:00.0,2015-07-04 06:25:00.0)\n(lphost11,wls1,2015-07-03 09:03:00.0,2015-07-04 06:28:00.0)\n(lphost10,wls2,2015-07-23 17:35:00.0,2015-07-23 18:27:00.0)\n(lphost17,wls1,2015-07-24 13:42:00.0,2015-07-24 17:34:00.0)\n(lphost11,wls1,2015-08-03 13:10:00.0,2015-08-03 14:44:00.0)\n(lphost15,wls1,2015-08-12 07:17:00.0,2015-08-12 08:09:00.0)\n(lphost14,wls1,2015-08-12 08:45:00.0,2015-08-12 09:08:00.0)\n(lphost15,wls1,2015-08-21 12:38:00.0,2015-08-28 16:04:00.0)\n(lphost15,wls2,2015-08-21 14:11:00.0,2015-08-28 16:05:00.0)\n(lphost14,wls1,2015-08-25 16:11:00.0,2015-08-28 16:04:00.0)\n(lphost10,wls1,2015-08-21 13:16:00.0,2015-08-28 16:03:00.0)\n(lphost10,wls2,2015-09-16 15:19:00.0,2015-09-21 09:13:00.0)\n(lphost11,wls2,2015-09-14 14:54:00.0,2015-09-21 09:34:00.0)\n(lphost06,wls1,2015-09-22 07:28:00.0,2015-09-25 09:27:00.0)\n(lphost15,wls1,2015-09-28 18:53:00.0,2015-09-29 12:09:00.0)\n(lphost06,wls1,2014-12-01 13:09:00.0,2014-12-01 13:12:00.0)\n(lphost06,wls1,2014-12-05 15:05:00.0,2014-12-05 15:31:00.0)\n(lphost06,wls1,2014-12-11 21:39:00.0,2014-12-11 21:40:00.0)\n(lphost06,wls1,2014-12-17 16:24:00.0,2014-12-17 16:25:00.0)\n(lphost06,wls1,2015-01-07 23:13:00.0,2015-01-07 23:17:00.0)\n(lphost06,wls1,2015-01-30 17:09:00.0,2015-01-30 19:54:00.0)\n(lphost06,wls1,2015-02-17 08:29:00.0,2015-02-17 08:30:00.0)\n(lphost06,wls1,2015-02-17 18:28:00.0,2015-02-17 18:30:00.0)\n(lphost06,wls1,2015-03-03 20:01:00.0,2015-03-03 20:02:00.0)\n(lphost06,wls1,2015-03-08 09:59:00.0,2015-03-08 13:31:00.0)\n(lphost06,wls1,2015-03-19 00:24:00.0,2015-03-19 00:25:00.0)\n(lphost06,wls1,2015-04-09 11:53:00.0,2015-04-09 11:56:00.0)\n(lphost06,wls1,2015-04-22 16:43:00.0,2015-04-22 16:47:00.0)\n(lphost06,wls1,2015-04-25 16:18:00.0,2015-04-25 19:18:00.0)\n(lphost06,wls1,2015-05-02 22:04:00.0,2015-05-02 22:04:00.0)\n(lphost06,wls1,2015-05-02 22:35:00.0,2015-05-02 22:36:00.0)\n(lphost06,wls1,2015-05-09 10:27:00.0,2015-05-09 10:51:00.0)\n(lphost06,wls1,2015-05-11 05:29:00.0,2015-05-11 05:33:00.0)\n(lphost06,wls1,2015-05-11 05:37:00.0,2015-05-11 05:53:00.0)\n(lphost06,wls1,2015-07-04 06:22:00.0,2015-07-04 12:57:00.0)\n(lphost06,wls1,2015-07-11 12:28:00.0,2015-07-11 12:28:00.0)\n(lphost06,wls1,2015-07-13 08:24:00.0,2015-07-13 10:39:00.0)\n(lphost06,wls1,2015-07-24 17:14:00.0,2015-07-24 18:52:00.0)\n(lphost06,wls1,2015-08-28 16:01:00.0,2015-08-28 17:02:00.0)\n(lphost06,wls1,2015-09-11 19:34:00.0,2015-09-11 19:36:00.0)\n(lphost06,wls1,2015-09-11 20:19:00.0,2015-09-11 20:19:00.0)\n(lphost06,wls1,2015-09-25 09:27:00.0,2015-09-25 09:30:00.0)\n(lphost06,wls1,2015-09-25 16:03:00.0,2015-09-25 17:28:00.0)\n(lphost06,wls1,2015-09-28 06:20:00.0,2015-09-28 06:27:00.0)\n(lphost06,wls1,2015-09-29 12:32:00.0,2015-09-29 12:37:00.0)\n(lphost06,wls1,2015-09-29 12:56:00.0,2015-09-29 12:59:00.0)\n(lphost14,wls2,2014-12-05 15:08:00.0,2014-12-05 15:34:00.0)\n(lphost14,wls2,2014-12-11 21:52:00.0,2014-12-11 21:54:00.0)\n(lphost14,wls2,2015-01-07 23:13:00.0,2015-01-07 23:16:00.0)\n(lphost14,wls2,2015-01-30 17:12:00.0,2015-01-30 20:00:00.0)\n(lphost14,wls2,2015-02-17 19:00:00.0,2015-02-17 19:04:00.0)\n(lphost14,wls2,2015-03-08 10:02:00.0,2015-03-08 13:34:00.0)\n(lphost14,wls2,2015-03-08 16:04:00.0,2015-03-09 01:05:00.0)\n(lphost14,wls2,2015-03-19 00:51:00.0,2015-03-19 00:52:00.0)\n(lphost14,wls2,2015-04-25 16:21:00.0,2015-04-25 19:26:00.0)\n(lphost14,wls2,2015-05-02 22:29:00.0,2015-05-02 22:30:00.0)\n(lphost14,wls2,2015-05-02 22:41:00.0,2015-05-02 22:41:00.0)\n(lphost14,wls2,2015-05-09 11:13:00.0,2015-05-09 11:14:00.0)\n(lphost14,wls2,2015-05-17 01:00:00.0,2015-06-16 18:19:00.0)\n(lphost17,wls1,2014-12-05 15:06:00.0,2014-12-05 15:32:00.0)\n(lphost17,wls1,2014-12-11 21:57:00.0,2014-12-11 22:00:00.0)\n(lphost17,wls1,2015-01-07 23:12:00.0,2015-01-07 23:18:00.0)\n(lphost17,wls1,2015-01-30 17:13:00.0,2015-01-30 19:58:00.0)\n(lphost17,wls1,2015-02-16 12:26:00.0,2015-02-16 12:31:00.0)\n(lphost17,wls1,2015-02-17 18:46:00.0,2015-02-17 18:47:00.0)\n(lphost17,wls1,2015-02-27 14:05:00.0,2015-02-27 14:15:00.0)\n(lphost17,wls1,2015-03-02 08:54:00.0,2015-03-02 08:58:00.0)\n(lphost17,wls1,2015-03-08 10:01:00.0,2015-03-08 13:32:00.0)\n(lphost17,wls1,2015-03-11 07:36:00.0,2015-03-11 07:55:00.0)\n(lphost17,wls1,2015-03-19 00:48:00.0,2015-03-19 00:48:00.0)\n(lphost17,wls1,2015-03-27 09:16:00.0,2015-03-27 09:25:00.0)\n(lphost17,wls1,2015-04-25 16:21:00.0,2015-04-25 19:24:00.0)\n(lphost17,wls1,2015-05-02 22:29:00.0,2015-05-02 22:30:00.0)\n(lphost17,wls1,2015-05-02 22:38:00.0,2015-05-02 22:38:00.0)\n(lphost17,wls1,2015-05-09 11:09:00.0,2015-05-09 11:11:00.0)\n(lphost17,wls1,2015-05-17 01:00:00.0,2015-06-16 18:18:00.0)\n(lphost17,wls1,2015-06-18 09:29:00.0,2015-06-18 09:40:00.0)\n(lphost17,wls1,2015-06-24 13:28:00.0,2015-06-24 13:35:00.0)\n(lphost17,wls1,2015-07-04 06:32:00.0,2015-07-04 12:50:00.0)\n(lphost17,wls1,2015-07-11 13:10:00.0,2015-07-11 13:15:00.0)\n(lphost17,wls1,2015-07-13 05:44:00.0,2015-07-13 09:34:00.0)\n(lphost17,wls1,2015-07-13 09:38:00.0,2015-07-13 09:47:00.0)\n(lphost17,wls1,2015-07-24 17:34:00.0,2015-07-24 18:52:00.0)\n(lphost17,wls1,2015-08-13 21:21:00.0,2015-08-13 21:30:00.0)\n(lphost17,wls1,2015-08-13 22:45:00.0,2015-08-13 22:46:00.0)\n(lphost17,wls1,2015-08-20 20:13:00.0,2015-08-20 20:14:00.0)\n(lphost17,wls1,2015-08-28 16:04:00.0,2015-08-28 16:45:00.0)\n(lphost17,wls1,2015-09-11 20:05:00.0,2015-09-11 20:07:00.0)\n(lphost17,wls1,2015-09-21 09:53:00.0,2015-09-21 10:11:00.0)\n(lphost17,wls1,2015-09-25 16:04:00.0,2015-09-25 17:31:00.0)\n(lphost17,wls1,2015-09-29 12:04:00.0,2015-09-29 12:36:00.0)\n(lphost17,wls1,2015-09-30 06:58:00.0,2015-09-30 07:19:00.0)\n(lphost15,wls1,2014-12-05 15:06:00.0,2014-12-05 15:32:00.0)\n(lphost15,wls1,2014-12-11 21:56:00.0,2014-12-11 21:57:00.0)\n(lphost15,wls1,2015-01-07 23:12:00.0,2015-01-07 23:13:00.0)\n(lphost15,wls1,2015-01-30 17:12:00.0,2015-01-30 19:59:00.0)\n(lphost15,wls1,2015-02-13 12:32:00.0,2015-02-13 12:53:00.0)\n(lphost15,wls1,2015-02-17 19:05:00.0,2015-02-17 19:07:00.0)\n(lphost15,wls1,2015-03-08 10:01:00.0,2015-03-08 13:32:00.0)\n(lphost15,wls1,2015-03-19 00:52:00.0,2015-03-19 00:52:00.0)\n(lphost15,wls1,2015-04-25 16:21:00.0,2015-04-25 19:24:00.0)\n(lphost15,wls1,2015-05-02 22:28:00.0,2015-05-02 22:29:00.0)\n(lphost15,wls1,2015-05-02 22:38:00.0,2015-05-02 22:39:00.0)\n(lphost15,wls1,2015-05-09 11:17:00.0,2015-05-09 11:18:00.0)\n(lphost15,wls1,2015-05-17 01:00:00.0,2015-06-16 18:17:00.0)\n(lphost15,wls1,2015-07-03 23:31:00.0,2015-07-03 23:33:00.0)\n(lphost15,wls1,2015-07-04 06:31:00.0,2015-07-04 12:54:00.0)\n(lphost15,wls1,2015-07-11 13:37:00.0,2015-07-11 13:38:00.0)\n(lphost15,wls1,2015-07-13 05:31:00.0,2015-07-13 10:16:00.0)\n(lphost15,wls1,2015-07-24 17:35:00.0,2015-07-24 18:52:00.0)\n(lphost15,wls1,2015-08-12 08:09:00.0,2015-08-12 08:15:00.0)\n(lphost15,wls1,2015-08-28 16:04:00.0,2015-08-28 17:11:00.0)\n(lphost15,wls1,2015-09-11 20:02:00.0,2015-09-11 20:03:00.0)\n(lphost15,wls1,2015-09-25 16:04:00.0,2015-09-25 17:32:00.0)\n(lphost15,wls1,2015-09-29 12:09:00.0,2015-09-29 12:49:00.0)\n(lphost11,wls2,2014-12-05 15:07:00.0,2014-12-05 15:33:00.0)\n(lphost11,wls2,2014-12-11 21:51:00.0,2014-12-11 21:54:00.0)\n(lphost11,wls2,2014-12-18 09:31:00.0,2014-12-18 09:32:00.0)\n(lphost11,wls2,2015-01-07 23:08:00.0,2015-01-07 23:10:00.0)\n(lphost11,wls2,2015-01-30 17:11:00.0,2015-01-30 19:59:00.0)\n(lphost11,wls2,2015-02-17 18:19:00.0,2015-02-17 18:25:00.0)\n(lphost11,wls2,2015-03-08 10:01:00.0,2015-03-08 13:33:00.0)\n(lphost11,wls2,2015-03-19 00:35:00.0,2015-03-19 00:35:00.0)\n(lphost11,wls2,2015-04-25 16:21:00.0,2015-04-25 19:26:00.0)\n(lphost11,wls2,2015-05-02 22:28:00.0,2015-05-02 22:29:00.0)\n(lphost11,wls2,2015-05-02 22:40:00.0,2015-05-02 22:41:00.0)\n(lphost11,wls2,2015-05-09 11:09:00.0,2015-05-09 11:10:00.0)\n(lphost11,wls2,2015-05-17 01:00:00.0,2015-06-16 18:18:00.0)\n(lphost11,wls2,2015-07-04 06:29:00.0,2015-07-04 12:57:00.0)\n(lphost11,wls2,2015-07-11 13:03:00.0,2015-07-11 13:03:00.0)\n(lphost11,wls2,2015-07-13 08:31:00.0,2015-07-13 10:31:00.0)\n(lphost11,wls2,2015-07-24 17:35:00.0,2015-07-24 18:54:00.0)\n(lphost11,wls2,2015-08-28 16:07:00.0,2015-08-28 17:13:00.0)\n(lphost11,wls2,2015-09-11 20:39:00.0,2015-09-11 20:41:00.0)\n(lphost11,wls2,2015-09-21 09:34:00.0,2015-09-21 10:17:00.0)\n(lphost11,wls2,2015-09-25 16:04:00.0,2015-09-25 17:34:00.0)\n(lphost08,wls1,2014-12-05 15:05:00.0,2014-12-05 15:31:00.0)\n(lphost08,wls1,2014-12-11 21:45:00.0,2014-12-11 21:46:00.0)\n(lphost08,wls1,2015-01-07 23:13:00.0,2015-01-07 23:16:00.0)\n(lphost08,wls1,2015-01-30 17:08:00.0,2015-01-30 19:57:00.0)\n(lphost08,wls1,2015-02-17 18:52:00.0,2015-02-17 18:53:00.0)\n(lphost08,wls1,2015-03-08 10:00:00.0,2015-03-08 13:32:00.0)\n(lphost08,wls1,2015-03-19 00:29:00.0,2015-03-19 00:30:00.0)\n(lphost08,wls1,2015-03-30 15:52:00.0,2015-03-30 15:58:00.0)\n(lphost08,wls1,2015-04-13 15:38:00.0,2015-04-13 15:39:00.0)\n(lphost08,wls1,2015-04-20 14:41:00.0,2015-04-20 14:41:00.0)\n(lphost08,wls1,2015-04-25 16:20:00.0,2015-04-25 19:23:00.0)\n(lphost08,wls1,2015-05-02 22:16:00.0,2015-05-02 22:16:00.0)\n(lphost08,wls1,2015-05-02 22:38:00.0,2015-05-02 22:38:00.0)\n(lphost08,wls1,2015-05-09 10:56:00.0,2015-05-09 10:58:00.0)\n(lphost08,wls1,2015-05-11 04:54:00.0,2015-05-11 05:27:00.0)\n(lphost08,wls1,2015-07-04 06:24:00.0,2015-07-04 12:55:00.0)\n(lphost08,wls1,2015-07-11 12:40:00.0,2015-07-11 12:42:00.0)\n(lphost08,wls1,2015-07-13 07:19:00.0,2015-07-13 10:28:00.0)\n(lphost08,wls1,2015-07-24 17:35:00.0,2015-07-24 18:51:00.0)\n(lphost08,wls1,2015-08-28 16:03:00.0,2015-08-28 17:11:00.0)\n(lphost08,wls1,2015-09-11 19:42:00.0,2015-09-11 19:43:00.0)\n(lphost08,wls1,2015-09-25 16:03:00.0,2015-09-25 17:29:00.0)\n(lphost08,wls2,2014-12-05 15:06:00.0,2014-12-05 15:34:00.0)\n(lphost08,wls2,2014-12-11 21:45:00.0,2014-12-11 21:48:00.0)\n(lphost08,wls2,2015-01-07 23:13:00.0,2015-01-07 23:17:00.0)\n(lphost08,wls2,2015-01-30 17:09:00.0,2015-01-30 19:59:00.0)\n(lphost08,wls2,2015-02-17 18:53:00.0,2015-02-17 18:55:00.0)\n(lphost08,wls2,2015-03-08 10:00:00.0,2015-03-08 13:33:00.0)\n(lphost08,wls2,2015-03-19 00:30:00.0,2015-03-19 00:33:00.0)\n(lphost08,wls2,2015-04-25 16:19:00.0,2015-04-25 19:25:00.0)\n(lphost08,wls2,2015-05-02 22:18:00.0,2015-05-02 22:19:00.0)\n(lphost08,wls2,2015-05-02 22:40:00.0,2015-05-02 22:41:00.0)\n(lphost08,wls2,2015-05-09 10:59:00.0,2015-05-09 11:01:00.0)\n(lphost08,wls2,2015-05-17 01:00:00.0,2015-06-16 18:19:00.0)\n(lphost08,wls2,2015-07-04 06:24:00.0,2015-07-04 12:59:00.0)\n(lphost08,wls2,2015-07-11 12:42:00.0,2015-07-11 12:42:00.0)\n(lphost08,wls2,2015-07-13 08:37:00.0,2015-07-13 10:30:00.0)\n(lphost08,wls2,2015-07-24 17:36:00.0,2015-07-24 18:54:00.0)\n(lphost08,wls2,2015-08-28 16:03:00.0,2015-08-28 17:12:00.0)\n(lphost08,wls2,2015-09-11 20:23:00.0,2015-09-11 20:24:00.0)\n(lphost08,wls2,2015-09-25 16:03:00.0,2015-09-25 17:31:00.0)\n(lphost08,wls2,2015-09-28 05:32:00.0,2015-09-28 06:24:00.0)\n(lphost11,wls1,2014-12-05 15:06:00.0,2014-12-05 15:32:00.0)\n(lphost11,wls1,2014-12-11 15:31:00.0,2014-12-11 15:34:00.0)\n(lphost11,wls1,2014-12-11 21:51:00.0,2014-12-11 21:52:00.0)\n(lphost11,wls1,2014-12-18 10:28:00.0,2014-12-18 10:29:00.0)\n(lphost11,wls1,2015-01-07 23:08:00.0,2015-01-07 23:09:00.0)\n(lphost11,wls1,2015-01-29 17:39:00.0,2015-01-29 17:40:00.0)\n(lphost11,wls1,2015-01-30 17:11:00.0,2015-01-30 19:58:00.0)\n(lphost11,wls1,2015-02-17 18:18:00.0,2015-02-17 18:24:00.0)\n(lphost11,wls1,2015-03-08 10:00:00.0,2015-03-08 13:32:00.0)\n(lphost11,wls1,2015-03-18 10:31:00.0,2015-03-18 10:35:00.0)\n(lphost11,wls1,2015-03-19 00:33:00.0,2015-03-19 00:34:00.0)\n(lphost11,wls1,2015-03-27 11:41:00.0,2015-03-27 11:44:00.0)\n(lphost11,wls1,2015-04-25 16:20:00.0,2015-04-25 19:23:00.0)\n(lphost11,wls1,2015-05-02 22:25:00.0,2015-05-02 22:25:00.0)\n(lphost11,wls1,2015-05-02 22:38:00.0,2015-05-02 22:38:00.0)\n(lphost11,wls1,2015-05-09 11:07:00.0,2015-05-09 11:08:00.0)\n(lphost11,wls1,2015-05-17 01:00:00.0,2015-06-16 18:17:00.0)\n(lphost11,wls1,2015-07-04 06:28:00.0,2015-07-04 12:55:00.0)\n(lphost11,wls1,2015-07-11 13:00:00.0,2015-07-11 13:01:00.0)\n(lphost11,wls1,2015-07-24 17:35:00.0,2015-07-24 18:52:00.0)\n(lphost11,wls1,2015-08-03 14:44:00.0,2015-08-03 14:48:00.0)\n(lphost11,wls1,2015-08-05 12:40:00.0,2015-08-05 12:52:00.0)\n(lphost11,wls1,2015-08-28 16:03:00.0,2015-08-28 17:11:00.0)\n(lphost11,wls1,2015-09-11 19:56:00.0,2015-09-11 19:58:00.0)\n(lphost11,wls1,2015-09-21 08:32:00.0,2015-09-21 10:16:00.0)\n(lphost11,wls1,2015-09-25 16:03:00.0,2015-09-25 17:32:00.0)\n(lphost18,wls2,2014-12-03 09:12:00.0,2014-12-03 09:26:00.0)\n(lphost18,wls2,2014-12-05 15:07:00.0,2014-12-05 15:34:00.0)\n(lphost18,wls2,2014-12-11 21:58:00.0,2014-12-11 22:01:00.0)\n(lphost18,wls2,2015-01-07 23:13:00.0,2015-01-07 23:17:00.0)\n(lphost18,wls2,2015-01-13 14:13:00.0,2015-01-13 14:18:00.0)\n(lphost18,wls2,2015-01-30 17:14:00.0,2015-01-30 20:01:00.0)\n(lphost18,wls2,2015-02-16 11:10:00.0,2015-02-16 11:12:00.0)\n(lphost18,wls2,2015-02-17 18:52:00.0,2015-02-17 18:55:00.0)\n(lphost18,wls2,2015-03-08 10:01:00.0,2015-03-08 13:34:00.0)\n(lphost18,wls2,2015-03-08 16:05:00.0,2015-03-09 01:05:00.0)\n(lphost18,wls2,2015-03-19 00:51:00.0,2015-03-19 00:52:00.0)\n(lphost18,wls2,2015-03-24 08:04:00.0,2015-03-24 08:13:00.0)\n(lphost18,wls2,2015-04-25 16:22:00.0,2015-04-25 19:26:00.0)\n(lphost18,wls2,2015-05-02 22:33:00.0,2015-05-02 22:33:00.0)\n(lphost18,wls2,2015-05-02 22:41:00.0,2015-05-02 22:42:00.0)\n(lphost18,wls2,2015-05-09 11:19:00.0,2015-05-09 11:20:00.0)\n(lphost18,wls2,2015-05-11 09:30:00.0,2015-05-11 09:39:00.0)\n(lphost18,wls2,2015-07-01 13:55:00.0,2015-07-01 14:10:00.0)\n(lphost18,wls2,2015-07-04 06:31:00.0,2015-07-04 12:30:00.0)\n(lphost18,wls2,2015-07-04 12:37:00.0,2015-07-04 12:44:00.0)\n(lphost18,wls2,2015-07-11 13:21:00.0,2015-07-11 13:22:00.0)\n(lphost18,wls2,2015-07-13 05:48:00.0,2015-07-13 06:04:00.0)\n(lphost18,wls2,2015-07-13 08:49:00.0,2015-07-13 09:25:00.0)\n(lphost18,wls2,2015-07-24 17:37:00.0,2015-07-24 18:54:00.0)\n(lphost18,wls2,2015-08-13 21:40:00.0,2015-08-13 21:41:00.0)\n(lphost18,wls2,2015-08-13 22:55:00.0,2015-08-13 22:56:00.0)\n(lphost18,wls2,2015-08-20 20:20:00.0,2015-08-20 20:20:00.0)\n(lphost18,wls2,2015-08-28 16:05:00.0,2015-08-28 16:51:00.0)\n(lphost18,wls2,2015-09-11 20:49:00.0,2015-09-11 20:50:00.0)\n(lphost18,wls2,2015-09-21 08:30:00.0,2015-09-21 09:30:00.0)\n(lphost18,wls2,2015-09-25 16:04:00.0,2015-09-25 17:34:00.0)\n(lphost07,wls1,2014-12-01 13:42:00.0,2014-12-01 13:43:00.0)\n(lphost07,wls1,2014-12-05 15:06:00.0,2014-12-05 15:31:00.0)\n(lphost07,wls1,2014-12-11 21:44:00.0,2014-12-11 21:46:00.0)\n(lphost07,wls1,2015-01-07 23:13:00.0,2015-01-07 23:16:00.0)\n(lphost07,wls1,2015-01-30 17:07:00.0,2015-01-30 19:56:00.0)\n(lphost07,wls1,2015-02-17 18:38:00.0,2015-02-17 18:40:00.0)\n(lphost07,wls1,2015-03-08 10:00:00.0,2015-03-08 13:32:00.0)\n(lphost07,wls1,2015-03-19 00:29:00.0,2015-03-19 00:31:00.0)\n(lphost07,wls1,2015-04-25 16:18:00.0,2015-04-25 19:22:00.0)\n(lphost07,wls1,2015-05-02 22:10:00.0,2015-05-02 22:10:00.0)\n(lphost07,wls1,2015-05-02 22:38:00.0,2015-05-02 22:39:00.0)\n(lphost07,wls1,2015-05-09 10:29:00.0,2015-05-09 10:55:00.0)\n(lphost07,wls1,2015-05-11 05:35:00.0,2015-05-11 05:38:00.0)\n(lphost07,wls1,2015-05-11 05:43:00.0,2015-05-11 05:51:00.0)\n(lphost07,wls1,2015-05-11 09:41:00.0,2015-05-11 09:49:00.0)\n(lphost07,wls1,2015-07-04 06:22:00.0,2015-07-04 13:42:00.0)\n(lphost07,wls1,2015-07-06 04:28:00.0,2015-07-06 04:32:00.0)\n(lphost07,wls1,2015-07-11 12:33:00.0,2015-07-11 12:34:00.0)\n(lphost07,wls1,2015-07-13 08:35:00.0,2015-07-13 10:41:00.0)\n(lphost07,wls1,2015-07-24 17:30:00.0,2015-07-24 18:52:00.0)\n(lphost07,wls1,2015-08-28 16:02:00.0,2015-08-28 17:10:00.0)\n(lphost07,wls1,2015-09-11 19:39:00.0,2015-09-11 19:40:00.0)\n(lphost07,wls1,2015-09-21 08:31:00.0,2015-09-21 08:39:00.0)\n(lphost07,wls1,2015-09-21 08:51:00.0,2015-09-21 10:15:00.0)\n(lphost07,wls1,2015-09-25 16:03:00.0,2015-09-25 17:28:00.0)\n(lphost07,wls1,2015-09-28 06:12:00.0,2015-09-28 06:19:00.0)\n(lphost07,wls1,2015-09-28 06:23:00.0,2015-09-28 06:29:00.0)\n(lphost07,wls1,2015-09-29 12:07:00.0,2015-09-29 12:45:00.0)\n(lphost07,wls2,2014-12-05 15:06:00.0,2014-12-05 15:33:00.0)\n(lphost07,wls2,2014-12-11 21:44:00.0,2014-12-11 21:47:00.0)\n(lphost07,wls2,2015-01-07 23:13:00.0,2015-01-07 23:17:00.0)\n(lphost07,wls2,2015-01-30 17:07:00.0,2015-01-30 19:57:00.0)\n(lphost07,wls2,2015-02-17 18:38:00.0,2015-02-17 18:41:00.0)\n(lphost07,wls2,2015-03-08 10:00:00.0,2015-03-08 13:33:00.0)\n(lphost07,wls2,2015-03-19 00:30:00.0,2015-03-19 00:33:00.0)\n(lphost07,wls2,2015-04-25 16:19:00.0,2015-04-25 19:26:00.0)\n(lphost07,wls2,2015-05-02 22:12:00.0,2015-05-02 22:12:00.0)\n(lphost07,wls2,2015-05-02 22:42:00.0,2015-05-02 22:42:00.0)\n(lphost07,wls2,2015-05-09 10:57:00.0,2015-05-09 10:58:00.0)\n(lphost07,wls2,2015-05-11 05:18:00.0,2015-05-11 05:25:00.0)\n(lphost07,wls2,2015-05-11 05:29:00.0,2015-05-11 05:49:00.0)\n(lphost07,wls2,2015-05-11 09:47:00.0,2015-05-11 09:51:00.0)\n(lphost07,wls2,2015-07-04 06:23:00.0,2015-07-04 13:01:00.0)\n(lphost07,wls2,2015-07-06 04:22:00.0,2015-07-06 04:30:00.0)\n(lphost07,wls2,2015-07-11 12:35:00.0,2015-07-11 12:35:00.0)\n(lphost07,wls2,2015-07-13 08:37:00.0,2015-07-13 10:45:00.0)\n(lphost07,wls2,2015-07-24 17:30:00.0,2015-07-24 18:54:00.0)\n(lphost07,wls2,2015-08-28 16:03:00.0,2015-08-28 17:12:00.0)\n(lphost07,wls2,2015-09-11 20:21:00.0,2015-09-11 20:21:00.0)\n(lphost07,wls2,2015-09-21 08:42:00.0,2015-09-21 08:52:00.0)\n(lphost07,wls2,2015-09-21 09:07:00.0,2015-09-21 10:16:00.0)\n(lphost07,wls2,2015-09-25 16:03:00.0,2015-09-25 17:30:00.0)\n(lphost07,wls2,2015-09-28 06:07:00.0,2015-09-28 06:20:00.0)\n(lphost07,wls2,2015-09-29 11:58:00.0,2015-09-29 12:48:00.0)\n(lphost10,wls2,2014-12-05 15:10:00.0,2014-12-05 15:34:00.0)\n(lphost10,wls2,2014-12-11 21:50:00.0,2014-12-11 21:53:00.0)\n(lphost10,wls2,2015-01-07 23:13:00.0,2015-01-07 23:17:00.0)\n(lphost10,wls2,2015-01-15 13:49:00.0,2015-01-15 13:50:00.0)\n(lphost10,wls2,2015-01-15 15:33:00.0,2015-01-15 15:34:00.0)\n(lphost10,wls2,2015-01-30 17:10:00.0,2015-01-30 19:59:00.0)\n(lphost10,wls2,2015-02-17 18:04:00.0,2015-02-17 18:10:00.0)\n(lphost10,wls2,2015-03-08 10:00:00.0,2015-03-08 13:33:00.0)\n(lphost10,wls2,2015-03-19 00:42:00.0,2015-03-19 00:43:00.0)\n(lphost10,wls2,2015-04-25 16:23:00.0,2015-04-25 19:26:00.0)\n(lphost10,wls2,2015-05-02 22:26:00.0,2015-05-02 22:27:00.0)\n(lphost10,wls2,2015-05-02 22:40:00.0,2015-05-02 22:41:00.0)\n(lphost10,wls2,2015-05-09 11:07:00.0,2015-05-09 11:08:00.0)\n(lphost10,wls2,2015-05-17 01:00:00.0,2015-06-16 18:18:00.0)\n(lphost10,wls2,2015-06-18 10:50:00.0,2015-06-18 10:56:00.0)\n(lphost10,wls2,2015-07-04 06:25:00.0,2015-07-04 12:57:00.0)\n(lphost10,wls2,2015-07-11 12:55:00.0,2015-07-11 12:56:00.0)\n(lphost10,wls2,2015-07-13 07:08:00.0,2015-07-13 09:46:00.0)\n(lphost10,wls2,2015-07-23 18:27:00.0,2015-07-23 18:36:00.0)\n(lphost10,wls2,2015-07-24 17:37:00.0,2015-07-24 18:54:00.0)\n(lphost10,wls2,2015-08-28 16:07:00.0,2015-08-28 17:13:00.0)\n(lphost10,wls2,2015-09-11 20:34:00.0,2015-09-11 20:35:00.0)\n(lphost10,wls2,2015-09-21 09:13:00.0,2015-09-21 10:14:00.0)\n(lphost10,wls2,2015-09-25 16:04:00.0,2015-09-25 17:31:00.0)\n(lphost17,wls2,2014-12-05 15:07:00.0,2014-12-05 15:33:00.0)\n(lphost17,wls2,2014-12-11 21:58:00.0,2014-12-11 22:01:00.0)\n(lphost17,wls2,2015-01-07 23:16:00.0,2015-01-07 23:20:00.0)\n(lphost17,wls2,2015-01-30 17:17:00.0,2015-01-30 20:00:00.0)\n(lphost17,wls2,2015-02-16 12:34:00.0,2015-02-16 12:37:00.0)\n(lphost17,wls2,2015-02-17 18:46:00.0,2015-02-17 18:48:00.0)\n(lphost17,wls2,2015-03-02 09:16:00.0,2015-03-02 09:19:00.0)\n(lphost17,wls2,2015-03-08 10:01:00.0,2015-03-08 13:34:00.0)\n(lphost17,wls2,2015-03-11 07:54:00.0,2015-03-11 07:57:00.0)\n(lphost17,wls2,2015-03-19 00:50:00.0,2015-03-19 00:51:00.0)\n(lphost17,wls2,2015-03-25 10:34:00.0,2015-03-25 10:42:00.0)\n(lphost17,wls2,2015-03-25 13:08:00.0,2015-03-25 13:12:00.0)\n(lphost17,wls2,2015-03-25 14:17:00.0,2015-03-25 14:32:00.0)\n(lphost17,wls2,2015-04-25 16:22:00.0,2015-04-25 19:27:00.0)\n(lphost17,wls2,2015-05-02 22:32:00.0,2015-05-02 22:33:00.0)\n(lphost17,wls2,2015-05-02 22:40:00.0,2015-05-02 22:41:00.0)\n(lphost17,wls2,2015-05-09 11:14:00.0,2015-05-09 11:14:00.0)\n(lphost17,wls2,2015-05-17 01:00:00.0,2015-06-16 18:16:00.0)\n(lphost17,wls2,2015-06-24 14:33:00.0,2015-06-24 14:43:00.0)\n(lphost17,wls2,2015-07-04 06:32:00.0,2015-07-04 12:51:00.0)\n(lphost17,wls2,2015-07-11 13:16:00.0,2015-07-11 13:17:00.0)\n(lphost17,wls2,2015-07-24 17:38:00.0,2015-07-24 18:55:00.0)\n(lphost17,wls2,2015-08-13 21:32:00.0,2015-08-13 21:33:00.0)\n(lphost17,wls2,2015-08-13 22:47:00.0,2015-08-13 22:48:00.0)\n(lphost17,wls2,2015-08-20 20:19:00.0,2015-08-20 20:20:00.0)\n(lphost17,wls2,2015-08-28 16:04:00.0,2015-08-28 16:50:00.0)\n(lphost17,wls2,2015-09-11 20:46:00.0,2015-09-11 20:47:00.0)\n(lphost17,wls2,2015-09-21 09:58:00.0,2015-09-21 10:05:00.0)\n(lphost17,wls2,2015-09-25 16:04:00.0,2015-09-25 17:34:00.0)\n(lphost17,wls2,2015-09-29 12:01:00.0,2015-09-29 12:37:00.0)\n(lphost17,wls2,2015-09-30 06:50:00.0,2015-09-30 07:19:00.0)\n(lphost09,wls2,2014-12-05 15:06:00.0,2014-12-05 15:29:00.0)\n(lphost09,wls2,2014-12-11 21:49:00.0,2014-12-11 21:54:00.0)\n(lphost09,wls2,2015-01-07 23:14:00.0,2015-01-07 23:19:00.0)\n(lphost09,wls2,2015-01-30 17:13:00.0,2015-01-30 19:51:00.0)\n(lphost09,wls2,2015-02-17 18:58:00.0,2015-02-17 19:03:00.0)\n(lphost09,wls2,2015-03-08 10:00:00.0,2015-03-08 13:34:00.0)\n(lphost09,wls2,2015-03-19 00:43:00.0,2015-03-19 00:44:00.0)\n(lphost09,wls2,2015-04-25 16:24:00.0,2015-04-25 19:15:00.0)\n(lphost09,wls2,2015-05-02 22:26:00.0,2015-05-02 22:27:00.0)\n(lphost09,wls2,2015-05-02 22:40:00.0,2015-05-02 22:41:00.0)\n(lphost09,wls2,2015-05-09 10:57:00.0,2015-05-09 10:58:00.0)\n(lphost09,wls2,2015-05-09 11:04:00.0,2015-05-09 11:05:00.0)\n(lphost09,wls2,2015-05-11 05:25:00.0,2015-05-11 05:29:00.0)\n(lphost09,wls2,2015-05-11 05:34:00.0,2015-05-11 05:48:00.0)\n(lphost09,wls2,2015-07-04 06:28:00.0,2015-07-04 12:59:00.0)\n(lphost09,wls2,2015-07-11 12:49:00.0,2015-07-11 12:50:00.0)\n(lphost09,wls2,2015-07-13 08:01:00.0,2015-07-13 08:10:00.0)\n(lphost09,wls2,2015-07-13 09:01:00.0,2015-07-13 09:15:00.0)\n(lphost09,wls2,2015-07-24 17:36:00.0,2015-07-24 18:48:00.0)\n(lphost09,wls2,2015-08-28 16:07:00.0,2015-08-28 17:14:00.0)\n(lphost09,wls2,2015-09-11 20:30:00.0,2015-09-11 20:32:00.0)\n(lphost09,wls2,2015-09-20 09:16:00.0,2015-09-20 09:20:00.0)\n(lphost09,wls2,2015-09-25 16:04:00.0,2015-09-25 17:29:00.0)\n(lphost09,wls2,2015-09-28 05:38:00.0,2015-09-28 06:27:00.0)\n(lphost09,wls2,2015-09-29 12:24:00.0,2015-09-29 12:55:00.0)\n(lphost09,wls2,2015-09-30 07:01:00.0,2015-09-30 07:25:00.0)\n(lphost18,wls1,2014-12-05 15:06:00.0,2014-12-05 15:32:00.0)\n(lphost18,wls1,2014-12-11 21:58:00.0,2014-12-11 22:00:00.0)\n(lphost18,wls1,2014-12-19 16:09:00.0,2014-12-19 16:20:00.0)\n(lphost18,wls1,2015-01-07 23:12:00.0,2015-01-07 23:13:00.0)\n(lphost18,wls1,2015-01-30 17:13:00.0,2015-01-30 19:59:00.0)\n(lphost18,wls1,2015-02-16 11:02:00.0,2015-02-16 11:07:00.0)\n(lphost18,wls1,2015-02-17 18:52:00.0,2015-02-17 18:54:00.0)\n(lphost18,wls1,2015-03-08 10:00:00.0,2015-03-08 13:32:00.0)\n(lphost18,wls1,2015-03-08 16:05:00.0,2015-03-09 01:03:00.0)\n(lphost18,wls1,2015-03-19 00:49:00.0,2015-03-19 00:50:00.0)\n(lphost18,wls1,2015-03-26 15:12:00.0,2015-03-26 15:22:00.0)\n(lphost18,wls1,2015-04-25 16:21:00.0,2015-04-25 19:23:00.0)\n(lphost18,wls1,2015-05-02 22:31:00.0,2015-05-02 22:31:00.0)\n(lphost18,wls1,2015-05-02 22:39:00.0,2015-05-02 22:39:00.0)\n(lphost18,wls1,2015-05-09 11:16:00.0,2015-05-09 11:16:00.0)\n(lphost18,wls1,2015-05-11 09:30:00.0,2015-05-11 09:40:00.0)\n(lphost18,wls1,2015-05-11 09:42:00.0,2015-05-11 09:45:00.0)\n(lphost18,wls1,2015-07-04 06:31:00.0,2015-07-04 12:29:00.0)\n(lphost18,wls1,2015-07-04 12:36:00.0,2015-07-04 12:42:00.0)\n(lphost18,wls1,2015-07-06 11:39:00.0,2015-07-06 11:48:00.0)\n(lphost18,wls1,2015-07-11 13:19:00.0,2015-07-11 13:19:00.0)\n(lphost18,wls1,2015-07-13 05:48:00.0,2015-07-13 09:19:00.0)\n(lphost18,wls1,2015-07-24 17:34:00.0,2015-07-24 18:52:00.0)\n(lphost18,wls1,2015-08-13 21:34:00.0,2015-08-13 21:38:00.0)\n(lphost18,wls1,2015-08-13 22:52:00.0,2015-08-13 22:53:00.0)\n(lphost18,wls1,2015-08-20 20:16:00.0,2015-08-20 20:17:00.0)\n(lphost18,wls1,2015-08-28 16:04:00.0,2015-08-28 16:45:00.0)\n(lphost18,wls1,2015-09-11 20:10:00.0,2015-09-11 20:12:00.0)\n(lphost18,wls1,2015-09-25 16:04:00.0,2015-09-25 17:32:00.0)\n(lphost06,wls2,2014-12-05 15:06:00.0,2014-12-05 15:34:00.0)\n(lphost06,wls2,2014-12-11 21:40:00.0,2014-12-11 21:42:00.0)\n(lphost06,wls2,2014-12-17 15:58:00.0,2014-12-17 16:27:00.0)\n(lphost06,wls2,2015-01-07 23:13:00.0,2015-01-07 23:18:00.0)\n(lphost06,wls2,2015-01-30 17:05:00.0,2015-01-30 17:07:00.0)\n(lphost06,wls2,2015-02-17 08:25:00.0,2015-02-17 08:26:00.0)\n(lphost06,wls2,2015-02-17 18:28:00.0,2015-02-17 18:31:00.0)\n(lphost06,wls2,2015-03-08 10:00:00.0,2015-03-08 13:33:00.0)\n(lphost06,wls2,2015-03-19 00:24:00.0,2015-03-19 00:26:00.0)\n(lphost06,wls2,2015-04-22 16:53:00.0,2015-04-22 17:06:00.0)\n(lphost06,wls2,2015-04-25 16:19:00.0,2015-04-25 19:20:00.0)\n(lphost06,wls2,2015-04-28 17:23:00.0,2015-04-28 17:24:00.0)\n(lphost06,wls2,2015-05-02 22:07:00.0,2015-05-02 22:07:00.0)\n(lphost06,wls2,2015-05-02 22:38:00.0,2015-05-02 22:39:00.0)\n(lphost06,wls2,2015-05-02 22:41:00.0,2015-05-02 22:41:00.0)\n(lphost06,wls2,2015-05-09 10:58:00.0,2015-05-09 10:58:00.0)\n(lphost06,wls2,2015-05-11 05:26:00.0,2015-05-11 05:29:00.0)\n(lphost06,wls2,2015-05-11 05:48:00.0,2015-05-11 05:51:00.0)\n(lphost06,wls2,2015-07-04 06:22:00.0,2015-07-04 13:01:00.0)\n(lphost06,wls2,2015-07-11 12:30:00.0,2015-07-11 12:30:00.0)\n(lphost06,wls2,2015-07-13 08:32:00.0,2015-07-13 10:41:00.0)\n(lphost06,wls2,2015-07-24 17:13:00.0,2015-07-24 18:54:00.0)\n(lphost06,wls2,2015-08-28 16:02:00.0,2015-08-28 17:10:00.0)\n(lphost06,wls2,2015-09-11 20:21:00.0,2015-09-11 20:22:00.0)\n(lphost06,wls2,2015-09-25 16:03:00.0,2015-09-25 17:31:00.0)\n(lphost06,wls2,2015-09-28 06:22:00.0,2015-09-28 06:25:00.0)\n(lphost06,wls2,2015-09-29 12:38:00.0,2015-09-29 13:03:00.0)\n(lphost09,wls1,2014-12-05 15:06:00.0,2014-12-05 15:26:00.0)\n(lphost09,wls1,2014-12-11 21:49:00.0,2014-12-11 21:52:00.0)\n(lphost09,wls1,2015-01-07 23:13:00.0,2015-01-07 23:17:00.0)\n(lphost09,wls1,2015-01-19 17:37:00.0,2015-01-19 17:41:00.0)\n(lphost09,wls1,2015-01-30 17:09:00.0,2015-01-30 19:49:00.0)\n(lphost09,wls1,2015-02-09 17:21:00.0,2015-02-09 17:33:00.0)\n(lphost09,wls1,2015-02-17 18:58:00.0,2015-02-17 19:01:00.0)\n(lphost09,wls1,2015-03-06 00:25:00.0,2015-03-06 00:31:00.0)\n(lphost09,wls1,2015-03-08 10:00:00.0,2015-03-08 13:31:00.0)\n(lphost09,wls1,2015-03-19 00:40:00.0,2015-03-19 00:41:00.0)\n(lphost09,wls1,2015-04-25 16:20:00.0,2015-04-25 19:12:00.0)\n(lphost09,wls1,2015-05-02 22:23:00.0,2015-05-02 22:24:00.0)\n(lphost09,wls1,2015-05-02 22:38:00.0,2015-05-02 22:39:00.0)\n(lphost09,wls1,2015-05-09 10:27:00.0,2015-05-09 10:55:00.0)\n(lphost09,wls1,2015-05-09 11:02:00.0,2015-05-09 11:03:00.0)\n(lphost09,wls1,2015-05-17 01:00:00.0,2015-06-16 18:19:00.0)\n(lphost09,wls1,2015-07-04 06:24:00.0,2015-07-04 12:56:00.0)\n(lphost09,wls1,2015-07-11 12:47:00.0,2015-07-11 12:48:00.0)\n(lphost09,wls1,2015-07-13 07:59:00.0,2015-07-13 09:08:00.0)\n(lphost09,wls1,2015-07-24 17:36:00.0,2015-07-24 18:45:00.0)\n(lphost09,wls1,2015-08-28 16:03:00.0,2015-08-28 17:11:00.0)\n(lphost09,wls1,2015-09-11 19:50:00.0,2015-09-11 19:52:00.0)\n(lphost09,wls1,2015-09-21 09:24:00.0,2015-09-21 09:30:00.0)\n(lphost09,wls1,2015-09-25 16:04:00.0,2015-09-25 17:25:00.0)\n(lphost09,wls1,2015-09-28 05:43:00.0,2015-09-28 06:10:00.0)\n(lphost09,wls1,2015-09-29 12:30:00.0,2015-09-29 12:53:00.0)\n(lphost14,wls1,2014-12-05 15:06:00.0,2014-12-05 15:32:00.0)\n(lphost14,wls1,2014-12-11 21:52:00.0,2014-12-11 21:53:00.0)\n(lphost14,wls1,2015-01-07 23:11:00.0,2015-01-07 23:15:00.0)\n(lphost14,wls1,2015-01-30 17:11:00.0,2015-01-30 19:58:00.0)\n(lphost14,wls1,2015-02-17 18:59:00.0,2015-02-17 19:02:00.0)\n(lphost14,wls1,2015-02-26 16:23:00.0,2015-02-26 16:25:00.0)\n(lphost14,wls1,2015-03-08 10:00:00.0,2015-03-08 13:32:00.0)\n(lphost14,wls1,2015-03-08 16:04:00.0,2015-03-09 01:04:00.0)\n(lphost14,wls1,2015-03-19 00:49:00.0,2015-03-19 00:49:00.0)\n(lphost14,wls1,2015-04-16 14:46:00.0,2015-04-16 14:50:00.0)\n(lphost14,wls1,2015-04-25 16:20:00.0,2015-04-25 19:23:00.0)\n(lphost14,wls1,2015-05-02 22:26:00.0,2015-05-02 22:27:00.0)\n(lphost14,wls1,2015-05-02 22:38:00.0,2015-05-02 22:39:00.0)\n(lphost14,wls1,2015-05-09 11:08:00.0,2015-05-09 11:09:00.0)\n(lphost14,wls1,2015-05-11 05:06:00.0,2015-05-11 05:25:00.0)\n(lphost14,wls1,2015-05-17 01:00:00.0,2015-06-16 18:17:00.0)\n(lphost14,wls1,2015-07-03 09:13:00.0,2015-07-03 09:20:00.0)\n(lphost14,wls1,2015-07-04 06:29:00.0,2015-07-04 12:55:00.0)\n(lphost14,wls1,2015-07-11 13:05:00.0,2015-07-11 13:05:00.0)\n(lphost14,wls1,2015-07-13 07:26:00.0,2015-07-13 09:57:00.0)\n(lphost14,wls1,2015-07-13 10:02:00.0,2015-07-13 10:03:00.0)\n(lphost14,wls1,2015-07-13 10:08:00.0,2015-07-13 10:13:00.0)\n(lphost14,wls1,2015-07-24 17:35:00.0,2015-07-24 18:52:00.0)\n(lphost14,wls1,2015-08-12 09:08:00.0,2015-08-12 09:21:00.0)\n(lphost14,wls1,2015-08-28 16:04:00.0,2015-08-28 17:11:00.0)\n(lphost14,wls1,2015-09-11 20:00:00.0,2015-09-11 20:01:00.0)\n(lphost14,wls1,2015-09-13 08:32:00.0,2015-09-13 09:38:00.0)\n(lphost14,wls1,2015-09-21 08:53:00.0,2015-09-21 09:30:00.0)\n(lphost14,wls1,2015-09-25 16:03:00.0,2015-09-25 17:31:00.0)\n(lphost14,wls1,2015-09-29 12:19:00.0,2015-09-29 12:49:00.0)\n(lphost15,wls2,2014-12-05 15:06:00.0,2014-12-05 15:34:00.0)\n(lphost15,wls2,2014-12-11 21:56:00.0,2014-12-11 21:59:00.0)\n(lphost15,wls2,2015-01-07 23:13:00.0,2015-01-07 23:17:00.0)\n(lphost15,wls2,2015-01-23 14:01:00.0,2015-01-23 14:10:00.0)\n(lphost15,wls2,2015-01-30 17:13:00.0,2015-01-30 20:00:00.0)\n(lphost15,wls2,2015-02-13 12:50:00.0,2015-02-13 12:55:00.0)\n(lphost15,wls2,2015-02-17 19:06:00.0,2015-02-17 19:08:00.0)\n(lphost15,wls2,2015-03-08 10:02:00.0,2015-03-08 13:34:00.0)\n(lphost15,wls2,2015-03-19 00:54:00.0,2015-03-19 00:55:00.0)\n(lphost15,wls2,2015-04-25 16:21:00.0,2015-04-25 19:26:00.0)\n(lphost15,wls2,2015-05-02 22:31:00.0,2015-05-02 22:31:00.0)\n(lphost15,wls2,2015-05-02 22:41:00.0,2015-05-02 22:41:00.0)\n(lphost15,wls2,2015-05-09 11:19:00.0,2015-05-09 11:20:00.0)\n(lphost15,wls2,2015-05-17 01:00:00.0,2015-06-16 18:19:00.0)\n(lphost15,wls2,2015-07-03 23:37:00.0,2015-07-03 23:38:00.0)\n(lphost15,wls2,2015-07-04 06:31:00.0,2015-07-04 12:57:00.0)\n(lphost15,wls2,2015-07-11 13:39:00.0,2015-07-11 13:39:00.0)\n(lphost15,wls2,2015-07-13 08:46:00.0,2015-07-13 10:22:00.0)\n(lphost15,wls2,2015-07-24 17:35:00.0,2015-07-24 18:54:00.0)\n(lphost15,wls2,2015-08-28 16:05:00.0,2015-08-28 17:13:00.0)\n(lphost15,wls2,2015-09-11 20:44:00.0,2015-09-11 20:45:00.0)\n(lphost15,wls2,2015-09-25 16:04:00.0,2015-09-25 17:34:00.0)\n(lphost15,wls2,2015-09-29 12:36:00.0,2015-09-29 12:46:00.0)\n(lphost10,wls1,2014-12-03 16:21:00.0,2014-12-03 16:35:00.0)\n(lphost10,wls1,2014-12-05 15:05:00.0,2014-12-05 15:32:00.0)\n(lphost10,wls1,2014-12-11 21:50:00.0,2014-12-11 21:52:00.0)\n(lphost10,wls1,2014-12-18 12:55:00.0,2014-12-18 12:58:00.0)\n(lphost10,wls1,2015-01-07 23:12:00.0,2015-01-07 23:16:00.0)\n(lphost10,wls1,2015-01-15 13:47:00.0,2015-01-15 13:48:00.0)\n(lphost10,wls1,2015-01-15 15:31:00.0,2015-01-15 15:34:00.0)\n(lphost10,wls1,2015-01-23 17:36:00.0,2015-01-23 18:01:00.0)\n(lphost10,wls1,2015-01-30 17:10:00.0,2015-01-30 19:57:00.0)\n(lphost10,wls1,2015-02-17 18:03:00.0,2015-02-17 18:07:00.0)\n(lphost10,wls1,2015-03-08 10:00:00.0,2015-03-08 13:32:00.0)\n(lphost10,wls1,2015-03-13 03:03:00.0,2015-03-13 03:27:00.0)\n(lphost10,wls1,2015-03-19 00:39:00.0,2015-03-19 00:40:00.0)\n(lphost10,wls1,2015-04-21 10:30:00.0,2015-04-21 10:35:00.0)\n(lphost10,wls1,2015-04-25 16:20:00.0,2015-04-25 19:22:00.0)\n(lphost10,wls1,2015-05-02 22:24:00.0,2015-05-02 22:25:00.0)\n(lphost10,wls1,2015-05-02 22:38:00.0,2015-05-02 22:38:00.0)\n(lphost10,wls1,2015-05-09 11:04:00.0,2015-05-09 11:05:00.0)\n(lphost10,wls1,2015-05-17 01:00:00.0,2015-06-16 18:18:00.0)\n(lphost10,wls1,2015-06-18 10:49:00.0,2015-06-18 10:55:00.0)\n(lphost10,wls1,2015-07-04 06:24:00.0,2015-07-04 12:56:00.0)\n(lphost10,wls1,2015-07-11 12:53:00.0,2015-07-11 12:54:00.0)\n(lphost10,wls1,2015-07-13 07:08:00.0,2015-07-13 09:26:00.0)\n(lphost10,wls1,2015-07-24 17:37:00.0,2015-07-24 18:52:00.0)\n(lphost10,wls1,2015-08-28 16:03:00.0,2015-08-28 17:11:00.0)\n(lphost10,wls1,2015-09-11 19:54:00.0,2015-09-11 19:55:00.0)\n(lphost10,wls1,2015-09-21 08:22:00.0,2015-09-21 08:39:00.0)\n(lphost10,wls1,2015-09-25 16:03:00.0,2015-09-25 17:29:00.0)\n"}]},"apps":[],"jobName":"paragraph_1512566002586_-2009715321","id":"20171206-141322_1054047056","dateCreated":"2017-12-06T14:13:22+0100","dateStarted":"2018-01-19T09:20:51+0100","dateFinished":"2018-01-19T09:21:06+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:73"},{"text":"%md\n\n## Label Points","user":"anonymous","dateUpdated":"2017-12-18T12:18:11+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Label Points</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1508832421630_-2119543266","id":"20171024-100701_336485712","dateCreated":"2017-10-24T10:07:01+0200","dateStarted":"2017-12-18T12:18:11+0100","dateFinished":"2017-12-18T12:18:11+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:74"},{"text":"%kryo-spark\nval labeledDataset = featureVectors\n    .select(\"_1\", \"_2\", \"_3\", \"_4\")\n    .filter(row => {\n        val ts = row.getTimestamp(2)\n        val host = row.getString(0)\n        val proc = row.getString(1)\n        \n        !inList(restartsBC.value, host, proc, ts)\n    })\n    .map(row => {\n        val ts = row.getTimestamp(2)\n        val host = row.getString(0)\n        val proc = row.getString(1)\n        \n        val label = if (inList(anomaliesBC.value, host, proc, ts)) 1.0\n                else 0.0\n        \n        Labeled(host, proc, ts, row.get(3).asInstanceOf[Vector], label)\n    })\n    \n\nlabeledDataset.persist(StorageLevel.OFF_HEAP)\nlabeledDataset.count","user":"anonymous","dateUpdated":"2018-01-19T09:20:07+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"labeledDataset: org.apache.spark.sql.Dataset[Labeled] = [host: string, procs: string ... 3 more fields]\nres26: labeledDataset.type = [host: string, procs: string ... 3 more fields]\nres27: Long = 7501147\n"}]},"apps":[],"jobName":"paragraph_1504607537809_-66779024","id":"20170905-123217_1467994895","dateCreated":"2017-09-05T12:32:17+0200","dateStarted":"2018-01-19T09:20:51+0100","dateFinished":"2018-01-19T09:32:12+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:75"},{"text":"%md\n\n# Export data for publication","user":"anonymous","dateUpdated":"2018-01-11T16:09:29+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Export data for publication</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1515683351912_946503416","id":"20180111-160911_2025870577","dateCreated":"2018-01-11T16:09:11+0100","dateStarted":"2018-01-11T16:09:29+0100","dateFinished":"2018-01-11T16:09:30+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:76"},{"text":"%kryo-spark\nimport sqlContext.implicits._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.Row\nimport org.apache.spark.sql.catalyst.encoders.RowEncoder\n\nval schema = StructType(\n    (List(\n        StructField(\"host\", StringType, false),\n        StructField(\"process\", StringType, false),\n        StructField(\"timestamp\", TimestampType, false),\n        StructField(\"isAnomaly\", BooleanType, false)\n    ) ++ featureList.asScala.map(f => StructField(f, DoubleType, false))).toArray\n)\n\nval formatted = labeledDataset\n    .map(l => Row.fromSeq(Seq(l.host, l.procs, l.ts, (l.manualLabel > 0.0)) ++ l.features.toArray.toSeq)) (RowEncoder(schema))\n    .orderBy($\"host\", $\"process\", $\"timestamp\")\n\nformatted.write.format(\"csv\").option(\"header\", \"true\").option(\"sep\", \",\").option(\"timestampFormat\", \"yyyy-MM-dd HH:mm\").option(\"compression\", \"none\").save(\"/anomaly-detection-ml/publish/\")","user":"anonymous","dateUpdated":"2018-01-19T13:41:38+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import sqlContext.implicits._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.Row\nimport org.apache.spark.sql.catalyst.encoders.RowEncoder\nschema: org.apache.spark.sql.types.StructType = StructType(StructField(host,StringType,false), StructField(process,StringType,false), StructField(timestamp,TimestampType,false), StructField(isAnomaly,BooleanType,false), StructField(Prepared statement cache hit rate : ((MXBean(com.bea:Name=source06,Type=JDBCDataSourceRuntime).PrepStmtCacheHitCount / MXBean(com.bea:Name=source06,Type=JDBCDataSourceRuntime).PrepStmtCacheMissCount)),DoubleType,false), StructField(Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed / MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max)),DoubleType,false), StructField(Active connections : (MXBean(com.bea:Name=source04,Type=JDBCConnectionPoolRuntime).ActiveConnectionsCurrentCount),DoubleType,false), StructField(Avai...formatted: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [host: string, process: string ... 233 more fields]\n"}]},"apps":[],"jobName":"paragraph_1515683192819_-1222539028","id":"20180111-160632_1158765799","dateCreated":"2018-01-11T16:06:32+0100","dateStarted":"2018-01-19T13:41:38+0100","dateFinished":"2018-01-19T13:43:18+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:77"},{"text":"%md\n\n# 1. Split into train and validate set\n","user":"anonymous","dateUpdated":"2017-12-18T12:18:12+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>1. Split into train and validate set</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1506002212328_-1261696405","id":"20170921-155652_672737688","dateCreated":"2017-09-21T15:56:52+0200","dateStarted":"2017-12-18T12:18:12+0100","dateFinished":"2017-12-18T12:18:13+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:78"},{"text":"%kryo-spark\nval splitDate = Timestamp.valueOf(\"2015-05-01 00:00:00\")\n\nval fullRawTrainingMultilabeled = labeledDataset.filter(_.ts.before(splitDate)).persist(StorageLevel.OFF_HEAP)\nval validateRawMultilabeled = labeledDataset.filter(_.ts.after(splitDate))","user":"anonymous","dateUpdated":"2017-12-18T12:27:46+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"splitDate: java.sql.Timestamp = 2015-05-01 00:00:00.0\nfullRawTrainingMultilabeled: org.apache.spark.sql.Dataset[Labeled] = [host: string, procs: string ... 3 more fields]\nvalidateRawMultilabeled: org.apache.spark.sql.Dataset[Labeled] = [host: string, procs: string ... 3 more fields]\n"}]},"apps":[],"jobName":"paragraph_1512481880922_-1047237288","id":"20171205-145120_2138621905","dateCreated":"2017-12-05T14:51:20+0100","dateStarted":"2017-12-18T12:27:49+0100","dateFinished":"2017-12-18T12:40:13+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:79"},{"text":"%md\n\n## 1.1 Some statistics:","user":"anonymous","dateUpdated":"2017-12-18T12:18:13+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>1.1 Some statistics:</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1512481995873_-460309680","id":"20171205-145315_1147368565","dateCreated":"2017-12-05T14:53:15+0100","dateStarted":"2017-12-18T12:18:13+0100","dateFinished":"2017-12-18T12:18:13+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:80"},{"text":"%kryo-spark\n{\nval trainingNormalCount = fullRawTrainingMultilabeled.filter($\"manualLabel\" === 0).count.toDouble\nval trainingAnomalyCount = fullRawTrainingMultilabeled.filter($\"manualLabel\" > 0).count.toDouble\nval validateCount = validateRawMultilabeled.count.toDouble\nprintln(\"train/test ratio: \" + ((trainingNormalCount + trainingAnomalyCount) / (trainingNormalCount + trainingAnomalyCount + validateCount)) +  \"/\" + (validateCount / (trainingNormalCount + trainingAnomalyCount + validateCount)))\nprintln(\"default training normal/anomaly ratio: \" + (trainingNormalCount / (trainingNormalCount + trainingAnomalyCount)) + \"/\" + (trainingAnomalyCount / (trainingNormalCount + trainingAnomalyCount)))\n}","user":"anonymous","dateUpdated":"2018-01-09T10:11:48+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"train/test ratio: 0.544800777376105/0.455199222623895\ndefault training normal/anomaly ratio: 0.9861785601898095/0.013821439810190421\n"}]},"apps":[],"jobName":"paragraph_1512481889395_-1319038577","id":"20171205-145129_284775633","dateCreated":"2017-12-05T14:51:29+0100","dateStarted":"2017-12-18T12:40:13+0100","dateFinished":"2017-12-18T12:40:21+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:81"},{"text":"%md\n\n# 2. Scale (scaler must only learn from training)","user":"anonymous","dateUpdated":"2017-12-18T12:18:13+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>2. Scale (scaler must only learn from training)</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1512482017105_347475831","id":"20171205-145337_2026032661","dateCreated":"2017-12-05T14:53:37+0100","dateStarted":"2017-12-18T12:18:13+0100","dateFinished":"2017-12-18T12:18:13+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:82"},{"text":"%kryo-spark\nval scaler = new StandardScaler()\n    .setInputCol(\"features\")\n    .setOutputCol(\"scaledFeatures\")\n    .setWithStd(true)\n    .setWithMean(true)\n    .fit(fullRawTrainingMultilabeled)\n    \nval validate = scaler.transform(fullRawTrainingMultilabeled).withColumn(\"manualLabel\", when($\"manualLabel\" > 0, 1.0).otherwise(0.0)).cache\n// Finished, so disk spilling is ok here\nval test = scaler.transform(validateRawMultilabeled).withColumn(\"manualLabel\", when($\"manualLabel\" > 0, 1.0).otherwise(0.0)).cache","user":"anonymous","dateUpdated":"2017-12-18T12:28:11+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"scaler: org.apache.spark.ml.feature.StandardScalerModel = stdScal_bc49006f8f97\nvalidate: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [host: string, procs: string ... 4 more fields]\ntest: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [host: string, procs: string ... 4 more fields]\n"}]},"apps":[],"jobName":"paragraph_1512481975914_-226397673","id":"20171205-145255_665780504","dateCreated":"2017-12-05T14:52:55+0100","dateStarted":"2017-12-18T12:40:13+0100","dateFinished":"2017-12-18T12:40:26+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:83"},{"text":"%md\n\n# 3. Select while retaining time series property","user":"anonymous","dateUpdated":"2017-12-18T12:18:13+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>3. Select while retaining time series property</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1512482027395_-1947936107","id":"20171205-145347_781934300","dateCreated":"2017-12-05T14:53:47+0100","dateStarted":"2017-12-18T12:18:13+0100","dateFinished":"2017-12-18T12:18:13+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:84"},{"text":"%kryo-spark\nimport org.apache.spark.sql.Row\nimport org.apache.spark.sql.catalyst.encoders.RowEncoder\n\ndef dayGroupFn(r: Row): String = {\n    r.getAs[String](\"host\") + r.getAs[String](\"procs\") + r.getAs[Timestamp](\"ts\").toString.substring(0, 11)\n}\n\n// Find days on which anomalies occurred\nval anomalyDays = validate.filter($\"manualLabel\" > 0)\n    \n// Find days on which no anomalies occurred, \nval normalDays = validate\n    .filter($\"manualLabel\" === 0)\n    .sample(false, 0.001)\n    .limit(10)\n    .flatMap(r => {\n        val before = Row.fromSeq(r.toSeq.patch(r.fieldIndex(\"ts\"), Seq(new Timestamp(r.getAs[Timestamp](\"ts\").getTime - (24 * 60 * 60 * 1000))), 1))\n        val after = Row.fromSeq(r.toSeq.patch(r.fieldIndex(\"ts\"), Seq(new Timestamp(r.getAs[Timestamp](\"ts\").getTime + (24 * 60 * 60 * 1000))), 1))\n        Iterator(before, r, after)\n    }) (RowEncoder.apply(validate.schema))\n\nval selectedDays = anomalyDays.union(normalDays).groupByKey(dayGroupFn(_))\n\nval training = validate.groupByKey(dayGroupFn(_))\n    .cogroup(selectedDays) ((k: String, xs: Iterator[Row], zs: Iterator[Row]) => {\n        if (zs.size > 0) xs else Iterator()\n    }) (RowEncoder.apply(validate.schema))\n    .cache\n\ntraining.count\nvalidate.count\ntest.count\n\n{\nval anomalyCount = training.filter($\"manualLabel\" > 0).count.toDouble\nval normalCount = training.filter($\"manualLabel\" === 0).count.toDouble\n\nprintln(\"selected training ratio of initial: \" + (anomalyCount.toDouble + normalCount.toDouble) / training.count)\nprintln(\"selected training normal/anomaly ratio: \" + normalCount / (normalCount + anomalyCount) + \"/\" + anomalyCount / (normalCount + anomalyCount))\n}","user":"anonymous","dateUpdated":"2017-12-19T11:05:03+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.Row\nimport org.apache.spark.sql.catalyst.encoders.RowEncoder\ndayGroupFn: (r: org.apache.spark.sql.Row)String\nanomalyDays: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [host: string, procs: string ... 4 more fields]\nnormalDays: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [host: string, procs: string ... 4 more fields]\nselectedDays: org.apache.spark.sql.KeyValueGroupedDataset[String,org.apache.spark.sql.Row] = org.apache.spark.sql.KeyValueGroupedDataset@4b3c05e5\ntraining: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [host: string, procs: string ... 4 more fields]\nres40: Long = 149941\nres41: Long = 4086622\nres42: Long = 3414509\nselected training ratio of initial: 0.04391290226501087\nselected training normal/anomaly ratio: 0.6232984974089809/0.37670150259101914\n"}]},"apps":[],"jobName":"paragraph_1512482029921_-1876742237","id":"20171205-145349_508308530","dateCreated":"2017-12-05T14:53:49+0100","dateStarted":"2017-12-18T12:40:21+0100","dateFinished":"2017-12-18T12:41:01+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:85"},{"text":"%md\n\n## Write to file","user":"anonymous","dateUpdated":"2017-12-18T12:18:13+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Write to file</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1512482046961_267878781","id":"20171205-145406_1165347621","dateCreated":"2017-12-05T14:54:06+0100","dateStarted":"2017-12-18T12:18:13+0100","dateFinished":"2017-12-18T12:18:13+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:86"},{"text":"%kryo-spark\ntraining.show\ntraining.rdd.saveAsObjectFile(\"/anomaly-detection-ml/training\")\nvalidate.rdd.saveAsObjectFile(\"/anomaly-detection-ml/validate\")\ntest.rdd.saveAsObjectFile(\"/anomaly-detection-ml/test\")","user":"anonymous","dateUpdated":"2018-01-11T16:08:00+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+-----+--------------------+--------------------+-----------+--------------------+\n|    host|procs|                  ts|            features|manualLabel|      scaledFeatures|\n+--------+-----+--------------------+--------------------+-----------+--------------------+\n|lphost10| wls1|2015-02-16 09:05:...|[1.0,0.0,0.971354...|        0.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 10:13:...|[1.0,0.0,0.971354...|        0.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 11:06:...|[1.0,0.0,0.971354...|        0.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 12:59:...|[1.0,0.0,0.971354...|        0.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 15:39:...|[1.0,0.0,0.971354...|        1.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 15:57:...|[1.0,0.0,0.971354...|        1.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 16:06:...|[1.0,0.0,0.971354...|        1.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 17:33:...|[1.0,0.0,0.971354...|        1.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 21:07:...|[1.0,0.0,0.971354...|        1.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 01:04:...|[1.0,0.0,0.971354...|        0.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 01:37:...|[1.0,0.0,0.971354...|        0.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 14:41:...|[1.0,0.0,0.971354...|        1.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 15:27:...|[1.0,0.0,0.971354...|        1.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 17:46:...|[1.0,0.0,0.971354...|        1.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 20:44:...|[1.0,0.0,0.971354...|        1.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 21:32:...|[1.0,0.0,0.971354...|        1.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 05:40:...|[1.0,0.0,0.971354...|        0.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 05:50:...|[1.0,0.0,0.971354...|        0.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 12:39:...|[1.0,0.0,0.971354...|        0.0|[0.08256228358393...|\n|lphost10| wls1|2015-02-16 13:04:...|[1.0,0.0,0.971354...|        0.0|[0.08256228358393...|\n+--------+-----+--------------------+--------------------+-----------+--------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1512482049641_504884103","id":"20171205-145409_609269955","dateCreated":"2017-12-05T14:54:09+0100","dateStarted":"2017-12-18T12:40:26+0100","dateFinished":"2017-12-18T12:44:30+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:87"},{"text":"","user":"anonymous","dateUpdated":"2017-12-18T12:18:13+0100","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1512482059017_-1329598652","id":"20171205-145419_1023442498","dateCreated":"2017-12-05T14:54:19+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:88"}],"name":"AnomalyDetectionML/Processing/Transformation Labeling Selection","id":"2CMR465Y2","angularObjects":{"2CZU9K4SP:shared_process":[],"2D18HK2TW:shared_process":[],"2D15EVSM5:shared_process":[],"2D4K6GGH4:shared_process":[],"2D2FQENTY:shared_process":[],"2CYJWH63V:shared_process":[],"2CY5C8M4U:shared_process":[],"2D2NZHKM4:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}